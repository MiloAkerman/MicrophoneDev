
MicrophoneDev_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c654  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006174  0800c900  0800c900  0000d900  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a74  08012a74  000153c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012a74  08012a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012a7c  08012a7c  000153c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012a7c  08012a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012a80  08012a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000013c4  24000000  08012a84  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00045de0  240013e0  08013e48  000153e0  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20000000  20000000  00016000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000153c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001070d  00000000  00000000  000153f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029aa  00000000  00000000  00025aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  000284b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000912  00000000  00000000  000290e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041967  00000000  00000000  000299f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122e7  00000000  00000000  0006b359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a0d1c  00000000  00000000  0007d640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0021e35c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000376c  00000000  00000000  0021e3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00221b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240013e0 	.word	0x240013e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c8dc 	.word	0x0800c8dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240013e4 	.word	0x240013e4
 80002dc:	0800c8dc 	.word	0x0800c8dc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b49      	ldr	r3, [pc, #292]	@ (80004ac <SystemInit+0x12c>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800038a:	4a48      	ldr	r2, [pc, #288]	@ (80004ac <SystemInit+0x12c>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b45      	ldr	r3, [pc, #276]	@ (80004ac <SystemInit+0x12c>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a44      	ldr	r2, [pc, #272]	@ (80004ac <SystemInit+0x12c>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b43      	ldr	r3, [pc, #268]	@ (80004b0 <SystemInit+0x130>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b40      	ldr	r3, [pc, #256]	@ (80004b0 <SystemInit+0x130>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a3e      	ldr	r2, [pc, #248]	@ (80004b0 <SystemInit+0x130>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b3d      	ldr	r3, [pc, #244]	@ (80004b4 <SystemInit+0x134>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a3c      	ldr	r2, [pc, #240]	@ (80004b4 <SystemInit+0x134>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b3a      	ldr	r3, [pc, #232]	@ (80004b4 <SystemInit+0x134>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b39      	ldr	r3, [pc, #228]	@ (80004b4 <SystemInit+0x134>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4938      	ldr	r1, [pc, #224]	@ (80004b4 <SystemInit+0x134>)
 80003d4:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <SystemInit+0x138>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b35      	ldr	r3, [pc, #212]	@ (80004b0 <SystemInit+0x130>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b32      	ldr	r3, [pc, #200]	@ (80004b0 <SystemInit+0x130>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a30      	ldr	r2, [pc, #192]	@ (80004b0 <SystemInit+0x130>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b2f      	ldr	r3, [pc, #188]	@ (80004b4 <SystemInit+0x134>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b2d      	ldr	r3, [pc, #180]	@ (80004b4 <SystemInit+0x134>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b2c      	ldr	r3, [pc, #176]	@ (80004b4 <SystemInit+0x134>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b2a      	ldr	r3, [pc, #168]	@ (80004b4 <SystemInit+0x134>)
 800040a:	4a2c      	ldr	r2, [pc, #176]	@ (80004bc <SystemInit+0x13c>)
 800040c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b29      	ldr	r3, [pc, #164]	@ (80004b4 <SystemInit+0x134>)
 8000410:	4a2b      	ldr	r2, [pc, #172]	@ (80004c0 <SystemInit+0x140>)
 8000412:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b27      	ldr	r3, [pc, #156]	@ (80004b4 <SystemInit+0x134>)
 8000416:	4a2b      	ldr	r2, [pc, #172]	@ (80004c4 <SystemInit+0x144>)
 8000418:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b26      	ldr	r3, [pc, #152]	@ (80004b4 <SystemInit+0x134>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b24      	ldr	r3, [pc, #144]	@ (80004b4 <SystemInit+0x134>)
 8000422:	4a28      	ldr	r2, [pc, #160]	@ (80004c4 <SystemInit+0x144>)
 8000424:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b23      	ldr	r3, [pc, #140]	@ (80004b4 <SystemInit+0x134>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b21      	ldr	r3, [pc, #132]	@ (80004b4 <SystemInit+0x134>)
 800042e:	4a25      	ldr	r2, [pc, #148]	@ (80004c4 <SystemInit+0x144>)
 8000430:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b20      	ldr	r3, [pc, #128]	@ (80004b4 <SystemInit+0x134>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b1e      	ldr	r3, [pc, #120]	@ (80004b4 <SystemInit+0x134>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a1d      	ldr	r2, [pc, #116]	@ (80004b4 <SystemInit+0x134>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <SystemInit+0x134>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b1f      	ldr	r3, [pc, #124]	@ (80004c8 <SystemInit+0x148>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800044e:	4a1e      	ldr	r2, [pc, #120]	@ (80004c8 <SystemInit+0x148>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000454:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b1d      	ldr	r3, [pc, #116]	@ (80004cc <SystemInit+0x14c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b1d      	ldr	r3, [pc, #116]	@ (80004d0 <SystemInit+0x150>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b1b      	ldr	r3, [pc, #108]	@ (80004d4 <SystemInit+0x154>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800046a:	4b12      	ldr	r3, [pc, #72]	@ (80004b4 <SystemInit+0x134>)
 800046c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000474:	2b00      	cmp	r3, #0
 8000476:	d113      	bne.n	80004a0 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000478:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <SystemInit+0x134>)
 800047a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800047e:	4a0d      	ldr	r2, [pc, #52]	@ (80004b4 <SystemInit+0x134>)
 8000480:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000484:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000488:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <SystemInit+0x158>)
 800048a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800048e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000490:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <SystemInit+0x134>)
 8000492:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000496:	4a07      	ldr	r2, [pc, #28]	@ (80004b4 <SystemInit+0x134>)
 8000498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800049c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	52002000 	.word	0x52002000
 80004b4:	58024400 	.word	0x58024400
 80004b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004bc:	02020200 	.word	0x02020200
 80004c0:	01ff0000 	.word	0x01ff0000
 80004c4:	01010280 	.word	0x01010280
 80004c8:	580000c0 	.word	0x580000c0
 80004cc:	5c001000 	.word	0x5c001000
 80004d0:	ffff0000 	.word	0xffff0000
 80004d4:	51008108 	.word	0x51008108
 80004d8:	52004000 	.word	0x52004000

080004dc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <ExitRun0Mode+0x2c>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	4a08      	ldr	r2, [pc, #32]	@ (8000508 <ExitRun0Mode+0x2c>)
 80004e6:	f023 0302 	bic.w	r3, r3, #2
 80004ea:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80004ec:	bf00      	nop
 80004ee:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <ExitRun0Mode+0x2c>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	58024800 	.word	0x58024800

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000512:	4b59      	ldr	r3, [pc, #356]	@ (8000678 <main+0x16c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800051a:	2b00      	cmp	r3, #0
 800051c:	d11b      	bne.n	8000556 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800051e:	f3bf 8f4f 	dsb	sy
}
 8000522:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000524:	f3bf 8f6f 	isb	sy
}
 8000528:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800052a:	4b53      	ldr	r3, [pc, #332]	@ (8000678 <main+0x16c>)
 800052c:	2200      	movs	r2, #0
 800052e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000532:	f3bf 8f4f 	dsb	sy
}
 8000536:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000538:	f3bf 8f6f 	isb	sy
}
 800053c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800053e:	4b4e      	ldr	r3, [pc, #312]	@ (8000678 <main+0x16c>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a4d      	ldr	r2, [pc, #308]	@ (8000678 <main+0x16c>)
 8000544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000548:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800054a:	f3bf 8f4f 	dsb	sy
}
 800054e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000550:	f3bf 8f6f 	isb	sy
}
 8000554:	e000      	b.n	8000558 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000556:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000558:	4b47      	ldr	r3, [pc, #284]	@ (8000678 <main+0x16c>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000560:	2b00      	cmp	r3, #0
 8000562:	d138      	bne.n	80005d6 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000564:	4b44      	ldr	r3, [pc, #272]	@ (8000678 <main+0x16c>)
 8000566:	2200      	movs	r2, #0
 8000568:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800056c:	f3bf 8f4f 	dsb	sy
}
 8000570:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000572:	4b41      	ldr	r3, [pc, #260]	@ (8000678 <main+0x16c>)
 8000574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000578:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	0b5b      	lsrs	r3, r3, #13
 800057e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000582:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	08db      	lsrs	r3, r3, #3
 8000588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800058c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	015a      	lsls	r2, r3, #5
 8000592:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000596:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000598:	68ba      	ldr	r2, [r7, #8]
 800059a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800059c:	4936      	ldr	r1, [pc, #216]	@ (8000678 <main+0x16c>)
 800059e:	4313      	orrs	r3, r2
 80005a0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	1e5a      	subs	r2, r3, #1
 80005a8:	60ba      	str	r2, [r7, #8]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1ef      	bne.n	800058e <main+0x82>
    } while(sets-- != 0U);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	1e5a      	subs	r2, r3, #1
 80005b2:	60fa      	str	r2, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1e5      	bne.n	8000584 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005be:	4b2e      	ldr	r3, [pc, #184]	@ (8000678 <main+0x16c>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a2d      	ldr	r2, [pc, #180]	@ (8000678 <main+0x16c>)
 80005c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ca:	f3bf 8f4f 	dsb	sy
}
 80005ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005d0:	f3bf 8f6f 	isb	sy
}
 80005d4:	e000      	b.n	80005d8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005d6:	bf00      	nop
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80005d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005dc:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80005de:	bf00      	nop
 80005e0:	4b26      	ldr	r3, [pc, #152]	@ (800067c <main+0x170>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d004      	beq.n	80005f6 <main+0xea>
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	1e5a      	subs	r2, r3, #1
 80005f0:	617a      	str	r2, [r7, #20]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	dcf4      	bgt.n	80005e0 <main+0xd4>
  if ( timeout < 0 )
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	da01      	bge.n	8000600 <main+0xf4>
  {
  Error_Handler();
 80005fc:	f000 fa04 	bl	8000a08 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fbf6 	bl	8000df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f83c 	bl	8000680 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000608:	f000 f8ac 	bl	8000764 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800060c:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <main+0x170>)
 800060e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000612:	4a1a      	ldr	r2, [pc, #104]	@ (800067c <main+0x170>)
 8000614:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000618:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800061c:	4b17      	ldr	r3, [pc, #92]	@ (800067c <main+0x170>)
 800061e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800062a:	2000      	movs	r0, #0
 800062c:	f002 fc00 	bl	8002e30 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000630:	2100      	movs	r1, #0
 8000632:	2000      	movs	r0, #0
 8000634:	f002 fc16 	bl	8002e64 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800063c:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800063e:	bf00      	nop
 8000640:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <main+0x170>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000648:	2b00      	cmp	r3, #0
 800064a:	d104      	bne.n	8000656 <main+0x14a>
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	1e5a      	subs	r2, r3, #1
 8000650:	617a      	str	r2, [r7, #20]
 8000652:	2b00      	cmp	r3, #0
 8000654:	dcf4      	bgt.n	8000640 <main+0x134>
if ( timeout < 0 )
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	2b00      	cmp	r3, #0
 800065a:	da01      	bge.n	8000660 <main+0x154>
{
Error_Handler();
 800065c:	f000 f9d4 	bl	8000a08 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f000 f99a 	bl	8000998 <MX_GPIO_Init>
  MX_BDMA_Init();
 8000664:	f000 f978 	bl	8000958 <MX_BDMA_Init>
  MX_SAI4_Init();
 8000668:	f000 f8b2 	bl	80007d0 <MX_SAI4_Init>
  MX_X_CUBE_AI_Init();
 800066c:	f006 fd20 	bl	80070b0 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000670:	f006 fd2c 	bl	80070cc <MX_X_CUBE_AI_Process>
 8000674:	e7fc      	b.n	8000670 <main+0x164>
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00
 800067c:	58024400 	.word	0x58024400

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09c      	sub	sp, #112	@ 0x70
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068a:	224c      	movs	r2, #76	@ 0x4c
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f00b fc50 	bl	800bf34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2220      	movs	r2, #32
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f00b fc4a 	bl	800bf34 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006a0:	2004      	movs	r0, #4
 80006a2:	f002 fbf3 	bl	8002e8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000758 <SystemClock_Config+0xd8>)
 80006ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000758 <SystemClock_Config+0xd8>)
 80006b0:	f023 0301 	bic.w	r3, r3, #1
 80006b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006b6:	4b28      	ldr	r3, [pc, #160]	@ (8000758 <SystemClock_Config+0xd8>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4b26      	ldr	r3, [pc, #152]	@ (800075c <SystemClock_Config+0xdc>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c8:	4a24      	ldr	r2, [pc, #144]	@ (800075c <SystemClock_Config+0xdc>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b22      	ldr	r3, [pc, #136]	@ (800075c <SystemClock_Config+0xdc>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006dc:	bf00      	nop
 80006de:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <SystemClock_Config+0xdc>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ea:	d1f8      	bne.n	80006de <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80006ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <SystemClock_Config+0xe0>)
 80006ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000760 <SystemClock_Config+0xe0>)
 80006f2:	f023 0303 	bic.w	r3, r3, #3
 80006f6:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2340      	movs	r3, #64	@ 0x40
 8000702:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070c:	4618      	mov	r0, r3
 800070e:	f002 fc17 	bl	8002f40 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000718:	f000 f976 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	233f      	movs	r3, #63	@ 0x3f
 800071e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2101      	movs	r1, #1
 8000740:	4618      	mov	r0, r3
 8000742:	f003 f857 	bl	80037f4 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800074c:	f000 f95c 	bl	8000a08 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3770      	adds	r7, #112	@ 0x70
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	58000400 	.word	0x58000400
 800075c:	58024800 	.word	0x58024800
 8000760:	58024400 	.word	0x58024400

08000764 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b0b2      	sub	sp, #200	@ 0xc8
 8000768:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	22c8      	movs	r2, #200	@ 0xc8
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f00b fbdf 	bl	800bf34 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A|RCC_PERIPHCLK_SAI4B;
 8000776:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800077a:	f04f 0300 	mov.w	r3, #0
 800077e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 4;
 8000782:	2304      	movs	r3, #4
 8000784:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 10;
 8000786:	230a      	movs	r3, #10
 8000788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 72;
 800078a:	2348      	movs	r3, #72	@ 0x48
 800078c:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000796:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800079a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800079c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007a0:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL3;
 80007a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  PeriphClkInitStruct.Sai4BClockSelection = RCC_SAI4BCLKSOURCE_PLL3;
 80007ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fb91 	bl	8003ee0 <HAL_RCCEx_PeriphCLKConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <PeriphCommonClock_Config+0x64>
  {
    Error_Handler();
 80007c4:	f000 f920 	bl	8000a08 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	37c8      	adds	r7, #200	@ 0xc8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 80007d4:	4b5c      	ldr	r3, [pc, #368]	@ (8000948 <MX_SAI4_Init+0x178>)
 80007d6:	4a5d      	ldr	r2, [pc, #372]	@ (800094c <MX_SAI4_Init+0x17c>)
 80007d8:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 80007da:	4b5b      	ldr	r3, [pc, #364]	@ (8000948 <MX_SAI4_Init+0x178>)
 80007dc:	2200      	movs	r2, #0
 80007de:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_TX;
 80007e0:	4b59      	ldr	r3, [pc, #356]	@ (8000948 <MX_SAI4_Init+0x178>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_8;
 80007e6:	4b58      	ldr	r3, [pc, #352]	@ (8000948 <MX_SAI4_Init+0x178>)
 80007e8:	2240      	movs	r2, #64	@ 0x40
 80007ea:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80007ec:	4b56      	ldr	r3, [pc, #344]	@ (8000948 <MX_SAI4_Init+0x178>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80007f2:	4b55      	ldr	r3, [pc, #340]	@ (8000948 <MX_SAI4_Init+0x178>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 80007f8:	4b53      	ldr	r3, [pc, #332]	@ (8000948 <MX_SAI4_Init+0x178>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80007fe:	4b52      	ldr	r3, [pc, #328]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8000804:	4b50      	ldr	r3, [pc, #320]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800080a:	4b4f      	ldr	r3, [pc, #316]	@ (8000948 <MX_SAI4_Init+0x178>)
 800080c:	2200      	movs	r2, #0
 800080e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000810:	4b4d      	ldr	r3, [pc, #308]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8000816:	4b4c      	ldr	r3, [pc, #304]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000818:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800081c:	621a      	str	r2, [r3, #32]
  hsai_BlockA4.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800081e:	4b4a      	ldr	r3, [pc, #296]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 8000824:	4b48      	ldr	r3, [pc, #288]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000826:	2200      	movs	r2, #0
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 800082a:	4b47      	ldr	r3, [pc, #284]	@ (8000948 <MX_SAI4_Init+0x178>)
 800082c:	2200      	movs	r2, #0
 800082e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA4.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000830:	4b45      	ldr	r3, [pc, #276]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000832:	2200      	movs	r2, #0
 8000834:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA4.Init.PdmInit.Activation = DISABLE;
 8000836:	4b44      	ldr	r3, [pc, #272]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000838:	2200      	movs	r2, #0
 800083a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 1;
 800083e:	4b42      	ldr	r3, [pc, #264]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000840:	2201      	movs	r2, #1
 8000842:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000844:	4b40      	ldr	r3, [pc, #256]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000846:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800084a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA4.FrameInit.FrameLength = 8;
 800084c:	4b3e      	ldr	r3, [pc, #248]	@ (8000948 <MX_SAI4_Init+0x178>)
 800084e:	2208      	movs	r2, #8
 8000850:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 8000852:	4b3d      	ldr	r3, [pc, #244]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000854:	2201      	movs	r2, #1
 8000856:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000858:	4b3b      	ldr	r3, [pc, #236]	@ (8000948 <MX_SAI4_Init+0x178>)
 800085a:	2200      	movs	r2, #0
 800085c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800085e:	4b3a      	ldr	r3, [pc, #232]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000860:	2200      	movs	r2, #0
 8000862:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000864:	4b38      	ldr	r3, [pc, #224]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000866:	2200      	movs	r2, #0
 8000868:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 800086a:	4b37      	ldr	r3, [pc, #220]	@ (8000948 <MX_SAI4_Init+0x178>)
 800086c:	2200      	movs	r2, #0
 800086e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000870:	4b35      	ldr	r3, [pc, #212]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000872:	2200      	movs	r2, #0
 8000874:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 8000876:	4b34      	ldr	r3, [pc, #208]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000878:	2201      	movs	r2, #1
 800087a:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x00000000;
 800087c:	4b32      	ldr	r3, [pc, #200]	@ (8000948 <MX_SAI4_Init+0x178>)
 800087e:	2200      	movs	r2, #0
 8000880:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 8000882:	4831      	ldr	r0, [pc, #196]	@ (8000948 <MX_SAI4_Init+0x178>)
 8000884:	f006 f86a 	bl	800695c <HAL_SAI_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_SAI4_Init+0xc2>
  {
    Error_Handler();
 800088e:	f000 f8bb 	bl	8000a08 <Error_Handler>
  }
  hsai_BlockB4.Instance = SAI4_Block_B;
 8000892:	4b2f      	ldr	r3, [pc, #188]	@ (8000950 <MX_SAI4_Init+0x180>)
 8000894:	4a2f      	ldr	r2, [pc, #188]	@ (8000954 <MX_SAI4_Init+0x184>)
 8000896:	601a      	str	r2, [r3, #0]
  hsai_BlockB4.Init.Protocol = SAI_FREE_PROTOCOL;
 8000898:	4b2d      	ldr	r3, [pc, #180]	@ (8000950 <MX_SAI4_Init+0x180>)
 800089a:	2200      	movs	r2, #0
 800089c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB4.Init.AudioMode = SAI_MODESLAVE_RX;
 800089e:	4b2c      	ldr	r3, [pc, #176]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008a0:	2203      	movs	r2, #3
 80008a2:	605a      	str	r2, [r3, #4]
  hsai_BlockB4.Init.DataSize = SAI_DATASIZE_8;
 80008a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008a6:	2240      	movs	r2, #64	@ 0x40
 80008a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80008aa:	4b29      	ldr	r3, [pc, #164]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80008b0:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB4.Init.Synchro = SAI_ASYNCHRONOUS;
 80008b6:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hsai_BlockB4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80008bc:	4b24      	ldr	r3, [pc, #144]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  hsai_BlockB4.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80008c2:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80008c8:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  hsai_BlockB4.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80008ce:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hsai_BlockB4.Init.MonoStereoMode = SAI_STEREOMODE;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB4.Init.CompandingMode = SAI_NOCOMPANDING;
 80008da:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008dc:	2200      	movs	r2, #0
 80008de:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB4.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB4.Init.PdmInit.Activation = DISABLE;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB4.Init.PdmInit.MicPairsNbr = 1;
 80008ee:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80008f4:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB4.FrameInit.FrameLength = 8;
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_SAI4_Init+0x180>)
 80008fe:	2208      	movs	r2, #8
 8000900:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB4.FrameInit.ActiveFrameLength = 1;
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_SAI4_Init+0x180>)
 8000904:	2201      	movs	r2, #1
 8000906:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_SAI4_Init+0x180>)
 800090a:	2200      	movs	r2, #0
 800090c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <MX_SAI4_Init+0x180>)
 8000910:	2200      	movs	r2, #0
 8000912:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000914:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_SAI4_Init+0x180>)
 8000916:	2200      	movs	r2, #0
 8000918:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB4.SlotInit.FirstBitOffset = 0;
 800091a:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <MX_SAI4_Init+0x180>)
 800091c:	2200      	movs	r2, #0
 800091e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000920:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_SAI4_Init+0x180>)
 8000922:	2200      	movs	r2, #0
 8000924:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB4.SlotInit.SlotNumber = 1;
 8000926:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <MX_SAI4_Init+0x180>)
 8000928:	2201      	movs	r2, #1
 800092a:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockB4.SlotInit.SlotActive = 0x00000000;
 800092c:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_SAI4_Init+0x180>)
 800092e:	2200      	movs	r2, #0
 8000930:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockB4) != HAL_OK)
 8000932:	4807      	ldr	r0, [pc, #28]	@ (8000950 <MX_SAI4_Init+0x180>)
 8000934:	f006 f812 	bl	800695c <HAL_SAI_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_SAI4_Init+0x172>
  {
    Error_Handler();
 800093e:	f000 f863 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	240013fc 	.word	0x240013fc
 800094c:	58005404 	.word	0x58005404
 8000950:	24001494 	.word	0x24001494
 8000954:	58005424 	.word	0x58005424

08000958 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <MX_BDMA_Init+0x3c>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	4a0b      	ldr	r2, [pc, #44]	@ (8000994 <MX_BDMA_Init+0x3c>)
 8000966:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_BDMA_Init+0x3c>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2081      	movs	r0, #129	@ 0x81
 8000982:	f000 fbae 	bl	80010e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000986:	2081      	movs	r0, #129	@ 0x81
 8000988:	f000 fbc5 	bl	8001116 <HAL_NVIC_EnableIRQ>

}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	58024400 	.word	0x58024400

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <MX_GPIO_Init+0x6c>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a4:	4a17      	ldr	r2, [pc, #92]	@ (8000a04 <MX_GPIO_Init+0x6c>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ae:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <MX_GPIO_Init+0x6c>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b4:	f003 0308 	and.w	r3, r3, #8
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <MX_GPIO_Init+0x6c>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c2:	4a10      	ldr	r2, [pc, #64]	@ (8000a04 <MX_GPIO_Init+0x6c>)
 80009c4:	f043 0310 	orr.w	r3, r3, #16
 80009c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <MX_GPIO_Init+0x6c>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d2:	f003 0310 	and.w	r3, r3, #16
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009da:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <MX_GPIO_Init+0x6c>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e0:	4a08      	ldr	r2, [pc, #32]	@ (8000a04 <MX_GPIO_Init+0x6c>)
 80009e2:	f043 0320 	orr.w	r3, r3, #32
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <MX_GPIO_Init+0x6c>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f0:	f003 0320 	and.w	r3, r3, #32
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	58024400 	.word	0x58024400

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <HAL_MspInit+0x30>)
 8000a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a20:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <HAL_MspInit+0x30>)
 8000a22:	f043 0302 	orr.w	r3, r3, #2
 8000a26:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_MspInit+0x30>)
 8000a2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	58024400 	.word	0x58024400

08000a48 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai4_b;

static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a58      	ldr	r2, [pc, #352]	@ (8000bb8 <HAL_SAI_MspInit+0x170>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d137      	bne.n	8000aca <HAL_SAI_MspInit+0x82>
    {
    /* Peripheral clock enable */
    if (SAI4_client == 0)
 8000a5a:	4b58      	ldr	r3, [pc, #352]	@ (8000bbc <HAL_SAI_MspInit+0x174>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d10e      	bne.n	8000a80 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8000a62:	4b57      	ldr	r3, [pc, #348]	@ (8000bc0 <HAL_SAI_MspInit+0x178>)
 8000a64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a68:	4a55      	ldr	r2, [pc, #340]	@ (8000bc0 <HAL_SAI_MspInit+0x178>)
 8000a6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a72:	4b53      	ldr	r3, [pc, #332]	@ (8000bc0 <HAL_SAI_MspInit+0x178>)
 8000a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]
    }
    SAI4_client ++;
 8000a80:	4b4e      	ldr	r3, [pc, #312]	@ (8000bbc <HAL_SAI_MspInit+0x174>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	4a4d      	ldr	r2, [pc, #308]	@ (8000bbc <HAL_SAI_MspInit+0x174>)
 8000a88:	6013      	str	r3, [r2, #0]
    PD6     ------> SAI4_SD_A
    PE2     ------> SAI4_MCLK_A
    PE5     ------> SAI4_SCK_A
    PE4     ------> SAI4_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a8a:	2340      	movs	r3, #64	@ 0x40
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI4;
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4847      	ldr	r0, [pc, #284]	@ (8000bc4 <HAL_SAI_MspInit+0x17c>)
 8000aa6:	f002 f813 	bl	8002ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_4;
 8000aaa:	2334      	movs	r3, #52	@ 0x34
 8000aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI4;
 8000aba:	2308      	movs	r3, #8
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4840      	ldr	r0, [pc, #256]	@ (8000bc8 <HAL_SAI_MspInit+0x180>)
 8000ac6:	f002 f803 	bl	8002ad0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI4_Block_B)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a3f      	ldr	r2, [pc, #252]	@ (8000bcc <HAL_SAI_MspInit+0x184>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d16c      	bne.n	8000bae <HAL_SAI_MspInit+0x166>
    {
      /* Peripheral clock enable */
      if (SAI4_client == 0)
 8000ad4:	4b39      	ldr	r3, [pc, #228]	@ (8000bbc <HAL_SAI_MspInit+0x174>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d10e      	bne.n	8000afa <HAL_SAI_MspInit+0xb2>
      {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8000adc:	4b38      	ldr	r3, [pc, #224]	@ (8000bc0 <HAL_SAI_MspInit+0x178>)
 8000ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ae2:	4a37      	ldr	r2, [pc, #220]	@ (8000bc0 <HAL_SAI_MspInit+0x178>)
 8000ae4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ae8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000aec:	4b34      	ldr	r3, [pc, #208]	@ (8000bc0 <HAL_SAI_MspInit+0x178>)
 8000aee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000af2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI4_client ++;
 8000afa:	4b30      	ldr	r3, [pc, #192]	@ (8000bbc <HAL_SAI_MspInit+0x174>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	4a2e      	ldr	r2, [pc, #184]	@ (8000bbc <HAL_SAI_MspInit+0x174>)
 8000b02:	6013      	str	r3, [r2, #0]
    /**SAI4_B_Block_B GPIO Configuration
    PE3     ------> SAI4_SD_B
    PF8     ------> SAI4_SCK_B
    PF9     ------> SAI4_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b04:	2308      	movs	r3, #8
 8000b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI4;
 8000b14:	2308      	movs	r3, #8
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	482a      	ldr	r0, [pc, #168]	@ (8000bc8 <HAL_SAI_MspInit+0x180>)
 8000b20:	f001 ffd6 	bl	8002ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b24:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI4;
 8000b36:	2308      	movs	r3, #8
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4823      	ldr	r0, [pc, #140]	@ (8000bd0 <HAL_SAI_MspInit+0x188>)
 8000b42:	f001 ffc5 	bl	8002ad0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_b.Instance = BDMA_Channel0;
 8000b46:	4b23      	ldr	r3, [pc, #140]	@ (8000bd4 <HAL_SAI_MspInit+0x18c>)
 8000b48:	4a23      	ldr	r2, [pc, #140]	@ (8000bd8 <HAL_SAI_MspInit+0x190>)
 8000b4a:	601a      	str	r2, [r3, #0]
    hdma_sai4_b.Init.Request = BDMA_REQUEST_SAI4_B;
 8000b4c:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <HAL_SAI_MspInit+0x18c>)
 8000b4e:	2210      	movs	r2, #16
 8000b50:	605a      	str	r2, [r3, #4]
    hdma_sai4_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b52:	4b20      	ldr	r3, [pc, #128]	@ (8000bd4 <HAL_SAI_MspInit+0x18c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
    hdma_sai4_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b58:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <HAL_SAI_MspInit+0x18c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
    hdma_sai4_b.Init.MemInc = DMA_MINC_ENABLE;
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <HAL_SAI_MspInit+0x18c>)
 8000b60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b64:	611a      	str	r2, [r3, #16]
    hdma_sai4_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <HAL_SAI_MspInit+0x18c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
    hdma_sai4_b.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <HAL_SAI_MspInit+0x18c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
    hdma_sai4_b.Init.Mode = DMA_CIRCULAR;
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <HAL_SAI_MspInit+0x18c>)
 8000b74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b78:	61da      	str	r2, [r3, #28]
    hdma_sai4_b.Init.Priority = DMA_PRIORITY_HIGH;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <HAL_SAI_MspInit+0x18c>)
 8000b7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_b) != HAL_OK)
 8000b82:	4814      	ldr	r0, [pc, #80]	@ (8000bd4 <HAL_SAI_MspInit+0x18c>)
 8000b84:	f000 fae2 	bl	800114c <HAL_DMA_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_SAI_MspInit+0x14a>
    {
      Error_Handler();
 8000b8e:	f7ff ff3b 	bl	8000a08 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_b);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <HAL_SAI_MspInit+0x18c>)
 8000b96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd4 <HAL_SAI_MspInit+0x18c>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_b);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd4 <HAL_SAI_MspInit+0x18c>)
 8000ba4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <HAL_SAI_MspInit+0x18c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	@ 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	58005404 	.word	0x58005404
 8000bbc:	240015a4 	.word	0x240015a4
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	58020c00 	.word	0x58020c00
 8000bc8:	58021000 	.word	0x58021000
 8000bcc:	58005424 	.word	0x58005424
 8000bd0:	58021400 	.word	0x58021400
 8000bd4:	2400152c 	.word	0x2400152c
 8000bd8:	58025408 	.word	0x58025408

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <NMI_Handler+0x4>

08000be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c32:	f000 f94f 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_b);
 8000c40:	4802      	ldr	r0, [pc, #8]	@ (8000c4c <BDMA_Channel0_IRQHandler+0x10>)
 8000c42:	f000 fddf 	bl	8001804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2400152c 	.word	0x2400152c

08000c50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	e00a      	b.n	8000c78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c62:	f3af 8000 	nop.w
 8000c66:	4601      	mov	r1, r0
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60ba      	str	r2, [r7, #8]
 8000c6e:	b2ca      	uxtb	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf0      	blt.n	8000c62 <_read+0x12>
  }

  return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e009      	b.n	8000cb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf1      	blt.n	8000c9c <_write+0x12>
  }
  return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_close>:

int _close(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cea:	605a      	str	r2, [r3, #4]
  return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_isatty>:

int _isatty(int file)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	@ (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d5c:	f00b f948 	bl	800bff0 <__errno>
 8000d60:	4603      	mov	r3, r0
 8000d62:	220c      	movs	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	24080000 	.word	0x24080000
 8000d8c:	00000800 	.word	0x00000800
 8000d90:	240015a8 	.word	0x240015a8
 8000d94:	20000000 	.word	0x20000000

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d98:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000dd4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000d9c:	f7ff fb9e 	bl	80004dc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da0:	f7ff faee 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da4:	480c      	ldr	r0, [pc, #48]	@ (8000dd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000da6:	490d      	ldr	r1, [pc, #52]	@ (8000ddc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da8:	4a0d      	ldr	r2, [pc, #52]	@ (8000de0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000de8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dca:	f00b f917 	bl	800bffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dce:	f7ff fb9d 	bl	800050c <main>
  bx  lr
 8000dd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000dd8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ddc:	240013c4 	.word	0x240013c4
  ldr r2, =_sidata
 8000de0:	08012a84 	.word	0x08012a84
  ldr r2, =_sbss
 8000de4:	240013e0 	.word	0x240013e0
  ldr r4, =_ebss
 8000de8:	240471c0 	.word	0x240471c0

08000dec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC3_IRQHandler>
	...

08000df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df6:	2003      	movs	r0, #3
 8000df8:	f000 f968 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000dfc:	f002 feb0 	bl	8003b60 <HAL_RCC_GetSysClockFreq>
 8000e00:	4602      	mov	r2, r0
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <HAL_Init+0x68>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	0a1b      	lsrs	r3, r3, #8
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	4913      	ldr	r1, [pc, #76]	@ (8000e5c <HAL_Init+0x6c>)
 8000e0e:	5ccb      	ldrb	r3, [r1, r3]
 8000e10:	f003 031f 	and.w	r3, r3, #31
 8000e14:	fa22 f303 	lsr.w	r3, r2, r3
 8000e18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <HAL_Init+0x68>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	4a0e      	ldr	r2, [pc, #56]	@ (8000e5c <HAL_Init+0x6c>)
 8000e24:	5cd3      	ldrb	r3, [r2, r3]
 8000e26:	f003 031f 	and.w	r3, r3, #31
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e30:	4a0b      	ldr	r2, [pc, #44]	@ (8000e60 <HAL_Init+0x70>)
 8000e32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e34:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <HAL_Init+0x74>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 f814 	bl	8000e68 <HAL_InitTick>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e002      	b.n	8000e50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4a:	f7ff fde3 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	58024400 	.word	0x58024400
 8000e5c:	0800ca18 	.word	0x0800ca18
 8000e60:	24000004 	.word	0x24000004
 8000e64:	24000000 	.word	0x24000000

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e70:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <HAL_InitTick+0x60>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e021      	b.n	8000ec0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <HAL_InitTick+0x64>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <HAL_InitTick+0x60>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f94d 	bl	8001132 <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 f917 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	@ (8000ed0 <HAL_InitTick+0x68>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	2400000c 	.word	0x2400000c
 8000ecc:	24000000 	.word	0x24000000
 8000ed0:	24000008 	.word	0x24000008

08000ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_IncTick+0x20>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_IncTick+0x24>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <HAL_IncTick+0x24>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	2400000c 	.word	0x2400000c
 8000ef8:	240015ac 	.word	0x240015ac

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	@ (8000f10 <HAL_GetTick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	240015ac 	.word	0x240015ac

08000f14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f18:	4b03      	ldr	r3, [pc, #12]	@ (8000f28 <HAL_GetREVID+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	0c1b      	lsrs	r3, r3, #16
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	5c001000 	.word	0x5c001000

08000f2c <__NVIC_SetPriorityGrouping>:
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <__NVIC_SetPriorityGrouping+0x40>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	@ (8000f6c <__NVIC_SetPriorityGrouping+0x40>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00
 8000f70:	05fa0000 	.word	0x05fa0000

08000f74 <__NVIC_GetPriorityGrouping>:
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_EnableIRQ>:
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db0b      	blt.n	8000fba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	f003 021f 	and.w	r2, r3, #31
 8000fa8:	4907      	ldr	r1, [pc, #28]	@ (8000fc8 <__NVIC_EnableIRQ+0x38>)
 8000faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	@ (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	@ (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	@ 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	@ 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff ff8e 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff29 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff40 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff90 	bl	8001020 <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5f 	bl	8000fcc <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff33 	bl	8000f90 <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffa4 	bl	8001088 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff fed2 	bl	8000efc <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e316      	b.n	8001792 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a66      	ldr	r2, [pc, #408]	@ (8001304 <HAL_DMA_Init+0x1b8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d04a      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a65      	ldr	r2, [pc, #404]	@ (8001308 <HAL_DMA_Init+0x1bc>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d045      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a63      	ldr	r2, [pc, #396]	@ (800130c <HAL_DMA_Init+0x1c0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d040      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a62      	ldr	r2, [pc, #392]	@ (8001310 <HAL_DMA_Init+0x1c4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d03b      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a60      	ldr	r2, [pc, #384]	@ (8001314 <HAL_DMA_Init+0x1c8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d036      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a5f      	ldr	r2, [pc, #380]	@ (8001318 <HAL_DMA_Init+0x1cc>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d031      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a5d      	ldr	r2, [pc, #372]	@ (800131c <HAL_DMA_Init+0x1d0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d02c      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a5c      	ldr	r2, [pc, #368]	@ (8001320 <HAL_DMA_Init+0x1d4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d027      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a5a      	ldr	r2, [pc, #360]	@ (8001324 <HAL_DMA_Init+0x1d8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d022      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a59      	ldr	r2, [pc, #356]	@ (8001328 <HAL_DMA_Init+0x1dc>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d01d      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a57      	ldr	r2, [pc, #348]	@ (800132c <HAL_DMA_Init+0x1e0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d018      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a56      	ldr	r2, [pc, #344]	@ (8001330 <HAL_DMA_Init+0x1e4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d013      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a54      	ldr	r2, [pc, #336]	@ (8001334 <HAL_DMA_Init+0x1e8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00e      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a53      	ldr	r2, [pc, #332]	@ (8001338 <HAL_DMA_Init+0x1ec>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d009      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a51      	ldr	r2, [pc, #324]	@ (800133c <HAL_DMA_Init+0x1f0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d004      	beq.n	8001204 <HAL_DMA_Init+0xb8>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a50      	ldr	r2, [pc, #320]	@ (8001340 <HAL_DMA_Init+0x1f4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d101      	bne.n	8001208 <HAL_DMA_Init+0xbc>
 8001204:	2301      	movs	r3, #1
 8001206:	e000      	b.n	800120a <HAL_DMA_Init+0xbe>
 8001208:	2300      	movs	r3, #0
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 813b 	beq.w	8001486 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2202      	movs	r2, #2
 8001214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a37      	ldr	r2, [pc, #220]	@ (8001304 <HAL_DMA_Init+0x1b8>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d04a      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a36      	ldr	r2, [pc, #216]	@ (8001308 <HAL_DMA_Init+0x1bc>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d045      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a34      	ldr	r2, [pc, #208]	@ (800130c <HAL_DMA_Init+0x1c0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d040      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a33      	ldr	r2, [pc, #204]	@ (8001310 <HAL_DMA_Init+0x1c4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d03b      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a31      	ldr	r2, [pc, #196]	@ (8001314 <HAL_DMA_Init+0x1c8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d036      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a30      	ldr	r2, [pc, #192]	@ (8001318 <HAL_DMA_Init+0x1cc>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d031      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a2e      	ldr	r2, [pc, #184]	@ (800131c <HAL_DMA_Init+0x1d0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d02c      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a2d      	ldr	r2, [pc, #180]	@ (8001320 <HAL_DMA_Init+0x1d4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d027      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a2b      	ldr	r2, [pc, #172]	@ (8001324 <HAL_DMA_Init+0x1d8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d022      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a2a      	ldr	r2, [pc, #168]	@ (8001328 <HAL_DMA_Init+0x1dc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d01d      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a28      	ldr	r2, [pc, #160]	@ (800132c <HAL_DMA_Init+0x1e0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d018      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a27      	ldr	r2, [pc, #156]	@ (8001330 <HAL_DMA_Init+0x1e4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d013      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a25      	ldr	r2, [pc, #148]	@ (8001334 <HAL_DMA_Init+0x1e8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00e      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a24      	ldr	r2, [pc, #144]	@ (8001338 <HAL_DMA_Init+0x1ec>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d009      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a22      	ldr	r2, [pc, #136]	@ (800133c <HAL_DMA_Init+0x1f0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d004      	beq.n	80012c0 <HAL_DMA_Init+0x174>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a21      	ldr	r2, [pc, #132]	@ (8001340 <HAL_DMA_Init+0x1f4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d108      	bne.n	80012d2 <HAL_DMA_Init+0x186>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0201 	bic.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e007      	b.n	80012e2 <HAL_DMA_Init+0x196>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0201 	bic.w	r2, r2, #1
 80012e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80012e2:	e02f      	b.n	8001344 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012e4:	f7ff fe0a 	bl	8000efc <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d928      	bls.n	8001344 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2220      	movs	r2, #32
 80012f6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2203      	movs	r2, #3
 80012fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e246      	b.n	8001792 <HAL_DMA_Init+0x646>
 8001304:	40020010 	.word	0x40020010
 8001308:	40020028 	.word	0x40020028
 800130c:	40020040 	.word	0x40020040
 8001310:	40020058 	.word	0x40020058
 8001314:	40020070 	.word	0x40020070
 8001318:	40020088 	.word	0x40020088
 800131c:	400200a0 	.word	0x400200a0
 8001320:	400200b8 	.word	0x400200b8
 8001324:	40020410 	.word	0x40020410
 8001328:	40020428 	.word	0x40020428
 800132c:	40020440 	.word	0x40020440
 8001330:	40020458 	.word	0x40020458
 8001334:	40020470 	.word	0x40020470
 8001338:	40020488 	.word	0x40020488
 800133c:	400204a0 	.word	0x400204a0
 8001340:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1c8      	bne.n	80012e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4b83      	ldr	r3, [pc, #524]	@ (800156c <HAL_DMA_Init+0x420>)
 800135e:	4013      	ands	r3, r2
 8001360:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800136a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001376:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001382:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4313      	orrs	r3, r2
 800138e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001394:	2b04      	cmp	r3, #4
 8001396:	d107      	bne.n	80013a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a0:	4313      	orrs	r3, r2
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80013a8:	4b71      	ldr	r3, [pc, #452]	@ (8001570 <HAL_DMA_Init+0x424>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b71      	ldr	r3, [pc, #452]	@ (8001574 <HAL_DMA_Init+0x428>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013b4:	d328      	bcc.n	8001408 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b28      	cmp	r3, #40	@ 0x28
 80013bc:	d903      	bls.n	80013c6 <HAL_DMA_Init+0x27a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80013c4:	d917      	bls.n	80013f6 <HAL_DMA_Init+0x2aa>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80013cc:	d903      	bls.n	80013d6 <HAL_DMA_Init+0x28a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b42      	cmp	r3, #66	@ 0x42
 80013d4:	d90f      	bls.n	80013f6 <HAL_DMA_Init+0x2aa>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b46      	cmp	r3, #70	@ 0x46
 80013dc:	d903      	bls.n	80013e6 <HAL_DMA_Init+0x29a>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b48      	cmp	r3, #72	@ 0x48
 80013e4:	d907      	bls.n	80013f6 <HAL_DMA_Init+0x2aa>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b4e      	cmp	r3, #78	@ 0x4e
 80013ec:	d905      	bls.n	80013fa <HAL_DMA_Init+0x2ae>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b52      	cmp	r3, #82	@ 0x52
 80013f4:	d801      	bhi.n	80013fa <HAL_DMA_Init+0x2ae>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_DMA_Init+0x2b0>
 80013fa:	2300      	movs	r3, #0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001406:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f023 0307 	bic.w	r3, r3, #7
 800141e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	4313      	orrs	r3, r2
 8001428:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142e:	2b04      	cmp	r3, #4
 8001430:	d117      	bne.n	8001462 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4313      	orrs	r3, r2
 800143a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00e      	beq.n	8001462 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f001 f9b9 	bl	80027bc <DMA_CheckFifoParam>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2240      	movs	r2, #64	@ 0x40
 8001454:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e197      	b.n	8001792 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f001 f8f4 	bl	8002658 <DMA_CalcBaseAndBitshift>
 8001470:	4603      	mov	r3, r0
 8001472:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001478:	f003 031f 	and.w	r3, r3, #31
 800147c:	223f      	movs	r2, #63	@ 0x3f
 800147e:	409a      	lsls	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	e0cd      	b.n	8001622 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a3b      	ldr	r2, [pc, #236]	@ (8001578 <HAL_DMA_Init+0x42c>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d022      	beq.n	80014d6 <HAL_DMA_Init+0x38a>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a39      	ldr	r2, [pc, #228]	@ (800157c <HAL_DMA_Init+0x430>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d01d      	beq.n	80014d6 <HAL_DMA_Init+0x38a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a38      	ldr	r2, [pc, #224]	@ (8001580 <HAL_DMA_Init+0x434>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d018      	beq.n	80014d6 <HAL_DMA_Init+0x38a>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a36      	ldr	r2, [pc, #216]	@ (8001584 <HAL_DMA_Init+0x438>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_DMA_Init+0x38a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a35      	ldr	r2, [pc, #212]	@ (8001588 <HAL_DMA_Init+0x43c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d00e      	beq.n	80014d6 <HAL_DMA_Init+0x38a>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a33      	ldr	r2, [pc, #204]	@ (800158c <HAL_DMA_Init+0x440>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d009      	beq.n	80014d6 <HAL_DMA_Init+0x38a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a32      	ldr	r2, [pc, #200]	@ (8001590 <HAL_DMA_Init+0x444>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d004      	beq.n	80014d6 <HAL_DMA_Init+0x38a>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a30      	ldr	r2, [pc, #192]	@ (8001594 <HAL_DMA_Init+0x448>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_DMA_Init+0x38e>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_DMA_Init+0x390>
 80014da:	2300      	movs	r3, #0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 8097 	beq.w	8001610 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a24      	ldr	r2, [pc, #144]	@ (8001578 <HAL_DMA_Init+0x42c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d021      	beq.n	8001530 <HAL_DMA_Init+0x3e4>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a22      	ldr	r2, [pc, #136]	@ (800157c <HAL_DMA_Init+0x430>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d01c      	beq.n	8001530 <HAL_DMA_Init+0x3e4>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a21      	ldr	r2, [pc, #132]	@ (8001580 <HAL_DMA_Init+0x434>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d017      	beq.n	8001530 <HAL_DMA_Init+0x3e4>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a1f      	ldr	r2, [pc, #124]	@ (8001584 <HAL_DMA_Init+0x438>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d012      	beq.n	8001530 <HAL_DMA_Init+0x3e4>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a1e      	ldr	r2, [pc, #120]	@ (8001588 <HAL_DMA_Init+0x43c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d00d      	beq.n	8001530 <HAL_DMA_Init+0x3e4>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a1c      	ldr	r2, [pc, #112]	@ (800158c <HAL_DMA_Init+0x440>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d008      	beq.n	8001530 <HAL_DMA_Init+0x3e4>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a1b      	ldr	r2, [pc, #108]	@ (8001590 <HAL_DMA_Init+0x444>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d003      	beq.n	8001530 <HAL_DMA_Init+0x3e4>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a19      	ldr	r2, [pc, #100]	@ (8001594 <HAL_DMA_Init+0x448>)
 800152e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2202      	movs	r2, #2
 8001534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <HAL_DMA_Init+0x44c>)
 800154c:	4013      	ands	r3, r2
 800154e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b40      	cmp	r3, #64	@ 0x40
 8001556:	d021      	beq.n	800159c <HAL_DMA_Init+0x450>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b80      	cmp	r3, #128	@ 0x80
 800155e:	d102      	bne.n	8001566 <HAL_DMA_Init+0x41a>
 8001560:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001564:	e01b      	b.n	800159e <HAL_DMA_Init+0x452>
 8001566:	2300      	movs	r3, #0
 8001568:	e019      	b.n	800159e <HAL_DMA_Init+0x452>
 800156a:	bf00      	nop
 800156c:	fe10803f 	.word	0xfe10803f
 8001570:	5c001000 	.word	0x5c001000
 8001574:	ffff0000 	.word	0xffff0000
 8001578:	58025408 	.word	0x58025408
 800157c:	5802541c 	.word	0x5802541c
 8001580:	58025430 	.word	0x58025430
 8001584:	58025444 	.word	0x58025444
 8001588:	58025458 	.word	0x58025458
 800158c:	5802546c 	.word	0x5802546c
 8001590:	58025480 	.word	0x58025480
 8001594:	58025494 	.word	0x58025494
 8001598:	fffe000f 	.word	0xfffe000f
 800159c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68d2      	ldr	r2, [r2, #12]
 80015a2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80015ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80015b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80015bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80015c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80015cc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b6e      	ldr	r3, [pc, #440]	@ (800179c <HAL_DMA_Init+0x650>)
 80015e4:	4413      	add	r3, r2
 80015e6:	4a6e      	ldr	r2, [pc, #440]	@ (80017a0 <HAL_DMA_Init+0x654>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	009a      	lsls	r2, r3, #2
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f001 f82f 	bl	8002658 <DMA_CalcBaseAndBitshift>
 80015fa:	4603      	mov	r3, r0
 80015fc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	2201      	movs	r2, #1
 8001608:	409a      	lsls	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	e008      	b.n	8001622 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2240      	movs	r2, #64	@ 0x40
 8001614:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2203      	movs	r2, #3
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0b7      	b.n	8001792 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a5f      	ldr	r2, [pc, #380]	@ (80017a4 <HAL_DMA_Init+0x658>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d072      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a5d      	ldr	r2, [pc, #372]	@ (80017a8 <HAL_DMA_Init+0x65c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d06d      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a5c      	ldr	r2, [pc, #368]	@ (80017ac <HAL_DMA_Init+0x660>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d068      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a5a      	ldr	r2, [pc, #360]	@ (80017b0 <HAL_DMA_Init+0x664>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d063      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a59      	ldr	r2, [pc, #356]	@ (80017b4 <HAL_DMA_Init+0x668>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d05e      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a57      	ldr	r2, [pc, #348]	@ (80017b8 <HAL_DMA_Init+0x66c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d059      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a56      	ldr	r2, [pc, #344]	@ (80017bc <HAL_DMA_Init+0x670>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d054      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a54      	ldr	r2, [pc, #336]	@ (80017c0 <HAL_DMA_Init+0x674>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d04f      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a53      	ldr	r2, [pc, #332]	@ (80017c4 <HAL_DMA_Init+0x678>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d04a      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a51      	ldr	r2, [pc, #324]	@ (80017c8 <HAL_DMA_Init+0x67c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d045      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a50      	ldr	r2, [pc, #320]	@ (80017cc <HAL_DMA_Init+0x680>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d040      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a4e      	ldr	r2, [pc, #312]	@ (80017d0 <HAL_DMA_Init+0x684>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d03b      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a4d      	ldr	r2, [pc, #308]	@ (80017d4 <HAL_DMA_Init+0x688>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d036      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a4b      	ldr	r2, [pc, #300]	@ (80017d8 <HAL_DMA_Init+0x68c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d031      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a4a      	ldr	r2, [pc, #296]	@ (80017dc <HAL_DMA_Init+0x690>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d02c      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a48      	ldr	r2, [pc, #288]	@ (80017e0 <HAL_DMA_Init+0x694>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d027      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a47      	ldr	r2, [pc, #284]	@ (80017e4 <HAL_DMA_Init+0x698>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d022      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a45      	ldr	r2, [pc, #276]	@ (80017e8 <HAL_DMA_Init+0x69c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d01d      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a44      	ldr	r2, [pc, #272]	@ (80017ec <HAL_DMA_Init+0x6a0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d018      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a42      	ldr	r2, [pc, #264]	@ (80017f0 <HAL_DMA_Init+0x6a4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a41      	ldr	r2, [pc, #260]	@ (80017f4 <HAL_DMA_Init+0x6a8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d00e      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a3f      	ldr	r2, [pc, #252]	@ (80017f8 <HAL_DMA_Init+0x6ac>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d009      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a3e      	ldr	r2, [pc, #248]	@ (80017fc <HAL_DMA_Init+0x6b0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d004      	beq.n	8001712 <HAL_DMA_Init+0x5c6>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a3c      	ldr	r2, [pc, #240]	@ (8001800 <HAL_DMA_Init+0x6b4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_DMA_Init+0x5ca>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_DMA_Init+0x5cc>
 8001716:	2300      	movs	r3, #0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d032      	beq.n	8001782 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f001 f8c9 	bl	80028b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b80      	cmp	r3, #128	@ 0x80
 8001728:	d102      	bne.n	8001730 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001744:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d010      	beq.n	8001770 <HAL_DMA_Init+0x624>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b08      	cmp	r3, #8
 8001754:	d80c      	bhi.n	8001770 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f001 f946 	bl	80029e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	e008      	b.n	8001782 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	a7fdabf8 	.word	0xa7fdabf8
 80017a0:	cccccccd 	.word	0xcccccccd
 80017a4:	40020010 	.word	0x40020010
 80017a8:	40020028 	.word	0x40020028
 80017ac:	40020040 	.word	0x40020040
 80017b0:	40020058 	.word	0x40020058
 80017b4:	40020070 	.word	0x40020070
 80017b8:	40020088 	.word	0x40020088
 80017bc:	400200a0 	.word	0x400200a0
 80017c0:	400200b8 	.word	0x400200b8
 80017c4:	40020410 	.word	0x40020410
 80017c8:	40020428 	.word	0x40020428
 80017cc:	40020440 	.word	0x40020440
 80017d0:	40020458 	.word	0x40020458
 80017d4:	40020470 	.word	0x40020470
 80017d8:	40020488 	.word	0x40020488
 80017dc:	400204a0 	.word	0x400204a0
 80017e0:	400204b8 	.word	0x400204b8
 80017e4:	58025408 	.word	0x58025408
 80017e8:	5802541c 	.word	0x5802541c
 80017ec:	58025430 	.word	0x58025430
 80017f0:	58025444 	.word	0x58025444
 80017f4:	58025458 	.word	0x58025458
 80017f8:	5802546c 	.word	0x5802546c
 80017fc:	58025480 	.word	0x58025480
 8001800:	58025494 	.word	0x58025494

08001804 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	@ 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001810:	4b67      	ldr	r3, [pc, #412]	@ (80019b0 <HAL_DMA_IRQHandler+0x1ac>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a67      	ldr	r2, [pc, #412]	@ (80019b4 <HAL_DMA_IRQHandler+0x1b0>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	0a9b      	lsrs	r3, r3, #10
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001822:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001828:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a5f      	ldr	r2, [pc, #380]	@ (80019b8 <HAL_DMA_IRQHandler+0x1b4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d04a      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a5d      	ldr	r2, [pc, #372]	@ (80019bc <HAL_DMA_IRQHandler+0x1b8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d045      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a5c      	ldr	r2, [pc, #368]	@ (80019c0 <HAL_DMA_IRQHandler+0x1bc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d040      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a5a      	ldr	r2, [pc, #360]	@ (80019c4 <HAL_DMA_IRQHandler+0x1c0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d03b      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a59      	ldr	r2, [pc, #356]	@ (80019c8 <HAL_DMA_IRQHandler+0x1c4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d036      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a57      	ldr	r2, [pc, #348]	@ (80019cc <HAL_DMA_IRQHandler+0x1c8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d031      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a56      	ldr	r2, [pc, #344]	@ (80019d0 <HAL_DMA_IRQHandler+0x1cc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d02c      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a54      	ldr	r2, [pc, #336]	@ (80019d4 <HAL_DMA_IRQHandler+0x1d0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d027      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a53      	ldr	r2, [pc, #332]	@ (80019d8 <HAL_DMA_IRQHandler+0x1d4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d022      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a51      	ldr	r2, [pc, #324]	@ (80019dc <HAL_DMA_IRQHandler+0x1d8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d01d      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a50      	ldr	r2, [pc, #320]	@ (80019e0 <HAL_DMA_IRQHandler+0x1dc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d018      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a4e      	ldr	r2, [pc, #312]	@ (80019e4 <HAL_DMA_IRQHandler+0x1e0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a4d      	ldr	r2, [pc, #308]	@ (80019e8 <HAL_DMA_IRQHandler+0x1e4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00e      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a4b      	ldr	r2, [pc, #300]	@ (80019ec <HAL_DMA_IRQHandler+0x1e8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d009      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a4a      	ldr	r2, [pc, #296]	@ (80019f0 <HAL_DMA_IRQHandler+0x1ec>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d004      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xd2>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a48      	ldr	r2, [pc, #288]	@ (80019f4 <HAL_DMA_IRQHandler+0x1f0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d101      	bne.n	80018da <HAL_DMA_IRQHandler+0xd6>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_DMA_IRQHandler+0xd8>
 80018da:	2300      	movs	r3, #0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 842b 	beq.w	8002138 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	2208      	movs	r2, #8
 80018ec:	409a      	lsls	r2, r3
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80a2 	beq.w	8001a3c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2e      	ldr	r2, [pc, #184]	@ (80019b8 <HAL_DMA_IRQHandler+0x1b4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d04a      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a2d      	ldr	r2, [pc, #180]	@ (80019bc <HAL_DMA_IRQHandler+0x1b8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d045      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a2b      	ldr	r2, [pc, #172]	@ (80019c0 <HAL_DMA_IRQHandler+0x1bc>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d040      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a2a      	ldr	r2, [pc, #168]	@ (80019c4 <HAL_DMA_IRQHandler+0x1c0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d03b      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a28      	ldr	r2, [pc, #160]	@ (80019c8 <HAL_DMA_IRQHandler+0x1c4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d036      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a27      	ldr	r2, [pc, #156]	@ (80019cc <HAL_DMA_IRQHandler+0x1c8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d031      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a25      	ldr	r2, [pc, #148]	@ (80019d0 <HAL_DMA_IRQHandler+0x1cc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d02c      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a24      	ldr	r2, [pc, #144]	@ (80019d4 <HAL_DMA_IRQHandler+0x1d0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d027      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a22      	ldr	r2, [pc, #136]	@ (80019d8 <HAL_DMA_IRQHandler+0x1d4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d022      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a21      	ldr	r2, [pc, #132]	@ (80019dc <HAL_DMA_IRQHandler+0x1d8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d01d      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a1f      	ldr	r2, [pc, #124]	@ (80019e0 <HAL_DMA_IRQHandler+0x1dc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d018      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1e      	ldr	r2, [pc, #120]	@ (80019e4 <HAL_DMA_IRQHandler+0x1e0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d013      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1c      	ldr	r2, [pc, #112]	@ (80019e8 <HAL_DMA_IRQHandler+0x1e4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00e      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1b      	ldr	r2, [pc, #108]	@ (80019ec <HAL_DMA_IRQHandler+0x1e8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d009      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a19      	ldr	r2, [pc, #100]	@ (80019f0 <HAL_DMA_IRQHandler+0x1ec>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d004      	beq.n	8001998 <HAL_DMA_IRQHandler+0x194>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a18      	ldr	r2, [pc, #96]	@ (80019f4 <HAL_DMA_IRQHandler+0x1f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d12f      	bne.n	80019f8 <HAL_DMA_IRQHandler+0x1f4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bf14      	ite	ne
 80019a6:	2301      	movne	r3, #1
 80019a8:	2300      	moveq	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	e02e      	b.n	8001a0c <HAL_DMA_IRQHandler+0x208>
 80019ae:	bf00      	nop
 80019b0:	24000000 	.word	0x24000000
 80019b4:	1b4e81b5 	.word	0x1b4e81b5
 80019b8:	40020010 	.word	0x40020010
 80019bc:	40020028 	.word	0x40020028
 80019c0:	40020040 	.word	0x40020040
 80019c4:	40020058 	.word	0x40020058
 80019c8:	40020070 	.word	0x40020070
 80019cc:	40020088 	.word	0x40020088
 80019d0:	400200a0 	.word	0x400200a0
 80019d4:	400200b8 	.word	0x400200b8
 80019d8:	40020410 	.word	0x40020410
 80019dc:	40020428 	.word	0x40020428
 80019e0:	40020440 	.word	0x40020440
 80019e4:	40020458 	.word	0x40020458
 80019e8:	40020470 	.word	0x40020470
 80019ec:	40020488 	.word	0x40020488
 80019f0:	400204a0 	.word	0x400204a0
 80019f4:	400204b8 	.word	0x400204b8
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf14      	ite	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	2300      	moveq	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d015      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0204 	bic.w	r2, r2, #4
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2208      	movs	r2, #8
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d06e      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a69      	ldr	r2, [pc, #420]	@ (8001bfc <HAL_DMA_IRQHandler+0x3f8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d04a      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a67      	ldr	r2, [pc, #412]	@ (8001c00 <HAL_DMA_IRQHandler+0x3fc>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d045      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a66      	ldr	r2, [pc, #408]	@ (8001c04 <HAL_DMA_IRQHandler+0x400>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d040      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a64      	ldr	r2, [pc, #400]	@ (8001c08 <HAL_DMA_IRQHandler+0x404>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d03b      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a63      	ldr	r2, [pc, #396]	@ (8001c0c <HAL_DMA_IRQHandler+0x408>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d036      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a61      	ldr	r2, [pc, #388]	@ (8001c10 <HAL_DMA_IRQHandler+0x40c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d031      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a60      	ldr	r2, [pc, #384]	@ (8001c14 <HAL_DMA_IRQHandler+0x410>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d02c      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a5e      	ldr	r2, [pc, #376]	@ (8001c18 <HAL_DMA_IRQHandler+0x414>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d027      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a5d      	ldr	r2, [pc, #372]	@ (8001c1c <HAL_DMA_IRQHandler+0x418>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d022      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a5b      	ldr	r2, [pc, #364]	@ (8001c20 <HAL_DMA_IRQHandler+0x41c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d01d      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a5a      	ldr	r2, [pc, #360]	@ (8001c24 <HAL_DMA_IRQHandler+0x420>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d018      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	@ (8001c28 <HAL_DMA_IRQHandler+0x424>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a57      	ldr	r2, [pc, #348]	@ (8001c2c <HAL_DMA_IRQHandler+0x428>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00e      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a55      	ldr	r2, [pc, #340]	@ (8001c30 <HAL_DMA_IRQHandler+0x42c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d009      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a54      	ldr	r2, [pc, #336]	@ (8001c34 <HAL_DMA_IRQHandler+0x430>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d004      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x2ee>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a52      	ldr	r2, [pc, #328]	@ (8001c38 <HAL_DMA_IRQHandler+0x434>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d10a      	bne.n	8001b08 <HAL_DMA_IRQHandler+0x304>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bf14      	ite	ne
 8001b00:	2301      	movne	r3, #1
 8001b02:	2300      	moveq	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	e003      	b.n	8001b10 <HAL_DMA_IRQHandler+0x30c>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00d      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b28:	f043 0202 	orr.w	r2, r3, #2
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	2204      	movs	r2, #4
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 808f 	beq.w	8001c64 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a2c      	ldr	r2, [pc, #176]	@ (8001bfc <HAL_DMA_IRQHandler+0x3f8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d04a      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a2a      	ldr	r2, [pc, #168]	@ (8001c00 <HAL_DMA_IRQHandler+0x3fc>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d045      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a29      	ldr	r2, [pc, #164]	@ (8001c04 <HAL_DMA_IRQHandler+0x400>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d040      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a27      	ldr	r2, [pc, #156]	@ (8001c08 <HAL_DMA_IRQHandler+0x404>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d03b      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a26      	ldr	r2, [pc, #152]	@ (8001c0c <HAL_DMA_IRQHandler+0x408>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d036      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a24      	ldr	r2, [pc, #144]	@ (8001c10 <HAL_DMA_IRQHandler+0x40c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d031      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a23      	ldr	r2, [pc, #140]	@ (8001c14 <HAL_DMA_IRQHandler+0x410>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d02c      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a21      	ldr	r2, [pc, #132]	@ (8001c18 <HAL_DMA_IRQHandler+0x414>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d027      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a20      	ldr	r2, [pc, #128]	@ (8001c1c <HAL_DMA_IRQHandler+0x418>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d022      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c20 <HAL_DMA_IRQHandler+0x41c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d01d      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1d      	ldr	r2, [pc, #116]	@ (8001c24 <HAL_DMA_IRQHandler+0x420>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d018      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c28 <HAL_DMA_IRQHandler+0x424>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c2c <HAL_DMA_IRQHandler+0x428>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00e      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a18      	ldr	r2, [pc, #96]	@ (8001c30 <HAL_DMA_IRQHandler+0x42c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d009      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a17      	ldr	r2, [pc, #92]	@ (8001c34 <HAL_DMA_IRQHandler+0x430>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d004      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x3e2>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a15      	ldr	r2, [pc, #84]	@ (8001c38 <HAL_DMA_IRQHandler+0x434>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d12a      	bne.n	8001c3c <HAL_DMA_IRQHandler+0x438>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf14      	ite	ne
 8001bf4:	2301      	movne	r3, #1
 8001bf6:	2300      	moveq	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	e023      	b.n	8001c44 <HAL_DMA_IRQHandler+0x440>
 8001bfc:	40020010 	.word	0x40020010
 8001c00:	40020028 	.word	0x40020028
 8001c04:	40020040 	.word	0x40020040
 8001c08:	40020058 	.word	0x40020058
 8001c0c:	40020070 	.word	0x40020070
 8001c10:	40020088 	.word	0x40020088
 8001c14:	400200a0 	.word	0x400200a0
 8001c18:	400200b8 	.word	0x400200b8
 8001c1c:	40020410 	.word	0x40020410
 8001c20:	40020428 	.word	0x40020428
 8001c24:	40020440 	.word	0x40020440
 8001c28:	40020458 	.word	0x40020458
 8001c2c:	40020470 	.word	0x40020470
 8001c30:	40020488 	.word	0x40020488
 8001c34:	400204a0 	.word	0x400204a0
 8001c38:	400204b8 	.word	0x400204b8
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2300      	movs	r3, #0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00d      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	2204      	movs	r2, #4
 8001c52:	409a      	lsls	r2, r3
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5c:	f043 0204 	orr.w	r2, r3, #4
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80a6 	beq.w	8001dc6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a85      	ldr	r2, [pc, #532]	@ (8001e94 <HAL_DMA_IRQHandler+0x690>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d04a      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a83      	ldr	r2, [pc, #524]	@ (8001e98 <HAL_DMA_IRQHandler+0x694>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d045      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a82      	ldr	r2, [pc, #520]	@ (8001e9c <HAL_DMA_IRQHandler+0x698>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d040      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a80      	ldr	r2, [pc, #512]	@ (8001ea0 <HAL_DMA_IRQHandler+0x69c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d03b      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a7f      	ldr	r2, [pc, #508]	@ (8001ea4 <HAL_DMA_IRQHandler+0x6a0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d036      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a7d      	ldr	r2, [pc, #500]	@ (8001ea8 <HAL_DMA_IRQHandler+0x6a4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d031      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a7c      	ldr	r2, [pc, #496]	@ (8001eac <HAL_DMA_IRQHandler+0x6a8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d02c      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a7a      	ldr	r2, [pc, #488]	@ (8001eb0 <HAL_DMA_IRQHandler+0x6ac>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d027      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a79      	ldr	r2, [pc, #484]	@ (8001eb4 <HAL_DMA_IRQHandler+0x6b0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d022      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a77      	ldr	r2, [pc, #476]	@ (8001eb8 <HAL_DMA_IRQHandler+0x6b4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01d      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a76      	ldr	r2, [pc, #472]	@ (8001ebc <HAL_DMA_IRQHandler+0x6b8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d018      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a74      	ldr	r2, [pc, #464]	@ (8001ec0 <HAL_DMA_IRQHandler+0x6bc>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d013      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a73      	ldr	r2, [pc, #460]	@ (8001ec4 <HAL_DMA_IRQHandler+0x6c0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00e      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a71      	ldr	r2, [pc, #452]	@ (8001ec8 <HAL_DMA_IRQHandler+0x6c4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d009      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a70      	ldr	r2, [pc, #448]	@ (8001ecc <HAL_DMA_IRQHandler+0x6c8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d004      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x516>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a6e      	ldr	r2, [pc, #440]	@ (8001ed0 <HAL_DMA_IRQHandler+0x6cc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d10a      	bne.n	8001d30 <HAL_DMA_IRQHandler+0x52c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	e009      	b.n	8001d44 <HAL_DMA_IRQHandler+0x540>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d03e      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	2210      	movs	r2, #16
 8001d52:	409a      	lsls	r2, r3
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d018      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d108      	bne.n	8001d86 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d024      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
 8001d84:	e01f      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d01b      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
 8001d96:	e016      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d107      	bne.n	8001db6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0208 	bic.w	r2, r2, #8
 8001db4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	2220      	movs	r2, #32
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8110 	beq.w	8001ffc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a2c      	ldr	r2, [pc, #176]	@ (8001e94 <HAL_DMA_IRQHandler+0x690>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d04a      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2b      	ldr	r2, [pc, #172]	@ (8001e98 <HAL_DMA_IRQHandler+0x694>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d045      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a29      	ldr	r2, [pc, #164]	@ (8001e9c <HAL_DMA_IRQHandler+0x698>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d040      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a28      	ldr	r2, [pc, #160]	@ (8001ea0 <HAL_DMA_IRQHandler+0x69c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d03b      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a26      	ldr	r2, [pc, #152]	@ (8001ea4 <HAL_DMA_IRQHandler+0x6a0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d036      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a25      	ldr	r2, [pc, #148]	@ (8001ea8 <HAL_DMA_IRQHandler+0x6a4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d031      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a23      	ldr	r2, [pc, #140]	@ (8001eac <HAL_DMA_IRQHandler+0x6a8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02c      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a22      	ldr	r2, [pc, #136]	@ (8001eb0 <HAL_DMA_IRQHandler+0x6ac>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d027      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a20      	ldr	r2, [pc, #128]	@ (8001eb4 <HAL_DMA_IRQHandler+0x6b0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d022      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb8 <HAL_DMA_IRQHandler+0x6b4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d01d      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1d      	ldr	r2, [pc, #116]	@ (8001ebc <HAL_DMA_IRQHandler+0x6b8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d018      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec0 <HAL_DMA_IRQHandler+0x6bc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec4 <HAL_DMA_IRQHandler+0x6c0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00e      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a19      	ldr	r2, [pc, #100]	@ (8001ec8 <HAL_DMA_IRQHandler+0x6c4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a17      	ldr	r2, [pc, #92]	@ (8001ecc <HAL_DMA_IRQHandler+0x6c8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x678>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a16      	ldr	r2, [pc, #88]	@ (8001ed0 <HAL_DMA_IRQHandler+0x6cc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d12b      	bne.n	8001ed4 <HAL_DMA_IRQHandler+0x6d0>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf14      	ite	ne
 8001e8a:	2301      	movne	r3, #1
 8001e8c:	2300      	moveq	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	e02a      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x6e4>
 8001e92:	bf00      	nop
 8001e94:	40020010 	.word	0x40020010
 8001e98:	40020028 	.word	0x40020028
 8001e9c:	40020040 	.word	0x40020040
 8001ea0:	40020058 	.word	0x40020058
 8001ea4:	40020070 	.word	0x40020070
 8001ea8:	40020088 	.word	0x40020088
 8001eac:	400200a0 	.word	0x400200a0
 8001eb0:	400200b8 	.word	0x400200b8
 8001eb4:	40020410 	.word	0x40020410
 8001eb8:	40020428 	.word	0x40020428
 8001ebc:	40020440 	.word	0x40020440
 8001ec0:	40020458 	.word	0x40020458
 8001ec4:	40020470 	.word	0x40020470
 8001ec8:	40020488 	.word	0x40020488
 8001ecc:	400204a0 	.word	0x400204a0
 8001ed0:	400204b8 	.word	0x400204b8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	bf14      	ite	ne
 8001ee2:	2301      	movne	r3, #1
 8001ee4:	2300      	moveq	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8087 	beq.w	8001ffc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d139      	bne.n	8001f7e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0216 	bic.w	r2, r2, #22
 8001f18:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f28:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d103      	bne.n	8001f3a <HAL_DMA_IRQHandler+0x736>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0208 	bic.w	r2, r2, #8
 8001f48:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	223f      	movs	r2, #63	@ 0x3f
 8001f54:	409a      	lsls	r2, r3
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 834a 	beq.w	8002608 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4798      	blx	r3
          }
          return;
 8001f7c:	e344      	b.n	8002608 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d018      	beq.n	8001fbe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d108      	bne.n	8001fac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d02c      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	4798      	blx	r3
 8001faa:	e027      	b.n	8001ffc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d023      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
 8001fbc:	e01e      	b.n	8001ffc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10f      	bne.n	8001fec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0210 	bic.w	r2, r2, #16
 8001fda:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 8306 	beq.w	8002612 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8088 	beq.w	8002124 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2204      	movs	r2, #4
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a7a      	ldr	r2, [pc, #488]	@ (800220c <HAL_DMA_IRQHandler+0xa08>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d04a      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a79      	ldr	r2, [pc, #484]	@ (8002210 <HAL_DMA_IRQHandler+0xa0c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d045      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a77      	ldr	r2, [pc, #476]	@ (8002214 <HAL_DMA_IRQHandler+0xa10>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d040      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a76      	ldr	r2, [pc, #472]	@ (8002218 <HAL_DMA_IRQHandler+0xa14>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d03b      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a74      	ldr	r2, [pc, #464]	@ (800221c <HAL_DMA_IRQHandler+0xa18>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d036      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a73      	ldr	r2, [pc, #460]	@ (8002220 <HAL_DMA_IRQHandler+0xa1c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d031      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a71      	ldr	r2, [pc, #452]	@ (8002224 <HAL_DMA_IRQHandler+0xa20>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d02c      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a70      	ldr	r2, [pc, #448]	@ (8002228 <HAL_DMA_IRQHandler+0xa24>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d027      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a6e      	ldr	r2, [pc, #440]	@ (800222c <HAL_DMA_IRQHandler+0xa28>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d022      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6d      	ldr	r2, [pc, #436]	@ (8002230 <HAL_DMA_IRQHandler+0xa2c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d01d      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a6b      	ldr	r2, [pc, #428]	@ (8002234 <HAL_DMA_IRQHandler+0xa30>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d018      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6a      	ldr	r2, [pc, #424]	@ (8002238 <HAL_DMA_IRQHandler+0xa34>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d013      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a68      	ldr	r2, [pc, #416]	@ (800223c <HAL_DMA_IRQHandler+0xa38>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00e      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a67      	ldr	r2, [pc, #412]	@ (8002240 <HAL_DMA_IRQHandler+0xa3c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d009      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a65      	ldr	r2, [pc, #404]	@ (8002244 <HAL_DMA_IRQHandler+0xa40>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d004      	beq.n	80020bc <HAL_DMA_IRQHandler+0x8b8>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a64      	ldr	r2, [pc, #400]	@ (8002248 <HAL_DMA_IRQHandler+0xa44>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d108      	bne.n	80020ce <HAL_DMA_IRQHandler+0x8ca>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e007      	b.n	80020de <HAL_DMA_IRQHandler+0x8da>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0201 	bic.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3301      	adds	r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d307      	bcc.n	80020fa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f2      	bne.n	80020de <HAL_DMA_IRQHandler+0x8da>
 80020f8:	e000      	b.n	80020fc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80020fa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2203      	movs	r2, #3
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002112:	e003      	b.n	800211c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8272 	beq.w	8002612 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
 8002136:	e26c      	b.n	8002612 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a43      	ldr	r2, [pc, #268]	@ (800224c <HAL_DMA_IRQHandler+0xa48>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d022      	beq.n	8002188 <HAL_DMA_IRQHandler+0x984>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a42      	ldr	r2, [pc, #264]	@ (8002250 <HAL_DMA_IRQHandler+0xa4c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d01d      	beq.n	8002188 <HAL_DMA_IRQHandler+0x984>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a40      	ldr	r2, [pc, #256]	@ (8002254 <HAL_DMA_IRQHandler+0xa50>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d018      	beq.n	8002188 <HAL_DMA_IRQHandler+0x984>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a3f      	ldr	r2, [pc, #252]	@ (8002258 <HAL_DMA_IRQHandler+0xa54>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d013      	beq.n	8002188 <HAL_DMA_IRQHandler+0x984>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a3d      	ldr	r2, [pc, #244]	@ (800225c <HAL_DMA_IRQHandler+0xa58>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00e      	beq.n	8002188 <HAL_DMA_IRQHandler+0x984>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a3c      	ldr	r2, [pc, #240]	@ (8002260 <HAL_DMA_IRQHandler+0xa5c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_DMA_IRQHandler+0x984>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a3a      	ldr	r2, [pc, #232]	@ (8002264 <HAL_DMA_IRQHandler+0xa60>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d004      	beq.n	8002188 <HAL_DMA_IRQHandler+0x984>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a39      	ldr	r2, [pc, #228]	@ (8002268 <HAL_DMA_IRQHandler+0xa64>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d101      	bne.n	800218c <HAL_DMA_IRQHandler+0x988>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <HAL_DMA_IRQHandler+0x98a>
 800218c:	2300      	movs	r3, #0
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 823f 	beq.w	8002612 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	2204      	movs	r2, #4
 80021a6:	409a      	lsls	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80cd 	beq.w	800234c <HAL_DMA_IRQHandler+0xb48>
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80c7 	beq.w	800234c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	2204      	movs	r2, #4
 80021c8:	409a      	lsls	r2, r3
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d049      	beq.n	800226c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8210 	beq.w	800260c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80021f4:	e20a      	b.n	800260c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8206 	beq.w	800260c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002208:	e200      	b.n	800260c <HAL_DMA_IRQHandler+0xe08>
 800220a:	bf00      	nop
 800220c:	40020010 	.word	0x40020010
 8002210:	40020028 	.word	0x40020028
 8002214:	40020040 	.word	0x40020040
 8002218:	40020058 	.word	0x40020058
 800221c:	40020070 	.word	0x40020070
 8002220:	40020088 	.word	0x40020088
 8002224:	400200a0 	.word	0x400200a0
 8002228:	400200b8 	.word	0x400200b8
 800222c:	40020410 	.word	0x40020410
 8002230:	40020428 	.word	0x40020428
 8002234:	40020440 	.word	0x40020440
 8002238:	40020458 	.word	0x40020458
 800223c:	40020470 	.word	0x40020470
 8002240:	40020488 	.word	0x40020488
 8002244:	400204a0 	.word	0x400204a0
 8002248:	400204b8 	.word	0x400204b8
 800224c:	58025408 	.word	0x58025408
 8002250:	5802541c 	.word	0x5802541c
 8002254:	58025430 	.word	0x58025430
 8002258:	58025444 	.word	0x58025444
 800225c:	58025458 	.word	0x58025458
 8002260:	5802546c 	.word	0x5802546c
 8002264:	58025480 	.word	0x58025480
 8002268:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d160      	bne.n	8002338 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7f      	ldr	r2, [pc, #508]	@ (8002478 <HAL_DMA_IRQHandler+0xc74>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d04a      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a7d      	ldr	r2, [pc, #500]	@ (800247c <HAL_DMA_IRQHandler+0xc78>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d045      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a7c      	ldr	r2, [pc, #496]	@ (8002480 <HAL_DMA_IRQHandler+0xc7c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d040      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a7a      	ldr	r2, [pc, #488]	@ (8002484 <HAL_DMA_IRQHandler+0xc80>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d03b      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a79      	ldr	r2, [pc, #484]	@ (8002488 <HAL_DMA_IRQHandler+0xc84>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d036      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a77      	ldr	r2, [pc, #476]	@ (800248c <HAL_DMA_IRQHandler+0xc88>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d031      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a76      	ldr	r2, [pc, #472]	@ (8002490 <HAL_DMA_IRQHandler+0xc8c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d02c      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a74      	ldr	r2, [pc, #464]	@ (8002494 <HAL_DMA_IRQHandler+0xc90>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d027      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a73      	ldr	r2, [pc, #460]	@ (8002498 <HAL_DMA_IRQHandler+0xc94>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a71      	ldr	r2, [pc, #452]	@ (800249c <HAL_DMA_IRQHandler+0xc98>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01d      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a70      	ldr	r2, [pc, #448]	@ (80024a0 <HAL_DMA_IRQHandler+0xc9c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d018      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a6e      	ldr	r2, [pc, #440]	@ (80024a4 <HAL_DMA_IRQHandler+0xca0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a6d      	ldr	r2, [pc, #436]	@ (80024a8 <HAL_DMA_IRQHandler+0xca4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00e      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a6b      	ldr	r2, [pc, #428]	@ (80024ac <HAL_DMA_IRQHandler+0xca8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6a      	ldr	r2, [pc, #424]	@ (80024b0 <HAL_DMA_IRQHandler+0xcac>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_DMA_IRQHandler+0xb12>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a68      	ldr	r2, [pc, #416]	@ (80024b4 <HAL_DMA_IRQHandler+0xcb0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d108      	bne.n	8002328 <HAL_DMA_IRQHandler+0xb24>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0208 	bic.w	r2, r2, #8
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e007      	b.n	8002338 <HAL_DMA_IRQHandler+0xb34>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0204 	bic.w	r2, r2, #4
 8002336:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8165 	beq.w	800260c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800234a:	e15f      	b.n	800260c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	2202      	movs	r2, #2
 8002356:	409a      	lsls	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80c5 	beq.w	80024ec <HAL_DMA_IRQHandler+0xce8>
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80bf 	beq.w	80024ec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	2202      	movs	r2, #2
 8002378:	409a      	lsls	r2, r3
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d018      	beq.n	80023ba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 813a 	beq.w	8002610 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80023a4:	e134      	b.n	8002610 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8130 	beq.w	8002610 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80023b8:	e12a      	b.n	8002610 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f040 8089 	bne.w	80024d8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002478 <HAL_DMA_IRQHandler+0xc74>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d04a      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a29      	ldr	r2, [pc, #164]	@ (800247c <HAL_DMA_IRQHandler+0xc78>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d045      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a28      	ldr	r2, [pc, #160]	@ (8002480 <HAL_DMA_IRQHandler+0xc7c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d040      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a26      	ldr	r2, [pc, #152]	@ (8002484 <HAL_DMA_IRQHandler+0xc80>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d03b      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a25      	ldr	r2, [pc, #148]	@ (8002488 <HAL_DMA_IRQHandler+0xc84>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d036      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a23      	ldr	r2, [pc, #140]	@ (800248c <HAL_DMA_IRQHandler+0xc88>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d031      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a22      	ldr	r2, [pc, #136]	@ (8002490 <HAL_DMA_IRQHandler+0xc8c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d02c      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a20      	ldr	r2, [pc, #128]	@ (8002494 <HAL_DMA_IRQHandler+0xc90>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d027      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1f      	ldr	r2, [pc, #124]	@ (8002498 <HAL_DMA_IRQHandler+0xc94>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d022      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1d      	ldr	r2, [pc, #116]	@ (800249c <HAL_DMA_IRQHandler+0xc98>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d01d      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1c      	ldr	r2, [pc, #112]	@ (80024a0 <HAL_DMA_IRQHandler+0xc9c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d018      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1a      	ldr	r2, [pc, #104]	@ (80024a4 <HAL_DMA_IRQHandler+0xca0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a19      	ldr	r2, [pc, #100]	@ (80024a8 <HAL_DMA_IRQHandler+0xca4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00e      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a17      	ldr	r2, [pc, #92]	@ (80024ac <HAL_DMA_IRQHandler+0xca8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d009      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a16      	ldr	r2, [pc, #88]	@ (80024b0 <HAL_DMA_IRQHandler+0xcac>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d004      	beq.n	8002466 <HAL_DMA_IRQHandler+0xc62>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a14      	ldr	r2, [pc, #80]	@ (80024b4 <HAL_DMA_IRQHandler+0xcb0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d128      	bne.n	80024b8 <HAL_DMA_IRQHandler+0xcb4>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0214 	bic.w	r2, r2, #20
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	e027      	b.n	80024c8 <HAL_DMA_IRQHandler+0xcc4>
 8002478:	40020010 	.word	0x40020010
 800247c:	40020028 	.word	0x40020028
 8002480:	40020040 	.word	0x40020040
 8002484:	40020058 	.word	0x40020058
 8002488:	40020070 	.word	0x40020070
 800248c:	40020088 	.word	0x40020088
 8002490:	400200a0 	.word	0x400200a0
 8002494:	400200b8 	.word	0x400200b8
 8002498:	40020410 	.word	0x40020410
 800249c:	40020428 	.word	0x40020428
 80024a0:	40020440 	.word	0x40020440
 80024a4:	40020458 	.word	0x40020458
 80024a8:	40020470 	.word	0x40020470
 80024ac:	40020488 	.word	0x40020488
 80024b0:	400204a0 	.word	0x400204a0
 80024b4:	400204b8 	.word	0x400204b8
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 020a 	bic.w	r2, r2, #10
 80024c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8097 	beq.w	8002610 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024ea:	e091      	b.n	8002610 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	2208      	movs	r2, #8
 80024f6:	409a      	lsls	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8088 	beq.w	8002612 <HAL_DMA_IRQHandler+0xe0e>
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8082 	beq.w	8002612 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a41      	ldr	r2, [pc, #260]	@ (8002618 <HAL_DMA_IRQHandler+0xe14>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d04a      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a3f      	ldr	r2, [pc, #252]	@ (800261c <HAL_DMA_IRQHandler+0xe18>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d045      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a3e      	ldr	r2, [pc, #248]	@ (8002620 <HAL_DMA_IRQHandler+0xe1c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d040      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a3c      	ldr	r2, [pc, #240]	@ (8002624 <HAL_DMA_IRQHandler+0xe20>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d03b      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a3b      	ldr	r2, [pc, #236]	@ (8002628 <HAL_DMA_IRQHandler+0xe24>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d036      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a39      	ldr	r2, [pc, #228]	@ (800262c <HAL_DMA_IRQHandler+0xe28>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d031      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a38      	ldr	r2, [pc, #224]	@ (8002630 <HAL_DMA_IRQHandler+0xe2c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d02c      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a36      	ldr	r2, [pc, #216]	@ (8002634 <HAL_DMA_IRQHandler+0xe30>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d027      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a35      	ldr	r2, [pc, #212]	@ (8002638 <HAL_DMA_IRQHandler+0xe34>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d022      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a33      	ldr	r2, [pc, #204]	@ (800263c <HAL_DMA_IRQHandler+0xe38>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d01d      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a32      	ldr	r2, [pc, #200]	@ (8002640 <HAL_DMA_IRQHandler+0xe3c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d018      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a30      	ldr	r2, [pc, #192]	@ (8002644 <HAL_DMA_IRQHandler+0xe40>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d013      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a2f      	ldr	r2, [pc, #188]	@ (8002648 <HAL_DMA_IRQHandler+0xe44>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d00e      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a2d      	ldr	r2, [pc, #180]	@ (800264c <HAL_DMA_IRQHandler+0xe48>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d009      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a2c      	ldr	r2, [pc, #176]	@ (8002650 <HAL_DMA_IRQHandler+0xe4c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d004      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdaa>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002654 <HAL_DMA_IRQHandler+0xe50>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d108      	bne.n	80025c0 <HAL_DMA_IRQHandler+0xdbc>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 021c 	bic.w	r2, r2, #28
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e007      	b.n	80025d0 <HAL_DMA_IRQHandler+0xdcc>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 020e 	bic.w	r2, r2, #14
 80025ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	2201      	movs	r2, #1
 80025da:	409a      	lsls	r2, r3
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	4798      	blx	r3
 8002606:	e004      	b.n	8002612 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002608:	bf00      	nop
 800260a:	e002      	b.n	8002612 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800260c:	bf00      	nop
 800260e:	e000      	b.n	8002612 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002610:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002612:	3728      	adds	r7, #40	@ 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40020010 	.word	0x40020010
 800261c:	40020028 	.word	0x40020028
 8002620:	40020040 	.word	0x40020040
 8002624:	40020058 	.word	0x40020058
 8002628:	40020070 	.word	0x40020070
 800262c:	40020088 	.word	0x40020088
 8002630:	400200a0 	.word	0x400200a0
 8002634:	400200b8 	.word	0x400200b8
 8002638:	40020410 	.word	0x40020410
 800263c:	40020428 	.word	0x40020428
 8002640:	40020440 	.word	0x40020440
 8002644:	40020458 	.word	0x40020458
 8002648:	40020470 	.word	0x40020470
 800264c:	40020488 	.word	0x40020488
 8002650:	400204a0 	.word	0x400204a0
 8002654:	400204b8 	.word	0x400204b8

08002658 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a42      	ldr	r2, [pc, #264]	@ (8002770 <DMA_CalcBaseAndBitshift+0x118>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d04a      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a41      	ldr	r2, [pc, #260]	@ (8002774 <DMA_CalcBaseAndBitshift+0x11c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d045      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a3f      	ldr	r2, [pc, #252]	@ (8002778 <DMA_CalcBaseAndBitshift+0x120>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d040      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a3e      	ldr	r2, [pc, #248]	@ (800277c <DMA_CalcBaseAndBitshift+0x124>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d03b      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a3c      	ldr	r2, [pc, #240]	@ (8002780 <DMA_CalcBaseAndBitshift+0x128>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d036      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a3b      	ldr	r2, [pc, #236]	@ (8002784 <DMA_CalcBaseAndBitshift+0x12c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d031      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a39      	ldr	r2, [pc, #228]	@ (8002788 <DMA_CalcBaseAndBitshift+0x130>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d02c      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a38      	ldr	r2, [pc, #224]	@ (800278c <DMA_CalcBaseAndBitshift+0x134>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d027      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a36      	ldr	r2, [pc, #216]	@ (8002790 <DMA_CalcBaseAndBitshift+0x138>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d022      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a35      	ldr	r2, [pc, #212]	@ (8002794 <DMA_CalcBaseAndBitshift+0x13c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d01d      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a33      	ldr	r2, [pc, #204]	@ (8002798 <DMA_CalcBaseAndBitshift+0x140>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d018      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a32      	ldr	r2, [pc, #200]	@ (800279c <DMA_CalcBaseAndBitshift+0x144>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d013      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a30      	ldr	r2, [pc, #192]	@ (80027a0 <DMA_CalcBaseAndBitshift+0x148>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00e      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a2f      	ldr	r2, [pc, #188]	@ (80027a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d009      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2d      	ldr	r2, [pc, #180]	@ (80027a8 <DMA_CalcBaseAndBitshift+0x150>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d004      	beq.n	8002700 <DMA_CalcBaseAndBitshift+0xa8>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a2c      	ldr	r2, [pc, #176]	@ (80027ac <DMA_CalcBaseAndBitshift+0x154>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d101      	bne.n	8002704 <DMA_CalcBaseAndBitshift+0xac>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <DMA_CalcBaseAndBitshift+0xae>
 8002704:	2300      	movs	r3, #0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d024      	beq.n	8002754 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	3b10      	subs	r3, #16
 8002712:	4a27      	ldr	r2, [pc, #156]	@ (80027b0 <DMA_CalcBaseAndBitshift+0x158>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	4a24      	ldr	r2, [pc, #144]	@ (80027b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8002724:	5cd3      	ldrb	r3, [r2, r3]
 8002726:	461a      	mov	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d908      	bls.n	8002744 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	4b1f      	ldr	r3, [pc, #124]	@ (80027b8 <DMA_CalcBaseAndBitshift+0x160>)
 800273a:	4013      	ands	r3, r2
 800273c:	1d1a      	adds	r2, r3, #4
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	659a      	str	r2, [r3, #88]	@ 0x58
 8002742:	e00d      	b.n	8002760 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	4b1b      	ldr	r3, [pc, #108]	@ (80027b8 <DMA_CalcBaseAndBitshift+0x160>)
 800274c:	4013      	ands	r3, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6593      	str	r3, [r2, #88]	@ 0x58
 8002752:	e005      	b.n	8002760 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40020010 	.word	0x40020010
 8002774:	40020028 	.word	0x40020028
 8002778:	40020040 	.word	0x40020040
 800277c:	40020058 	.word	0x40020058
 8002780:	40020070 	.word	0x40020070
 8002784:	40020088 	.word	0x40020088
 8002788:	400200a0 	.word	0x400200a0
 800278c:	400200b8 	.word	0x400200b8
 8002790:	40020410 	.word	0x40020410
 8002794:	40020428 	.word	0x40020428
 8002798:	40020440 	.word	0x40020440
 800279c:	40020458 	.word	0x40020458
 80027a0:	40020470 	.word	0x40020470
 80027a4:	40020488 	.word	0x40020488
 80027a8:	400204a0 	.word	0x400204a0
 80027ac:	400204b8 	.word	0x400204b8
 80027b0:	aaaaaaab 	.word	0xaaaaaaab
 80027b4:	0800ca28 	.word	0x0800ca28
 80027b8:	fffffc00 	.word	0xfffffc00

080027bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d120      	bne.n	8002812 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d858      	bhi.n	800288a <DMA_CheckFifoParam+0xce>
 80027d8:	a201      	add	r2, pc, #4	@ (adr r2, 80027e0 <DMA_CheckFifoParam+0x24>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	080027f1 	.word	0x080027f1
 80027e4:	08002803 	.word	0x08002803
 80027e8:	080027f1 	.word	0x080027f1
 80027ec:	0800288b 	.word	0x0800288b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d048      	beq.n	800288e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002800:	e045      	b.n	800288e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002806:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800280a:	d142      	bne.n	8002892 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002810:	e03f      	b.n	8002892 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800281a:	d123      	bne.n	8002864 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002820:	2b03      	cmp	r3, #3
 8002822:	d838      	bhi.n	8002896 <DMA_CheckFifoParam+0xda>
 8002824:	a201      	add	r2, pc, #4	@ (adr r2, 800282c <DMA_CheckFifoParam+0x70>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	0800283d 	.word	0x0800283d
 8002830:	08002843 	.word	0x08002843
 8002834:	0800283d 	.word	0x0800283d
 8002838:	08002855 	.word	0x08002855
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
        break;
 8002840:	e030      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002846:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d025      	beq.n	800289a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002852:	e022      	b.n	800289a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002858:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800285c:	d11f      	bne.n	800289e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002862:	e01c      	b.n	800289e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002868:	2b02      	cmp	r3, #2
 800286a:	d902      	bls.n	8002872 <DMA_CheckFifoParam+0xb6>
 800286c:	2b03      	cmp	r3, #3
 800286e:	d003      	beq.n	8002878 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002870:	e018      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
        break;
 8002876:	e015      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00e      	beq.n	80028a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
    break;
 8002888:	e00b      	b.n	80028a2 <DMA_CheckFifoParam+0xe6>
        break;
 800288a:	bf00      	nop
 800288c:	e00a      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
        break;
 800288e:	bf00      	nop
 8002890:	e008      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
        break;
 8002892:	bf00      	nop
 8002894:	e006      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
        break;
 8002896:	bf00      	nop
 8002898:	e004      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
        break;
 800289a:	bf00      	nop
 800289c:	e002      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
        break;
 800289e:	bf00      	nop
 80028a0:	e000      	b.n	80028a4 <DMA_CheckFifoParam+0xe8>
    break;
 80028a2:	bf00      	nop
    }
  }

  return status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop

080028b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a38      	ldr	r2, [pc, #224]	@ (80029a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d022      	beq.n	8002912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a36      	ldr	r2, [pc, #216]	@ (80029ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01d      	beq.n	8002912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a35      	ldr	r2, [pc, #212]	@ (80029b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d018      	beq.n	8002912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a33      	ldr	r2, [pc, #204]	@ (80029b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d013      	beq.n	8002912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a32      	ldr	r2, [pc, #200]	@ (80029b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00e      	beq.n	8002912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a30      	ldr	r2, [pc, #192]	@ (80029bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d009      	beq.n	8002912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a2f      	ldr	r2, [pc, #188]	@ (80029c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d004      	beq.n	8002912 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a2d      	ldr	r2, [pc, #180]	@ (80029c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d101      	bne.n	8002916 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002916:	2300      	movs	r3, #0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01a      	beq.n	8002952 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	3b08      	subs	r3, #8
 8002924:	4a28      	ldr	r2, [pc, #160]	@ (80029c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4b26      	ldr	r3, [pc, #152]	@ (80029cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	461a      	mov	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a24      	ldr	r2, [pc, #144]	@ (80029d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002940:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	2201      	movs	r2, #1
 800294a:	409a      	lsls	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002950:	e024      	b.n	800299c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3b10      	subs	r3, #16
 800295a:	4a1e      	ldr	r2, [pc, #120]	@ (80029d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4a1c      	ldr	r2, [pc, #112]	@ (80029d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d806      	bhi.n	800297a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4a1b      	ldr	r2, [pc, #108]	@ (80029dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d902      	bls.n	800297a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	3308      	adds	r3, #8
 8002978:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4b18      	ldr	r3, [pc, #96]	@ (80029e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	461a      	mov	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a16      	ldr	r2, [pc, #88]	@ (80029e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800298c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	2201      	movs	r2, #1
 8002996:	409a      	lsls	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	58025408 	.word	0x58025408
 80029ac:	5802541c 	.word	0x5802541c
 80029b0:	58025430 	.word	0x58025430
 80029b4:	58025444 	.word	0x58025444
 80029b8:	58025458 	.word	0x58025458
 80029bc:	5802546c 	.word	0x5802546c
 80029c0:	58025480 	.word	0x58025480
 80029c4:	58025494 	.word	0x58025494
 80029c8:	cccccccd 	.word	0xcccccccd
 80029cc:	16009600 	.word	0x16009600
 80029d0:	58025880 	.word	0x58025880
 80029d4:	aaaaaaab 	.word	0xaaaaaaab
 80029d8:	400204b8 	.word	0x400204b8
 80029dc:	4002040f 	.word	0x4002040f
 80029e0:	10008200 	.word	0x10008200
 80029e4:	40020880 	.word	0x40020880

080029e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d04a      	beq.n	8002a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d847      	bhi.n	8002a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a25      	ldr	r2, [pc, #148]	@ (8002aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d022      	beq.n	8002a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a24      	ldr	r2, [pc, #144]	@ (8002aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d01d      	beq.n	8002a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a22      	ldr	r2, [pc, #136]	@ (8002aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d018      	beq.n	8002a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a21      	ldr	r2, [pc, #132]	@ (8002aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d013      	beq.n	8002a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00e      	beq.n	8002a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d009      	beq.n	8002a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1c      	ldr	r2, [pc, #112]	@ (8002ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d004      	beq.n	8002a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d101      	bne.n	8002a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4b17      	ldr	r3, [pc, #92]	@ (8002ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	461a      	mov	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a15      	ldr	r2, [pc, #84]	@ (8002ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8002a70:	671a      	str	r2, [r3, #112]	@ 0x70
 8002a72:	e009      	b.n	8002a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4b14      	ldr	r3, [pc, #80]	@ (8002ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a11      	ldr	r2, [pc, #68]	@ (8002acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8002a86:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	58025408 	.word	0x58025408
 8002aa4:	5802541c 	.word	0x5802541c
 8002aa8:	58025430 	.word	0x58025430
 8002aac:	58025444 	.word	0x58025444
 8002ab0:	58025458 	.word	0x58025458
 8002ab4:	5802546c 	.word	0x5802546c
 8002ab8:	58025480 	.word	0x58025480
 8002abc:	58025494 	.word	0x58025494
 8002ac0:	1600963f 	.word	0x1600963f
 8002ac4:	58025940 	.word	0x58025940
 8002ac8:	1000823f 	.word	0x1000823f
 8002acc:	40020940 	.word	0x40020940

08002ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	@ 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ade:	4b89      	ldr	r3, [pc, #548]	@ (8002d04 <HAL_GPIO_Init+0x234>)
 8002ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ae2:	e194      	b.n	8002e0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	2101      	movs	r1, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa01 f303 	lsl.w	r3, r1, r3
 8002af0:	4013      	ands	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8186 	beq.w	8002e08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d005      	beq.n	8002b14 <HAL_GPIO_Init+0x44>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d130      	bne.n	8002b76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	2203      	movs	r2, #3
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	f003 0201 	and.w	r2, r3, #1
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d017      	beq.n	8002bb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d123      	bne.n	8002c06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	08da      	lsrs	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3208      	adds	r2, #8
 8002bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	220f      	movs	r2, #15
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	08da      	lsrs	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3208      	adds	r2, #8
 8002c00:	69b9      	ldr	r1, [r7, #24]
 8002c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	2203      	movs	r2, #3
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 0203 	and.w	r2, r3, #3
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80e0 	beq.w	8002e08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c48:	4b2f      	ldr	r3, [pc, #188]	@ (8002d08 <HAL_GPIO_Init+0x238>)
 8002c4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8002d08 <HAL_GPIO_Init+0x238>)
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002c58:	4b2b      	ldr	r3, [pc, #172]	@ (8002d08 <HAL_GPIO_Init+0x238>)
 8002c5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c66:	4a29      	ldr	r2, [pc, #164]	@ (8002d0c <HAL_GPIO_Init+0x23c>)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	220f      	movs	r2, #15
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a20      	ldr	r2, [pc, #128]	@ (8002d10 <HAL_GPIO_Init+0x240>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d052      	beq.n	8002d38 <HAL_GPIO_Init+0x268>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a1f      	ldr	r2, [pc, #124]	@ (8002d14 <HAL_GPIO_Init+0x244>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d031      	beq.n	8002cfe <HAL_GPIO_Init+0x22e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002d18 <HAL_GPIO_Init+0x248>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d02b      	beq.n	8002cfa <HAL_GPIO_Init+0x22a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d1c <HAL_GPIO_Init+0x24c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d025      	beq.n	8002cf6 <HAL_GPIO_Init+0x226>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a1c      	ldr	r2, [pc, #112]	@ (8002d20 <HAL_GPIO_Init+0x250>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01f      	beq.n	8002cf2 <HAL_GPIO_Init+0x222>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d24 <HAL_GPIO_Init+0x254>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d019      	beq.n	8002cee <HAL_GPIO_Init+0x21e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8002d28 <HAL_GPIO_Init+0x258>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_GPIO_Init+0x21a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a19      	ldr	r2, [pc, #100]	@ (8002d2c <HAL_GPIO_Init+0x25c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00d      	beq.n	8002ce6 <HAL_GPIO_Init+0x216>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a18      	ldr	r2, [pc, #96]	@ (8002d30 <HAL_GPIO_Init+0x260>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <HAL_GPIO_Init+0x212>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a17      	ldr	r2, [pc, #92]	@ (8002d34 <HAL_GPIO_Init+0x264>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_GPIO_Init+0x20e>
 8002cda:	2309      	movs	r3, #9
 8002cdc:	e02d      	b.n	8002d3a <HAL_GPIO_Init+0x26a>
 8002cde:	230a      	movs	r3, #10
 8002ce0:	e02b      	b.n	8002d3a <HAL_GPIO_Init+0x26a>
 8002ce2:	2308      	movs	r3, #8
 8002ce4:	e029      	b.n	8002d3a <HAL_GPIO_Init+0x26a>
 8002ce6:	2307      	movs	r3, #7
 8002ce8:	e027      	b.n	8002d3a <HAL_GPIO_Init+0x26a>
 8002cea:	2306      	movs	r3, #6
 8002cec:	e025      	b.n	8002d3a <HAL_GPIO_Init+0x26a>
 8002cee:	2305      	movs	r3, #5
 8002cf0:	e023      	b.n	8002d3a <HAL_GPIO_Init+0x26a>
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	e021      	b.n	8002d3a <HAL_GPIO_Init+0x26a>
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e01f      	b.n	8002d3a <HAL_GPIO_Init+0x26a>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e01d      	b.n	8002d3a <HAL_GPIO_Init+0x26a>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e01b      	b.n	8002d3a <HAL_GPIO_Init+0x26a>
 8002d02:	bf00      	nop
 8002d04:	58000080 	.word	0x58000080
 8002d08:	58024400 	.word	0x58024400
 8002d0c:	58000400 	.word	0x58000400
 8002d10:	58020000 	.word	0x58020000
 8002d14:	58020400 	.word	0x58020400
 8002d18:	58020800 	.word	0x58020800
 8002d1c:	58020c00 	.word	0x58020c00
 8002d20:	58021000 	.word	0x58021000
 8002d24:	58021400 	.word	0x58021400
 8002d28:	58021800 	.word	0x58021800
 8002d2c:	58021c00 	.word	0x58021c00
 8002d30:	58022000 	.word	0x58022000
 8002d34:	58022400 	.word	0x58022400
 8002d38:	2300      	movs	r3, #0
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	f002 0203 	and.w	r2, r2, #3
 8002d40:	0092      	lsls	r2, r2, #2
 8002d42:	4093      	lsls	r3, r2
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d4a:	4938      	ldr	r1, [pc, #224]	@ (8002e2c <HAL_GPIO_Init+0x35c>)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	3302      	adds	r3, #2
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002dac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f47f ae63 	bne.w	8002ae4 <HAL_GPIO_Init+0x14>
  }
}
 8002e1e:	bf00      	nop
 8002e20:	bf00      	nop
 8002e22:	3724      	adds	r7, #36	@ 0x24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	58000400 	.word	0x58000400

08002e30 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002e38:	4a08      	ldr	r2, [pc, #32]	@ (8002e5c <HAL_HSEM_FastTake+0x2c>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3320      	adds	r3, #32
 8002e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e42:	4a07      	ldr	r2, [pc, #28]	@ (8002e60 <HAL_HSEM_FastTake+0x30>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e000      	b.n	8002e4e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	58026400 	.word	0x58026400
 8002e60:	80000300 	.word	0x80000300

08002e64 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002e6e:	4906      	ldr	r1, [pc, #24]	@ (8002e88 <HAL_HSEM_Release+0x24>)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	58026400 	.word	0x58026400

08002e8c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002e94:	4b29      	ldr	r3, [pc, #164]	@ (8002f3c <HAL_PWREx_ConfigSupply+0xb0>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	2b06      	cmp	r3, #6
 8002e9e:	d00a      	beq.n	8002eb6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ea0:	4b26      	ldr	r3, [pc, #152]	@ (8002f3c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d001      	beq.n	8002eb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e040      	b.n	8002f34 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e03e      	b.n	8002f34 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002eb6:	4b21      	ldr	r3, [pc, #132]	@ (8002f3c <HAL_PWREx_ConfigSupply+0xb0>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002ebe:	491f      	ldr	r1, [pc, #124]	@ (8002f3c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ec6:	f7fe f819 	bl	8000efc <HAL_GetTick>
 8002eca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ecc:	e009      	b.n	8002ee2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ece:	f7fe f815 	bl	8000efc <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002edc:	d901      	bls.n	8002ee2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e028      	b.n	8002f34 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ee2:	4b16      	ldr	r3, [pc, #88]	@ (8002f3c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eee:	d1ee      	bne.n	8002ece <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b1e      	cmp	r3, #30
 8002ef4:	d008      	beq.n	8002f08 <HAL_PWREx_ConfigSupply+0x7c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002efa:	d005      	beq.n	8002f08 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b1d      	cmp	r3, #29
 8002f00:	d002      	beq.n	8002f08 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b2d      	cmp	r3, #45	@ 0x2d
 8002f06:	d114      	bne.n	8002f32 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002f08:	f7fd fff8 	bl	8000efc <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f0e:	e009      	b.n	8002f24 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f10:	f7fd fff4 	bl	8000efc <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f1e:	d901      	bls.n	8002f24 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e007      	b.n	8002f34 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f24:	4b05      	ldr	r3, [pc, #20]	@ (8002f3c <HAL_PWREx_ConfigSupply+0xb0>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f30:	d1ee      	bne.n	8002f10 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	58024800 	.word	0x58024800

08002f40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08c      	sub	sp, #48	@ 0x30
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f000 bc48 	b.w	80037e4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8088 	beq.w	8003072 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f62:	4b99      	ldr	r3, [pc, #612]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f6c:	4b96      	ldr	r3, [pc, #600]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d007      	beq.n	8002f88 <HAL_RCC_OscConfig+0x48>
 8002f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7a:	2b18      	cmp	r3, #24
 8002f7c:	d111      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x62>
 8002f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d10c      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	4b8f      	ldr	r3, [pc, #572]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d06d      	beq.n	8003070 <HAL_RCC_OscConfig+0x130>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d169      	bne.n	8003070 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f000 bc21 	b.w	80037e4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x7a>
 8002fac:	4b86      	ldr	r3, [pc, #536]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a85      	ldr	r2, [pc, #532]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	e02e      	b.n	8003018 <HAL_RCC_OscConfig+0xd8>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x9c>
 8002fc2:	4b81      	ldr	r3, [pc, #516]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a80      	ldr	r2, [pc, #512]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8002fc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b7e      	ldr	r3, [pc, #504]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a7d      	ldr	r2, [pc, #500]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8002fd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e01d      	b.n	8003018 <HAL_RCC_OscConfig+0xd8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0xc0>
 8002fe6:	4b78      	ldr	r3, [pc, #480]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a77      	ldr	r2, [pc, #476]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8002fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b75      	ldr	r3, [pc, #468]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a74      	ldr	r2, [pc, #464]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0xd8>
 8003000:	4b71      	ldr	r3, [pc, #452]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a70      	ldr	r2, [pc, #448]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8003006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b6e      	ldr	r3, [pc, #440]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a6d      	ldr	r2, [pc, #436]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8003012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d013      	beq.n	8003048 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fd ff6c 	bl	8000efc <HAL_GetTick>
 8003024:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003028:	f7fd ff68 	bl	8000efc <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	@ 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e3d4      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800303a:	4b63      	ldr	r3, [pc, #396]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0xe8>
 8003046:	e014      	b.n	8003072 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fd ff58 	bl	8000efc <HAL_GetTick>
 800304c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003050:	f7fd ff54 	bl	8000efc <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	@ 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e3c0      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003062:	4b59      	ldr	r3, [pc, #356]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x110>
 800306e:	e000      	b.n	8003072 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80ca 	beq.w	8003214 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003080:	4b51      	ldr	r3, [pc, #324]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003088:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800308a:	4b4f      	ldr	r3, [pc, #316]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 800308c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_RCC_OscConfig+0x166>
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	2b18      	cmp	r3, #24
 800309a:	d156      	bne.n	800314a <HAL_RCC_OscConfig+0x20a>
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d151      	bne.n	800314a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a6:	4b48      	ldr	r3, [pc, #288]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_RCC_OscConfig+0x17e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e392      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030be:	4b42      	ldr	r3, [pc, #264]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 0219 	bic.w	r2, r3, #25
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	493f      	ldr	r1, [pc, #252]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fd ff14 	bl	8000efc <HAL_GetTick>
 80030d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d8:	f7fd ff10 	bl	8000efc <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e37c      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030ea:	4b37      	ldr	r3, [pc, #220]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f6:	f7fd ff0d 	bl	8000f14 <HAL_GetREVID>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003100:	4293      	cmp	r3, r2
 8003102:	d817      	bhi.n	8003134 <HAL_RCC_OscConfig+0x1f4>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2b40      	cmp	r3, #64	@ 0x40
 800310a:	d108      	bne.n	800311e <HAL_RCC_OscConfig+0x1de>
 800310c:	4b2e      	ldr	r3, [pc, #184]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003114:	4a2c      	ldr	r2, [pc, #176]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8003116:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800311a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800311c:	e07a      	b.n	8003214 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311e:	4b2a      	ldr	r3, [pc, #168]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	031b      	lsls	r3, r3, #12
 800312c:	4926      	ldr	r1, [pc, #152]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003132:	e06f      	b.n	8003214 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003134:	4b24      	ldr	r3, [pc, #144]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	061b      	lsls	r3, r3, #24
 8003142:	4921      	ldr	r1, [pc, #132]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003148:	e064      	b.n	8003214 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d047      	beq.n	80031e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003152:	4b1d      	ldr	r3, [pc, #116]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 0219 	bic.w	r2, r3, #25
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	491a      	ldr	r1, [pc, #104]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8003160:	4313      	orrs	r3, r2
 8003162:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fd feca 	bl	8000efc <HAL_GetTick>
 8003168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800316c:	f7fd fec6 	bl	8000efc <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e332      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800317e:	4b12      	ldr	r3, [pc, #72]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318a:	f7fd fec3 	bl	8000f14 <HAL_GetREVID>
 800318e:	4603      	mov	r3, r0
 8003190:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003194:	4293      	cmp	r3, r2
 8003196:	d819      	bhi.n	80031cc <HAL_RCC_OscConfig+0x28c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	2b40      	cmp	r3, #64	@ 0x40
 800319e:	d108      	bne.n	80031b2 <HAL_RCC_OscConfig+0x272>
 80031a0:	4b09      	ldr	r3, [pc, #36]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80031a8:	4a07      	ldr	r2, [pc, #28]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 80031aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ae:	6053      	str	r3, [r2, #4]
 80031b0:	e030      	b.n	8003214 <HAL_RCC_OscConfig+0x2d4>
 80031b2:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	031b      	lsls	r3, r3, #12
 80031c0:	4901      	ldr	r1, [pc, #4]	@ (80031c8 <HAL_RCC_OscConfig+0x288>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
 80031c6:	e025      	b.n	8003214 <HAL_RCC_OscConfig+0x2d4>
 80031c8:	58024400 	.word	0x58024400
 80031cc:	4b9a      	ldr	r3, [pc, #616]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	061b      	lsls	r3, r3, #24
 80031da:	4997      	ldr	r1, [pc, #604]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
 80031e0:	e018      	b.n	8003214 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e2:	4b95      	ldr	r3, [pc, #596]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a94      	ldr	r2, [pc, #592]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ee:	f7fd fe85 	bl	8000efc <HAL_GetTick>
 80031f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f6:	f7fd fe81 	bl	8000efc <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e2ed      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003208:	4b8b      	ldr	r3, [pc, #556]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f0      	bne.n	80031f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80a9 	beq.w	8003374 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003222:	4b85      	ldr	r3, [pc, #532]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800322a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800322c:	4b82      	ldr	r3, [pc, #520]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 800322e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003230:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b08      	cmp	r3, #8
 8003236:	d007      	beq.n	8003248 <HAL_RCC_OscConfig+0x308>
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b18      	cmp	r3, #24
 800323c:	d13a      	bne.n	80032b4 <HAL_RCC_OscConfig+0x374>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d135      	bne.n	80032b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003248:	4b7b      	ldr	r3, [pc, #492]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_OscConfig+0x320>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2b80      	cmp	r3, #128	@ 0x80
 800325a:	d001      	beq.n	8003260 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e2c1      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003260:	f7fd fe58 	bl	8000f14 <HAL_GetREVID>
 8003264:	4603      	mov	r3, r0
 8003266:	f241 0203 	movw	r2, #4099	@ 0x1003
 800326a:	4293      	cmp	r3, r2
 800326c:	d817      	bhi.n	800329e <HAL_RCC_OscConfig+0x35e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	2b20      	cmp	r3, #32
 8003274:	d108      	bne.n	8003288 <HAL_RCC_OscConfig+0x348>
 8003276:	4b70      	ldr	r3, [pc, #448]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800327e:	4a6e      	ldr	r2, [pc, #440]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 8003280:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003284:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003286:	e075      	b.n	8003374 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003288:	4b6b      	ldr	r3, [pc, #428]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	069b      	lsls	r3, r3, #26
 8003296:	4968      	ldr	r1, [pc, #416]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800329c:	e06a      	b.n	8003374 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800329e:	4b66      	ldr	r3, [pc, #408]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	061b      	lsls	r3, r3, #24
 80032ac:	4962      	ldr	r1, [pc, #392]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032b2:	e05f      	b.n	8003374 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d042      	beq.n	8003342 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80032bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 80032c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fd fe18 	bl	8000efc <HAL_GetTick>
 80032cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80032d0:	f7fd fe14 	bl	8000efc <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e280      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032e2:	4b55      	ldr	r3, [pc, #340]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032ee:	f7fd fe11 	bl	8000f14 <HAL_GetREVID>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d817      	bhi.n	800332c <HAL_RCC_OscConfig+0x3ec>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	2b20      	cmp	r3, #32
 8003302:	d108      	bne.n	8003316 <HAL_RCC_OscConfig+0x3d6>
 8003304:	4b4c      	ldr	r3, [pc, #304]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800330c:	4a4a      	ldr	r2, [pc, #296]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 800330e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003312:	6053      	str	r3, [r2, #4]
 8003314:	e02e      	b.n	8003374 <HAL_RCC_OscConfig+0x434>
 8003316:	4b48      	ldr	r3, [pc, #288]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	069b      	lsls	r3, r3, #26
 8003324:	4944      	ldr	r1, [pc, #272]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
 800332a:	e023      	b.n	8003374 <HAL_RCC_OscConfig+0x434>
 800332c:	4b42      	ldr	r3, [pc, #264]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	493f      	ldr	r1, [pc, #252]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 800333c:	4313      	orrs	r3, r2
 800333e:	60cb      	str	r3, [r1, #12]
 8003340:	e018      	b.n	8003374 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003342:	4b3d      	ldr	r3, [pc, #244]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a3c      	ldr	r2, [pc, #240]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 8003348:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800334c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7fd fdd5 	bl	8000efc <HAL_GetTick>
 8003352:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003356:	f7fd fdd1 	bl	8000efc <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e23d      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003368:	4b33      	ldr	r3, [pc, #204]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f0      	bne.n	8003356 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d036      	beq.n	80033ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d019      	beq.n	80033bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003388:	4b2b      	ldr	r3, [pc, #172]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 800338a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338c:	4a2a      	ldr	r2, [pc, #168]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fd fdb2 	bl	8000efc <HAL_GetTick>
 8003398:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339c:	f7fd fdae 	bl	8000efc <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e21a      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033ae:	4b22      	ldr	r3, [pc, #136]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 80033b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x45c>
 80033ba:	e018      	b.n	80033ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 80033be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 80033c2:	f023 0301 	bic.w	r3, r3, #1
 80033c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fd fd98 	bl	8000efc <HAL_GetTick>
 80033cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d0:	f7fd fd94 	bl	8000efc <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e200      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033e2:	4b15      	ldr	r3, [pc, #84]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 80033e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d039      	beq.n	800346e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01c      	beq.n	800343c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003402:	4b0d      	ldr	r3, [pc, #52]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a0c      	ldr	r2, [pc, #48]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 8003408:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800340c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800340e:	f7fd fd75 	bl	8000efc <HAL_GetTick>
 8003412:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003416:	f7fd fd71 	bl	8000efc <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e1dd      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003428:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <HAL_RCC_OscConfig+0x4f8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x4d6>
 8003434:	e01b      	b.n	800346e <HAL_RCC_OscConfig+0x52e>
 8003436:	bf00      	nop
 8003438:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800343c:	4b9b      	ldr	r3, [pc, #620]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a9a      	ldr	r2, [pc, #616]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003442:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003446:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003448:	f7fd fd58 	bl	8000efc <HAL_GetTick>
 800344c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003450:	f7fd fd54 	bl	8000efc <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e1c0      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003462:	4b92      	ldr	r3, [pc, #584]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8081 	beq.w	800357e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800347c:	4b8c      	ldr	r3, [pc, #560]	@ (80036b0 <HAL_RCC_OscConfig+0x770>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a8b      	ldr	r2, [pc, #556]	@ (80036b0 <HAL_RCC_OscConfig+0x770>)
 8003482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003486:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003488:	f7fd fd38 	bl	8000efc <HAL_GetTick>
 800348c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003490:	f7fd fd34 	bl	8000efc <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	@ 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1a0      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034a2:	4b83      	ldr	r3, [pc, #524]	@ (80036b0 <HAL_RCC_OscConfig+0x770>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d106      	bne.n	80034c4 <HAL_RCC_OscConfig+0x584>
 80034b6:	4b7d      	ldr	r3, [pc, #500]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ba:	4a7c      	ldr	r2, [pc, #496]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c2:	e02d      	b.n	8003520 <HAL_RCC_OscConfig+0x5e0>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCC_OscConfig+0x5a6>
 80034cc:	4b77      	ldr	r3, [pc, #476]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d0:	4a76      	ldr	r2, [pc, #472]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d8:	4b74      	ldr	r3, [pc, #464]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034dc:	4a73      	ldr	r2, [pc, #460]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 80034de:	f023 0304 	bic.w	r3, r3, #4
 80034e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e4:	e01c      	b.n	8003520 <HAL_RCC_OscConfig+0x5e0>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x5c8>
 80034ee:	4b6f      	ldr	r3, [pc, #444]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f2:	4a6e      	ldr	r2, [pc, #440]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034fa:	4b6c      	ldr	r3, [pc, #432]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fe:	4a6b      	ldr	r2, [pc, #428]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6713      	str	r3, [r2, #112]	@ 0x70
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0x5e0>
 8003508:	4b68      	ldr	r3, [pc, #416]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350c:	4a67      	ldr	r2, [pc, #412]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	@ 0x70
 8003514:	4b65      	ldr	r3, [pc, #404]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003518:	4a64      	ldr	r2, [pc, #400]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 800351a:	f023 0304 	bic.w	r3, r3, #4
 800351e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d015      	beq.n	8003554 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fd fce8 	bl	8000efc <HAL_GetTick>
 800352c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800352e:	e00a      	b.n	8003546 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003530:	f7fd fce4 	bl	8000efc <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e14e      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003546:	4b59      	ldr	r3, [pc, #356]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0ee      	beq.n	8003530 <HAL_RCC_OscConfig+0x5f0>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003554:	f7fd fcd2 	bl	8000efc <HAL_GetTick>
 8003558:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fd fcce 	bl	8000efc <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e138      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003572:	4b4e      	ldr	r3, [pc, #312]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1ee      	bne.n	800355c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 812d 	beq.w	80037e2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003588:	4b48      	ldr	r3, [pc, #288]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003590:	2b18      	cmp	r3, #24
 8003592:	f000 80bd 	beq.w	8003710 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359a:	2b02      	cmp	r3, #2
 800359c:	f040 809e 	bne.w	80036dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a0:	4b42      	ldr	r3, [pc, #264]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a41      	ldr	r2, [pc, #260]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 80035a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fd fca6 	bl	8000efc <HAL_GetTick>
 80035b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fd fca2 	bl	8000efc <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e10e      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035c6:	4b39      	ldr	r3, [pc, #228]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d2:	4b36      	ldr	r3, [pc, #216]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 80035d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035d6:	4b37      	ldr	r3, [pc, #220]	@ (80036b4 <HAL_RCC_OscConfig+0x774>)
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035e2:	0112      	lsls	r2, r2, #4
 80035e4:	430a      	orrs	r2, r1
 80035e6:	4931      	ldr	r1, [pc, #196]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f0:	3b01      	subs	r3, #1
 80035f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035fa:	3b01      	subs	r3, #1
 80035fc:	025b      	lsls	r3, r3, #9
 80035fe:	b29b      	uxth	r3, r3
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003606:	3b01      	subs	r3, #1
 8003608:	041b      	lsls	r3, r3, #16
 800360a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003614:	3b01      	subs	r3, #1
 8003616:	061b      	lsls	r3, r3, #24
 8003618:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800361c:	4923      	ldr	r1, [pc, #140]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 800361e:	4313      	orrs	r3, r2
 8003620:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003622:	4b22      	ldr	r3, [pc, #136]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003626:	4a21      	ldr	r2, [pc, #132]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800362e:	4b1f      	ldr	r3, [pc, #124]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003630:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003632:	4b21      	ldr	r3, [pc, #132]	@ (80036b8 <HAL_RCC_OscConfig+0x778>)
 8003634:	4013      	ands	r3, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800363a:	00d2      	lsls	r2, r2, #3
 800363c:	491b      	ldr	r1, [pc, #108]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 800363e:	4313      	orrs	r3, r2
 8003640:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003642:	4b1a      	ldr	r3, [pc, #104]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003646:	f023 020c 	bic.w	r2, r3, #12
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	4917      	ldr	r1, [pc, #92]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003650:	4313      	orrs	r3, r2
 8003652:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003654:	4b15      	ldr	r3, [pc, #84]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	f023 0202 	bic.w	r2, r3, #2
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003660:	4912      	ldr	r1, [pc, #72]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003662:	4313      	orrs	r3, r2
 8003664:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003666:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366a:	4a10      	ldr	r2, [pc, #64]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 800366c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003670:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003672:	4b0e      	ldr	r3, [pc, #56]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	4a0d      	ldr	r2, [pc, #52]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800367c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800367e:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003682:	4a0a      	ldr	r2, [pc, #40]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003688:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800368a:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 800368c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368e:	4a07      	ldr	r2, [pc, #28]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003696:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a04      	ldr	r2, [pc, #16]	@ (80036ac <HAL_RCC_OscConfig+0x76c>)
 800369c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fd fc2b 	bl	8000efc <HAL_GetTick>
 80036a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036a8:	e011      	b.n	80036ce <HAL_RCC_OscConfig+0x78e>
 80036aa:	bf00      	nop
 80036ac:	58024400 	.word	0x58024400
 80036b0:	58024800 	.word	0x58024800
 80036b4:	fffffc0c 	.word	0xfffffc0c
 80036b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fd fc1e 	bl	8000efc <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e08a      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036ce:	4b47      	ldr	r3, [pc, #284]	@ (80037ec <HAL_RCC_OscConfig+0x8ac>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x77c>
 80036da:	e082      	b.n	80037e2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036dc:	4b43      	ldr	r3, [pc, #268]	@ (80037ec <HAL_RCC_OscConfig+0x8ac>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a42      	ldr	r2, [pc, #264]	@ (80037ec <HAL_RCC_OscConfig+0x8ac>)
 80036e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fd fc08 	bl	8000efc <HAL_GetTick>
 80036ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fd fc04 	bl	8000efc <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e070      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003702:	4b3a      	ldr	r3, [pc, #232]	@ (80037ec <HAL_RCC_OscConfig+0x8ac>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f0      	bne.n	80036f0 <HAL_RCC_OscConfig+0x7b0>
 800370e:	e068      	b.n	80037e2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003710:	4b36      	ldr	r3, [pc, #216]	@ (80037ec <HAL_RCC_OscConfig+0x8ac>)
 8003712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003714:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003716:	4b35      	ldr	r3, [pc, #212]	@ (80037ec <HAL_RCC_OscConfig+0x8ac>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	2b01      	cmp	r3, #1
 8003722:	d031      	beq.n	8003788 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f003 0203 	and.w	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d12a      	bne.n	8003788 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d122      	bne.n	8003788 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d11a      	bne.n	8003788 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	0a5b      	lsrs	r3, r3, #9
 8003756:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d111      	bne.n	8003788 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	0c1b      	lsrs	r3, r3, #16
 8003768:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003770:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d108      	bne.n	8003788 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	0e1b      	lsrs	r3, r3, #24
 800377a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003782:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e02b      	b.n	80037e4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800378c:	4b17      	ldr	r3, [pc, #92]	@ (80037ec <HAL_RCC_OscConfig+0x8ac>)
 800378e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003790:	08db      	lsrs	r3, r3, #3
 8003792:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003796:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d01f      	beq.n	80037e2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80037a2:	4b12      	ldr	r3, [pc, #72]	@ (80037ec <HAL_RCC_OscConfig+0x8ac>)
 80037a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a6:	4a11      	ldr	r2, [pc, #68]	@ (80037ec <HAL_RCC_OscConfig+0x8ac>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037ae:	f7fd fba5 	bl	8000efc <HAL_GetTick>
 80037b2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80037b4:	bf00      	nop
 80037b6:	f7fd fba1 	bl	8000efc <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037be:	4293      	cmp	r3, r2
 80037c0:	d0f9      	beq.n	80037b6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037c2:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <HAL_RCC_OscConfig+0x8ac>)
 80037c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037c6:	4b0a      	ldr	r3, [pc, #40]	@ (80037f0 <HAL_RCC_OscConfig+0x8b0>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80037ce:	00d2      	lsls	r2, r2, #3
 80037d0:	4906      	ldr	r1, [pc, #24]	@ (80037ec <HAL_RCC_OscConfig+0x8ac>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80037d6:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <HAL_RCC_OscConfig+0x8ac>)
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	4a04      	ldr	r2, [pc, #16]	@ (80037ec <HAL_RCC_OscConfig+0x8ac>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3730      	adds	r7, #48	@ 0x30
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	58024400 	.word	0x58024400
 80037f0:	ffff0007 	.word	0xffff0007

080037f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e19c      	b.n	8003b42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003808:	4b8a      	ldr	r3, [pc, #552]	@ (8003a34 <HAL_RCC_ClockConfig+0x240>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d910      	bls.n	8003838 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b87      	ldr	r3, [pc, #540]	@ (8003a34 <HAL_RCC_ClockConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 020f 	bic.w	r2, r3, #15
 800381e:	4985      	ldr	r1, [pc, #532]	@ (8003a34 <HAL_RCC_ClockConfig+0x240>)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b83      	ldr	r3, [pc, #524]	@ (8003a34 <HAL_RCC_ClockConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e184      	b.n	8003b42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d010      	beq.n	8003866 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	4b7b      	ldr	r3, [pc, #492]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003850:	429a      	cmp	r2, r3
 8003852:	d908      	bls.n	8003866 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003854:	4b78      	ldr	r3, [pc, #480]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	4975      	ldr	r1, [pc, #468]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 8003862:	4313      	orrs	r3, r2
 8003864:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d010      	beq.n	8003894 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	4b70      	ldr	r3, [pc, #448]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800387e:	429a      	cmp	r2, r3
 8003880:	d908      	bls.n	8003894 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003882:	4b6d      	ldr	r3, [pc, #436]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	496a      	ldr	r1, [pc, #424]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 8003890:	4313      	orrs	r3, r2
 8003892:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	d010      	beq.n	80038c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	4b64      	ldr	r3, [pc, #400]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d908      	bls.n	80038c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038b0:	4b61      	ldr	r3, [pc, #388]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	495e      	ldr	r1, [pc, #376]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d010      	beq.n	80038f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	4b59      	ldr	r3, [pc, #356]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038da:	429a      	cmp	r2, r3
 80038dc:	d908      	bls.n	80038f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80038de:	4b56      	ldr	r3, [pc, #344]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	4953      	ldr	r1, [pc, #332]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d010      	beq.n	800391e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	4b4d      	ldr	r3, [pc, #308]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	429a      	cmp	r2, r3
 800390a:	d908      	bls.n	800391e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800390c:	4b4a      	ldr	r3, [pc, #296]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	f023 020f 	bic.w	r2, r3, #15
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4947      	ldr	r1, [pc, #284]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 800391a:	4313      	orrs	r3, r2
 800391c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d055      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800392a:	4b43      	ldr	r3, [pc, #268]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	4940      	ldr	r1, [pc, #256]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 8003938:	4313      	orrs	r3, r2
 800393a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d107      	bne.n	8003954 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003944:	4b3c      	ldr	r3, [pc, #240]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d121      	bne.n	8003994 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0f6      	b.n	8003b42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d107      	bne.n	800396c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800395c:	4b36      	ldr	r3, [pc, #216]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d115      	bne.n	8003994 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0ea      	b.n	8003b42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d107      	bne.n	8003984 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003974:	4b30      	ldr	r3, [pc, #192]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0de      	b.n	8003b42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003984:	4b2c      	ldr	r3, [pc, #176]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0d6      	b.n	8003b42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003994:	4b28      	ldr	r3, [pc, #160]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f023 0207 	bic.w	r2, r3, #7
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4925      	ldr	r1, [pc, #148]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a6:	f7fd faa9 	bl	8000efc <HAL_GetTick>
 80039aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ac:	e00a      	b.n	80039c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ae:	f7fd faa5 	bl	8000efc <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e0be      	b.n	8003b42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d1eb      	bne.n	80039ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d010      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	4b14      	ldr	r3, [pc, #80]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d208      	bcs.n	8003a04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f2:	4b11      	ldr	r3, [pc, #68]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f023 020f 	bic.w	r2, r3, #15
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	490e      	ldr	r1, [pc, #56]	@ (8003a38 <HAL_RCC_ClockConfig+0x244>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a04:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <HAL_RCC_ClockConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d214      	bcs.n	8003a3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b08      	ldr	r3, [pc, #32]	@ (8003a34 <HAL_RCC_ClockConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 020f 	bic.w	r2, r3, #15
 8003a1a:	4906      	ldr	r1, [pc, #24]	@ (8003a34 <HAL_RCC_ClockConfig+0x240>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <HAL_RCC_ClockConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e086      	b.n	8003b42 <HAL_RCC_ClockConfig+0x34e>
 8003a34:	52002000 	.word	0x52002000
 8003a38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d010      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b4c <HAL_RCC_ClockConfig+0x358>)
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d208      	bcs.n	8003a6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a58:	4b3c      	ldr	r3, [pc, #240]	@ (8003b4c <HAL_RCC_ClockConfig+0x358>)
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	4939      	ldr	r1, [pc, #228]	@ (8003b4c <HAL_RCC_ClockConfig+0x358>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d010      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	4b34      	ldr	r3, [pc, #208]	@ (8003b4c <HAL_RCC_ClockConfig+0x358>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d208      	bcs.n	8003a98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a86:	4b31      	ldr	r3, [pc, #196]	@ (8003b4c <HAL_RCC_ClockConfig+0x358>)
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	492e      	ldr	r1, [pc, #184]	@ (8003b4c <HAL_RCC_ClockConfig+0x358>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d010      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699a      	ldr	r2, [r3, #24]
 8003aa8:	4b28      	ldr	r3, [pc, #160]	@ (8003b4c <HAL_RCC_ClockConfig+0x358>)
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d208      	bcs.n	8003ac6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ab4:	4b25      	ldr	r3, [pc, #148]	@ (8003b4c <HAL_RCC_ClockConfig+0x358>)
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	4922      	ldr	r1, [pc, #136]	@ (8003b4c <HAL_RCC_ClockConfig+0x358>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d010      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b4c <HAL_RCC_ClockConfig+0x358>)
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d208      	bcs.n	8003af4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b4c <HAL_RCC_ClockConfig+0x358>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4917      	ldr	r1, [pc, #92]	@ (8003b4c <HAL_RCC_ClockConfig+0x358>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003af4:	f000 f834 	bl	8003b60 <HAL_RCC_GetSysClockFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b14      	ldr	r3, [pc, #80]	@ (8003b4c <HAL_RCC_ClockConfig+0x358>)
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	4912      	ldr	r1, [pc, #72]	@ (8003b50 <HAL_RCC_ClockConfig+0x35c>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b12:	4b0e      	ldr	r3, [pc, #56]	@ (8003b4c <HAL_RCC_ClockConfig+0x358>)
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8003b50 <HAL_RCC_ClockConfig+0x35c>)
 8003b1c:	5cd3      	ldrb	r3, [r2, r3]
 8003b1e:	f003 031f 	and.w	r3, r3, #31
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
 8003b28:	4a0a      	ldr	r2, [pc, #40]	@ (8003b54 <HAL_RCC_ClockConfig+0x360>)
 8003b2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b58 <HAL_RCC_ClockConfig+0x364>)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003b32:	4b0a      	ldr	r3, [pc, #40]	@ (8003b5c <HAL_RCC_ClockConfig+0x368>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fd f996 	bl	8000e68 <HAL_InitTick>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	58024400 	.word	0x58024400
 8003b50:	0800ca18 	.word	0x0800ca18
 8003b54:	24000004 	.word	0x24000004
 8003b58:	24000000 	.word	0x24000000
 8003b5c:	24000008 	.word	0x24000008

08003b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b089      	sub	sp, #36	@ 0x24
 8003b64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b66:	4bb3      	ldr	r3, [pc, #716]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b6e:	2b18      	cmp	r3, #24
 8003b70:	f200 8155 	bhi.w	8003e1e <HAL_RCC_GetSysClockFreq+0x2be>
 8003b74:	a201      	add	r2, pc, #4	@ (adr r2, 8003b7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7a:	bf00      	nop
 8003b7c:	08003be1 	.word	0x08003be1
 8003b80:	08003e1f 	.word	0x08003e1f
 8003b84:	08003e1f 	.word	0x08003e1f
 8003b88:	08003e1f 	.word	0x08003e1f
 8003b8c:	08003e1f 	.word	0x08003e1f
 8003b90:	08003e1f 	.word	0x08003e1f
 8003b94:	08003e1f 	.word	0x08003e1f
 8003b98:	08003e1f 	.word	0x08003e1f
 8003b9c:	08003c07 	.word	0x08003c07
 8003ba0:	08003e1f 	.word	0x08003e1f
 8003ba4:	08003e1f 	.word	0x08003e1f
 8003ba8:	08003e1f 	.word	0x08003e1f
 8003bac:	08003e1f 	.word	0x08003e1f
 8003bb0:	08003e1f 	.word	0x08003e1f
 8003bb4:	08003e1f 	.word	0x08003e1f
 8003bb8:	08003e1f 	.word	0x08003e1f
 8003bbc:	08003c0d 	.word	0x08003c0d
 8003bc0:	08003e1f 	.word	0x08003e1f
 8003bc4:	08003e1f 	.word	0x08003e1f
 8003bc8:	08003e1f 	.word	0x08003e1f
 8003bcc:	08003e1f 	.word	0x08003e1f
 8003bd0:	08003e1f 	.word	0x08003e1f
 8003bd4:	08003e1f 	.word	0x08003e1f
 8003bd8:	08003e1f 	.word	0x08003e1f
 8003bdc:	08003c13 	.word	0x08003c13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003be0:	4b94      	ldr	r3, [pc, #592]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d009      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bec:	4b91      	ldr	r3, [pc, #580]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	08db      	lsrs	r3, r3, #3
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	4a90      	ldr	r2, [pc, #576]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003bfe:	e111      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c00:	4b8d      	ldr	r3, [pc, #564]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c02:	61bb      	str	r3, [r7, #24]
      break;
 8003c04:	e10e      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003c06:	4b8d      	ldr	r3, [pc, #564]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c08:	61bb      	str	r3, [r7, #24]
      break;
 8003c0a:	e10b      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003c0c:	4b8c      	ldr	r3, [pc, #560]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c0e:	61bb      	str	r3, [r7, #24]
      break;
 8003c10:	e108      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c12:	4b88      	ldr	r3, [pc, #544]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003c1c:	4b85      	ldr	r3, [pc, #532]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c28:	4b82      	ldr	r3, [pc, #520]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c32:	4b80      	ldr	r3, [pc, #512]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c36:	08db      	lsrs	r3, r3, #3
 8003c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	fb02 f303 	mul.w	r3, r2, r3
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80e1 	beq.w	8003e18 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	f000 8083 	beq.w	8003d64 <HAL_RCC_GetSysClockFreq+0x204>
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	f200 80a1 	bhi.w	8003da8 <HAL_RCC_GetSysClockFreq+0x248>
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_RCC_GetSysClockFreq+0x114>
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d056      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c72:	e099      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c74:	4b6f      	ldr	r3, [pc, #444]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d02d      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c80:	4b6c      	ldr	r3, [pc, #432]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	08db      	lsrs	r3, r3, #3
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	4a6b      	ldr	r2, [pc, #428]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	ee07 3a90 	vmov	s15, r3
 8003c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003caa:	4b62      	ldr	r3, [pc, #392]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cbe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003cda:	e087      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003e48 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cee:	4b51      	ldr	r3, [pc, #324]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d02:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d1e:	e065      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003e4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d32:	4b40      	ldr	r3, [pc, #256]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d46:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d62:	e043      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003e50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d76:	4b2f      	ldr	r3, [pc, #188]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d8a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003da6:	e021      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003e4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dba:	4b1e      	ldr	r3, [pc, #120]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003dec:	4b11      	ldr	r3, [pc, #68]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df0:	0a5b      	lsrs	r3, r3, #9
 8003df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003df6:	3301      	adds	r3, #1
 8003df8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	ee07 3a90 	vmov	s15, r3
 8003e00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e04:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e10:	ee17 3a90 	vmov	r3, s15
 8003e14:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003e16:	e005      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61bb      	str	r3, [r7, #24]
      break;
 8003e1c:	e002      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003e1e:	4b07      	ldr	r3, [pc, #28]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e20:	61bb      	str	r3, [r7, #24]
      break;
 8003e22:	bf00      	nop
  }

  return sysclockfreq;
 8003e24:	69bb      	ldr	r3, [r7, #24]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3724      	adds	r7, #36	@ 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	58024400 	.word	0x58024400
 8003e38:	03d09000 	.word	0x03d09000
 8003e3c:	003d0900 	.word	0x003d0900
 8003e40:	017d7840 	.word	0x017d7840
 8003e44:	46000000 	.word	0x46000000
 8003e48:	4c742400 	.word	0x4c742400
 8003e4c:	4a742400 	.word	0x4a742400
 8003e50:	4bbebc20 	.word	0x4bbebc20

08003e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e5a:	f7ff fe81 	bl	8003b60 <HAL_RCC_GetSysClockFreq>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	4b10      	ldr	r3, [pc, #64]	@ (8003ea4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	0a1b      	lsrs	r3, r3, #8
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	490f      	ldr	r1, [pc, #60]	@ (8003ea8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e6c:	5ccb      	ldrb	r3, [r1, r3]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	fa22 f303 	lsr.w	r3, r2, r3
 8003e76:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e78:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	4a09      	ldr	r2, [pc, #36]	@ (8003ea8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e82:	5cd3      	ldrb	r3, [r2, r3]
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8e:	4a07      	ldr	r2, [pc, #28]	@ (8003eac <HAL_RCC_GetHCLKFreq+0x58>)
 8003e90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e92:	4a07      	ldr	r2, [pc, #28]	@ (8003eb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e98:	4b04      	ldr	r3, [pc, #16]	@ (8003eac <HAL_RCC_GetHCLKFreq+0x58>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	58024400 	.word	0x58024400
 8003ea8:	0800ca18 	.word	0x0800ca18
 8003eac:	24000004 	.word	0x24000004
 8003eb0:	24000000 	.word	0x24000000

08003eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003eb8:	f7ff ffcc 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4904      	ldr	r1, [pc, #16]	@ (8003edc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	58024400 	.word	0x58024400
 8003edc:	0800ca18 	.word	0x0800ca18

08003ee0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee4:	b0cc      	sub	sp, #304	@ 0x130
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003eec:	2300      	movs	r3, #0
 8003eee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ef8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003f04:	2500      	movs	r5, #0
 8003f06:	ea54 0305 	orrs.w	r3, r4, r5
 8003f0a:	d049      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003f0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f16:	d02f      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003f18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f1c:	d828      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f22:	d01a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f28:	d822      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f32:	d007      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f34:	e01c      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f36:	4bb8      	ldr	r3, [pc, #736]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3a:	4ab7      	ldr	r2, [pc, #732]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f42:	e01a      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f48:	3308      	adds	r3, #8
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f002 fba1 	bl	8006694 <RCCEx_PLL2_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f58:	e00f      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f5e:	3328      	adds	r3, #40	@ 0x28
 8003f60:	2102      	movs	r1, #2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f002 fc48 	bl	80067f8 <RCCEx_PLL3_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f6e:	e004      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003f76:	e000      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f82:	4ba5      	ldr	r3, [pc, #660]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003f8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f90:	4aa1      	ldr	r2, [pc, #644]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f92:	430b      	orrs	r3, r1
 8003f94:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f96:	e003      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003fac:	f04f 0900 	mov.w	r9, #0
 8003fb0:	ea58 0309 	orrs.w	r3, r8, r9
 8003fb4:	d047      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003fb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d82a      	bhi.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc6:	bf00      	nop
 8003fc8:	08003fdd 	.word	0x08003fdd
 8003fcc:	08003feb 	.word	0x08003feb
 8003fd0:	08004001 	.word	0x08004001
 8003fd4:	0800401f 	.word	0x0800401f
 8003fd8:	0800401f 	.word	0x0800401f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fdc:	4b8e      	ldr	r3, [pc, #568]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	4a8d      	ldr	r2, [pc, #564]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fe8:	e01a      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fee:	3308      	adds	r3, #8
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f002 fb4e 	bl	8006694 <RCCEx_PLL2_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ffe:	e00f      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004000:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004004:	3328      	adds	r3, #40	@ 0x28
 8004006:	2100      	movs	r1, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f002 fbf5 	bl	80067f8 <RCCEx_PLL3_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004014:	e004      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800401c:	e000      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800401e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004020:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004028:	4b7b      	ldr	r3, [pc, #492]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800402a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402c:	f023 0107 	bic.w	r1, r3, #7
 8004030:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004036:	4a78      	ldr	r2, [pc, #480]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004038:	430b      	orrs	r3, r1
 800403a:	6513      	str	r3, [r2, #80]	@ 0x50
 800403c:	e003      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004042:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004046:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004052:	f04f 0b00 	mov.w	fp, #0
 8004056:	ea5a 030b 	orrs.w	r3, sl, fp
 800405a:	d04c      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800405c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004066:	d030      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800406c:	d829      	bhi.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800406e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004070:	d02d      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004072:	2bc0      	cmp	r3, #192	@ 0xc0
 8004074:	d825      	bhi.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004076:	2b80      	cmp	r3, #128	@ 0x80
 8004078:	d018      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800407a:	2b80      	cmp	r3, #128	@ 0x80
 800407c:	d821      	bhi.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004082:	2b40      	cmp	r3, #64	@ 0x40
 8004084:	d007      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004086:	e01c      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004088:	4b63      	ldr	r3, [pc, #396]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800408a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408c:	4a62      	ldr	r2, [pc, #392]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800408e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004094:	e01c      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004096:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800409a:	3308      	adds	r3, #8
 800409c:	2100      	movs	r1, #0
 800409e:	4618      	mov	r0, r3
 80040a0:	f002 faf8 	bl	8006694 <RCCEx_PLL2_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80040aa:	e011      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040b0:	3328      	adds	r3, #40	@ 0x28
 80040b2:	2100      	movs	r1, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f002 fb9f 	bl	80067f8 <RCCEx_PLL3_Config>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80040c0:	e006      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80040c8:	e002      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80040ca:	bf00      	nop
 80040cc:	e000      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80040ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80040d8:	4b4f      	ldr	r3, [pc, #316]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040dc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80040e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e6:	4a4c      	ldr	r2, [pc, #304]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80040ec:	e003      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80040f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004102:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004106:	2300      	movs	r3, #0
 8004108:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800410c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8004110:	460b      	mov	r3, r1
 8004112:	4313      	orrs	r3, r2
 8004114:	d053      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004116:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800411a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800411e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004122:	d035      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004124:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004128:	d82e      	bhi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800412a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800412e:	d031      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004130:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004134:	d828      	bhi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004136:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800413a:	d01a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800413c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004140:	d822      	bhi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004146:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800414a:	d007      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800414c:	e01c      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414e:	4b32      	ldr	r3, [pc, #200]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	4a31      	ldr	r2, [pc, #196]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004158:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800415a:	e01c      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800415c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004160:	3308      	adds	r3, #8
 8004162:	2100      	movs	r1, #0
 8004164:	4618      	mov	r0, r3
 8004166:	f002 fa95 	bl	8006694 <RCCEx_PLL2_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004170:	e011      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004172:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004176:	3328      	adds	r3, #40	@ 0x28
 8004178:	2100      	movs	r1, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f002 fb3c 	bl	80067f8 <RCCEx_PLL3_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004186:	e006      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800418e:	e002      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004190:	bf00      	nop
 8004192:	e000      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004196:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800419e:	4b1e      	ldr	r3, [pc, #120]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80041a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80041ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80041b4:	e003      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80041ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80041be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80041ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80041ce:	2300      	movs	r3, #0
 80041d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80041d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80041d8:	460b      	mov	r3, r1
 80041da:	4313      	orrs	r3, r2
 80041dc:	d056      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80041de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041ea:	d038      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80041ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041f0:	d831      	bhi.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041f6:	d034      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80041f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041fc:	d82b      	bhi.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004202:	d01d      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004204:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004208:	d825      	bhi.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d006      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800420e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004214:	e01f      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004216:	bf00      	nop
 8004218:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421c:	4ba2      	ldr	r3, [pc, #648]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800421e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004220:	4aa1      	ldr	r2, [pc, #644]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004226:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004228:	e01c      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800422a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800422e:	3308      	adds	r3, #8
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f002 fa2e 	bl	8006694 <RCCEx_PLL2_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800423e:	e011      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004240:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004244:	3328      	adds	r3, #40	@ 0x28
 8004246:	2100      	movs	r1, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f002 fad5 	bl	80067f8 <RCCEx_PLL3_Config>
 800424e:	4603      	mov	r3, r0
 8004250:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004254:	e006      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800425c:	e002      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800425e:	bf00      	nop
 8004260:	e000      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004264:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10b      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800426c:	4b8e      	ldr	r3, [pc, #568]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004270:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004274:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004278:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800427c:	4a8a      	ldr	r2, [pc, #552]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800427e:	430b      	orrs	r3, r1
 8004280:	6593      	str	r3, [r2, #88]	@ 0x58
 8004282:	e003      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004284:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004288:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800428c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004298:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800429c:	2300      	movs	r3, #0
 800429e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80042a2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80042a6:	460b      	mov	r3, r1
 80042a8:	4313      	orrs	r3, r2
 80042aa:	d03a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80042ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b2:	2b30      	cmp	r3, #48	@ 0x30
 80042b4:	d01f      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80042b6:	2b30      	cmp	r3, #48	@ 0x30
 80042b8:	d819      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d00c      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d815      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d019      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d111      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ca:	4b77      	ldr	r3, [pc, #476]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	4a76      	ldr	r2, [pc, #472]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80042d6:	e011      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042dc:	3308      	adds	r3, #8
 80042de:	2102      	movs	r1, #2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f002 f9d7 	bl	8006694 <RCCEx_PLL2_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80042ec:	e006      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80042f4:	e002      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80042f6:	bf00      	nop
 80042f8:	e000      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80042fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004304:	4b68      	ldr	r3, [pc, #416]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004308:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800430c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004312:	4a65      	ldr	r2, [pc, #404]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004314:	430b      	orrs	r3, r1
 8004316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004318:	e003      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800431e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004322:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800432e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004332:	2300      	movs	r3, #0
 8004334:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004338:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800433c:	460b      	mov	r3, r1
 800433e:	4313      	orrs	r3, r2
 8004340:	d051      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004342:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004348:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800434c:	d035      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800434e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004352:	d82e      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004354:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004358:	d031      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800435a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800435e:	d828      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004364:	d01a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800436a:	d822      	bhi.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004374:	d007      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004376:	e01c      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004378:	4b4b      	ldr	r3, [pc, #300]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800437a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437c:	4a4a      	ldr	r2, [pc, #296]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800437e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004382:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004384:	e01c      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004386:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800438a:	3308      	adds	r3, #8
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f002 f980 	bl	8006694 <RCCEx_PLL2_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800439a:	e011      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800439c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043a0:	3328      	adds	r3, #40	@ 0x28
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f002 fa27 	bl	80067f8 <RCCEx_PLL3_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80043b0:	e006      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80043b8:	e002      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80043be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80043c8:	4b37      	ldr	r3, [pc, #220]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80043d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043d6:	4a34      	ldr	r2, [pc, #208]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043d8:	430b      	orrs	r3, r1
 80043da:	6513      	str	r3, [r2, #80]	@ 0x50
 80043dc:	e003      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80043e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80043f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80043fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004400:	460b      	mov	r3, r1
 8004402:	4313      	orrs	r3, r2
 8004404:	d056      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004406:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800440a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800440c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004410:	d033      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004412:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004416:	d82c      	bhi.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004418:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800441c:	d02f      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800441e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004422:	d826      	bhi.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004424:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004428:	d02b      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800442a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800442e:	d820      	bhi.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004430:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004434:	d012      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004436:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800443a:	d81a      	bhi.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d022      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004444:	d115      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800444a:	3308      	adds	r3, #8
 800444c:	2101      	movs	r1, #1
 800444e:	4618      	mov	r0, r3
 8004450:	f002 f920 	bl	8006694 <RCCEx_PLL2_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800445a:	e015      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800445c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004460:	3328      	adds	r3, #40	@ 0x28
 8004462:	2101      	movs	r1, #1
 8004464:	4618      	mov	r0, r3
 8004466:	f002 f9c7 	bl	80067f8 <RCCEx_PLL3_Config>
 800446a:	4603      	mov	r3, r0
 800446c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004470:	e00a      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004478:	e006      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800447a:	bf00      	nop
 800447c:	e004      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004488:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10d      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004490:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004494:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004498:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800449c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800449e:	4a02      	ldr	r2, [pc, #8]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044a0:	430b      	orrs	r3, r1
 80044a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80044a4:	e006      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80044a6:	bf00      	nop
 80044a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80044c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044c4:	2300      	movs	r3, #0
 80044c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80044ca:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80044ce:	460b      	mov	r3, r1
 80044d0:	4313      	orrs	r3, r2
 80044d2:	d055      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80044d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044e0:	d033      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80044e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044e6:	d82c      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ec:	d02f      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80044ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f2:	d826      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80044f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044f8:	d02b      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80044fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044fe:	d820      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004504:	d012      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800450a:	d81a      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d022      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004514:	d115      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004516:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800451a:	3308      	adds	r3, #8
 800451c:	2101      	movs	r1, #1
 800451e:	4618      	mov	r0, r3
 8004520:	f002 f8b8 	bl	8006694 <RCCEx_PLL2_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800452a:	e015      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800452c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004530:	3328      	adds	r3, #40	@ 0x28
 8004532:	2101      	movs	r1, #1
 8004534:	4618      	mov	r0, r3
 8004536:	f002 f95f 	bl	80067f8 <RCCEx_PLL3_Config>
 800453a:	4603      	mov	r3, r0
 800453c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004540:	e00a      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004548:	e006      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800454a:	bf00      	nop
 800454c:	e004      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800454e:	bf00      	nop
 8004550:	e002      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004552:	bf00      	nop
 8004554:	e000      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004558:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004560:	4bb6      	ldr	r3, [pc, #728]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004564:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004568:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800456c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004570:	4ab2      	ldr	r2, [pc, #712]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004572:	430b      	orrs	r3, r1
 8004574:	6593      	str	r3, [r2, #88]	@ 0x58
 8004576:	e003      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004578:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800457c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004580:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800458c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004590:	2300      	movs	r3, #0
 8004592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004596:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800459a:	460b      	mov	r3, r1
 800459c:	4313      	orrs	r3, r2
 800459e:	d02a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80045a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d011      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80045aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ae:	d10a      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045b4:	3308      	adds	r3, #8
 80045b6:	2101      	movs	r1, #1
 80045b8:	4618      	mov	r0, r3
 80045ba:	f002 f86b 	bl	8006694 <RCCEx_PLL2_Config>
 80045be:	4603      	mov	r3, r0
 80045c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80045c4:	e004      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80045cc:	e000      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80045ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80045d8:	4b98      	ldr	r3, [pc, #608]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045dc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80045e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e6:	4a95      	ldr	r2, [pc, #596]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045e8:	430b      	orrs	r3, r1
 80045ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045ec:	e003      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80045f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004602:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004606:	2300      	movs	r3, #0
 8004608:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800460c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004610:	460b      	mov	r3, r1
 8004612:	4313      	orrs	r3, r2
 8004614:	d037      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004616:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800461a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800461c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004620:	d00e      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004626:	d816      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d018      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800462c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004630:	d111      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004632:	4b82      	ldr	r3, [pc, #520]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	4a81      	ldr	r2, [pc, #516]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800463c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800463e:	e00f      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004640:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004644:	3308      	adds	r3, #8
 8004646:	2101      	movs	r1, #1
 8004648:	4618      	mov	r0, r3
 800464a:	f002 f823 	bl	8006694 <RCCEx_PLL2_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004654:	e004      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800465c:	e000      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800465e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004660:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004668:	4b74      	ldr	r3, [pc, #464]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800466a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004670:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004676:	4a71      	ldr	r2, [pc, #452]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004678:	430b      	orrs	r3, r1
 800467a:	6513      	str	r3, [r2, #80]	@ 0x50
 800467c:	e003      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004682:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004692:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004696:	2300      	movs	r3, #0
 8004698:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800469c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4313      	orrs	r3, r2
 80046a4:	d03a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80046a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d81d      	bhi.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80046b0:	a201      	add	r2, pc, #4	@ (adr r2, 80046b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	080046f5 	.word	0x080046f5
 80046bc:	080046c9 	.word	0x080046c9
 80046c0:	080046d7 	.word	0x080046d7
 80046c4:	080046f5 	.word	0x080046f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c8:	4b5c      	ldr	r3, [pc, #368]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046cc:	4a5b      	ldr	r2, [pc, #364]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80046ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80046d4:	e00f      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046da:	3308      	adds	r3, #8
 80046dc:	2102      	movs	r1, #2
 80046de:	4618      	mov	r0, r3
 80046e0:	f001 ffd8 	bl	8006694 <RCCEx_PLL2_Config>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80046ea:	e004      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80046f2:	e000      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80046f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80046fe:	4b4f      	ldr	r3, [pc, #316]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004702:	f023 0103 	bic.w	r1, r3, #3
 8004706:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800470a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800470c:	4a4b      	ldr	r2, [pc, #300]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800470e:	430b      	orrs	r3, r1
 8004710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004712:	e003      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004714:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004718:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800471c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004728:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800472c:	2300      	movs	r3, #0
 800472e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004732:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004736:	460b      	mov	r3, r1
 8004738:	4313      	orrs	r3, r2
 800473a:	f000 80a0 	beq.w	800487e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800473e:	4b40      	ldr	r3, [pc, #256]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a3f      	ldr	r2, [pc, #252]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004748:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800474a:	f7fc fbd7 	bl	8000efc <HAL_GetTick>
 800474e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004752:	e00b      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004754:	f7fc fbd2 	bl	8000efc <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b64      	cmp	r3, #100	@ 0x64
 8004762:	d903      	bls.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800476a:	e005      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800476c:	4b34      	ldr	r3, [pc, #208]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ed      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8004778:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800477c:	2b00      	cmp	r3, #0
 800477e:	d17a      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004780:	4b2e      	ldr	r3, [pc, #184]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004782:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004784:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004788:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800478c:	4053      	eors	r3, r2
 800478e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004792:	2b00      	cmp	r3, #0
 8004794:	d015      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004796:	4b29      	ldr	r3, [pc, #164]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800479e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047a2:	4b26      	ldr	r3, [pc, #152]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a6:	4a25      	ldr	r2, [pc, #148]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047ae:	4b23      	ldr	r3, [pc, #140]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b2:	4a22      	ldr	r2, [pc, #136]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047b8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80047ba:	4a20      	ldr	r2, [pc, #128]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80047c0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80047c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80047ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ce:	d118      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d0:	f7fc fb94 	bl	8000efc <HAL_GetTick>
 80047d4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047d8:	e00d      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047da:	f7fc fb8f 	bl	8000efc <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80047e4:	1ad2      	subs	r2, r2, r3
 80047e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d903      	bls.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80047f4:	e005      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047f6:	4b11      	ldr	r3, [pc, #68]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0eb      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8004802:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004806:	2b00      	cmp	r3, #0
 8004808:	d130      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800480a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800480e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800481a:	d115      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800481c:	4b07      	ldr	r3, [pc, #28]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004824:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004828:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800482c:	091a      	lsrs	r2, r3, #4
 800482e:	4b05      	ldr	r3, [pc, #20]	@ (8004844 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004830:	4013      	ands	r3, r2
 8004832:	4a02      	ldr	r2, [pc, #8]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004834:	430b      	orrs	r3, r1
 8004836:	6113      	str	r3, [r2, #16]
 8004838:	e00c      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800483a:	bf00      	nop
 800483c:	58024400 	.word	0x58024400
 8004840:	58024800 	.word	0x58024800
 8004844:	00ffffcf 	.word	0x00ffffcf
 8004848:	4bd4      	ldr	r3, [pc, #848]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	4ad3      	ldr	r2, [pc, #844]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800484e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004852:	6113      	str	r3, [r2, #16]
 8004854:	4bd1      	ldr	r3, [pc, #836]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004856:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004858:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800485c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004864:	4acd      	ldr	r2, [pc, #820]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004866:	430b      	orrs	r3, r1
 8004868:	6713      	str	r3, [r2, #112]	@ 0x70
 800486a:	e008      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800486c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004870:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8004874:	e003      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004876:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800487a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800487e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	f002 0301 	and.w	r3, r2, #1
 800488a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800488e:	2300      	movs	r3, #0
 8004890:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004894:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004898:	460b      	mov	r3, r1
 800489a:	4313      	orrs	r3, r2
 800489c:	f000 808b 	beq.w	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80048a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048a8:	2b28      	cmp	r3, #40	@ 0x28
 80048aa:	d86b      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80048ac:	a201      	add	r2, pc, #4	@ (adr r2, 80048b4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	0800498d 	.word	0x0800498d
 80048b8:	08004985 	.word	0x08004985
 80048bc:	08004985 	.word	0x08004985
 80048c0:	08004985 	.word	0x08004985
 80048c4:	08004985 	.word	0x08004985
 80048c8:	08004985 	.word	0x08004985
 80048cc:	08004985 	.word	0x08004985
 80048d0:	08004985 	.word	0x08004985
 80048d4:	08004959 	.word	0x08004959
 80048d8:	08004985 	.word	0x08004985
 80048dc:	08004985 	.word	0x08004985
 80048e0:	08004985 	.word	0x08004985
 80048e4:	08004985 	.word	0x08004985
 80048e8:	08004985 	.word	0x08004985
 80048ec:	08004985 	.word	0x08004985
 80048f0:	08004985 	.word	0x08004985
 80048f4:	0800496f 	.word	0x0800496f
 80048f8:	08004985 	.word	0x08004985
 80048fc:	08004985 	.word	0x08004985
 8004900:	08004985 	.word	0x08004985
 8004904:	08004985 	.word	0x08004985
 8004908:	08004985 	.word	0x08004985
 800490c:	08004985 	.word	0x08004985
 8004910:	08004985 	.word	0x08004985
 8004914:	0800498d 	.word	0x0800498d
 8004918:	08004985 	.word	0x08004985
 800491c:	08004985 	.word	0x08004985
 8004920:	08004985 	.word	0x08004985
 8004924:	08004985 	.word	0x08004985
 8004928:	08004985 	.word	0x08004985
 800492c:	08004985 	.word	0x08004985
 8004930:	08004985 	.word	0x08004985
 8004934:	0800498d 	.word	0x0800498d
 8004938:	08004985 	.word	0x08004985
 800493c:	08004985 	.word	0x08004985
 8004940:	08004985 	.word	0x08004985
 8004944:	08004985 	.word	0x08004985
 8004948:	08004985 	.word	0x08004985
 800494c:	08004985 	.word	0x08004985
 8004950:	08004985 	.word	0x08004985
 8004954:	0800498d 	.word	0x0800498d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004958:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800495c:	3308      	adds	r3, #8
 800495e:	2101      	movs	r1, #1
 8004960:	4618      	mov	r0, r3
 8004962:	f001 fe97 	bl	8006694 <RCCEx_PLL2_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800496c:	e00f      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800496e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004972:	3328      	adds	r3, #40	@ 0x28
 8004974:	2101      	movs	r1, #1
 8004976:	4618      	mov	r0, r3
 8004978:	f001 ff3e 	bl	80067f8 <RCCEx_PLL3_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004982:	e004      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800498a:	e000      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 800498c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800498e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10b      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004996:	4b81      	ldr	r3, [pc, #516]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800499e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a6:	4a7d      	ldr	r2, [pc, #500]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80049a8:	430b      	orrs	r3, r1
 80049aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80049ac:	e003      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80049b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f002 0302 	and.w	r3, r2, #2
 80049c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80049cc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80049d0:	460b      	mov	r3, r1
 80049d2:	4313      	orrs	r3, r2
 80049d4:	d042      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80049d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049dc:	2b05      	cmp	r3, #5
 80049de:	d825      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80049e0:	a201      	add	r2, pc, #4	@ (adr r2, 80049e8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80049e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e6:	bf00      	nop
 80049e8:	08004a35 	.word	0x08004a35
 80049ec:	08004a01 	.word	0x08004a01
 80049f0:	08004a17 	.word	0x08004a17
 80049f4:	08004a35 	.word	0x08004a35
 80049f8:	08004a35 	.word	0x08004a35
 80049fc:	08004a35 	.word	0x08004a35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a04:	3308      	adds	r3, #8
 8004a06:	2101      	movs	r1, #1
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 fe43 	bl	8006694 <RCCEx_PLL2_Config>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a14:	e00f      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a1a:	3328      	adds	r3, #40	@ 0x28
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 feea 	bl	80067f8 <RCCEx_PLL3_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a2a:	e004      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004a32:	e000      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8004a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10a      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a3e:	4b57      	ldr	r3, [pc, #348]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a42:	f023 0107 	bic.w	r1, r3, #7
 8004a46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a4c:	4a53      	ldr	r2, [pc, #332]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a52:	e003      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a54:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a58:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f002 0304 	and.w	r3, r2, #4
 8004a68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	d044      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004a7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d825      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8004a88:	a201      	add	r2, pc, #4	@ (adr r2, 8004a90 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004add 	.word	0x08004add
 8004a94:	08004aa9 	.word	0x08004aa9
 8004a98:	08004abf 	.word	0x08004abf
 8004a9c:	08004add 	.word	0x08004add
 8004aa0:	08004add 	.word	0x08004add
 8004aa4:	08004add 	.word	0x08004add
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004aac:	3308      	adds	r3, #8
 8004aae:	2101      	movs	r1, #1
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 fdef 	bl	8006694 <RCCEx_PLL2_Config>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004abc:	e00f      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004abe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ac2:	3328      	adds	r3, #40	@ 0x28
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f001 fe96 	bl	80067f8 <RCCEx_PLL3_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ad2:	e004      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ade:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10b      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aea:	f023 0107 	bic.w	r1, r3, #7
 8004aee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004af6:	4a29      	ldr	r2, [pc, #164]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004afc:	e003      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0e:	f002 0320 	and.w	r3, r2, #32
 8004b12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b16:	2300      	movs	r3, #0
 8004b18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b20:	460b      	mov	r3, r1
 8004b22:	4313      	orrs	r3, r2
 8004b24:	d057      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b32:	d035      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8004b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b38:	d82c      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b3e:	d031      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b44:	d826      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004b46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b4a:	d02d      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004b4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b50:	d820      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004b52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b56:	d012      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8004b58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b5c:	d81a      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d024      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004b62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b66:	d115      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	2100      	movs	r1, #0
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 fd8f 	bl	8006694 <RCCEx_PLL2_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004b7c:	e017      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b82:	3328      	adds	r3, #40	@ 0x28
 8004b84:	2102      	movs	r1, #2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f001 fe36 	bl	80067f8 <RCCEx_PLL3_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004b92:	e00c      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004b9a:	e008      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8004b9c:	58024400 	.word	0x58024400
        break;
 8004ba0:	bf00      	nop
 8004ba2:	e004      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004ba4:	bf00      	nop
 8004ba6:	e002      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004ba8:	bf00      	nop
 8004baa:	e000      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10b      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bb6:	4bc2      	ldr	r3, [pc, #776]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004bbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bc6:	4abe      	ldr	r2, [pc, #760]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6553      	str	r3, [r2, #84]	@ 0x54
 8004bcc:	e003      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bd2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004be2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004be6:	2300      	movs	r3, #0
 8004be8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004bec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	d055      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004bf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004bfe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004c02:	d033      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004c04:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004c08:	d82c      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c0e:	d02f      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8004c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c14:	d826      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004c16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c1a:	d02b      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004c1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c20:	d820      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c26:	d012      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004c28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c2c:	d81a      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d022      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8004c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c36:	d115      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	2100      	movs	r1, #0
 8004c40:	4618      	mov	r0, r3
 8004c42:	f001 fd27 	bl	8006694 <RCCEx_PLL2_Config>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004c4c:	e015      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c52:	3328      	adds	r3, #40	@ 0x28
 8004c54:	2102      	movs	r1, #2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f001 fdce 	bl	80067f8 <RCCEx_PLL3_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004c62:	e00a      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004c6a:	e006      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004c6c:	bf00      	nop
 8004c6e:	e004      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004c70:	bf00      	nop
 8004c72:	e002      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004c74:	bf00      	nop
 8004c76:	e000      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c82:	4b8f      	ldr	r3, [pc, #572]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c86:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c92:	4a8b      	ldr	r2, [pc, #556]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c94:	430b      	orrs	r3, r1
 8004c96:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c98:	e003      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c9e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004caa:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004cae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cb8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	d055      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004cc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004cce:	d033      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004cd0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004cd4:	d82c      	bhi.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004cd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cda:	d02f      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ce0:	d826      	bhi.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004ce2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004ce6:	d02b      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004ce8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004cec:	d820      	bhi.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004cee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cf2:	d012      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004cf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cf8:	d81a      	bhi.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d022      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8004cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d02:	d115      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d08:	3308      	adds	r3, #8
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f001 fcc1 	bl	8006694 <RCCEx_PLL2_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d18:	e015      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d1e:	3328      	adds	r3, #40	@ 0x28
 8004d20:	2102      	movs	r1, #2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f001 fd68 	bl	80067f8 <RCCEx_PLL3_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d2e:	e00a      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004d36:	e006      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004d38:	bf00      	nop
 8004d3a:	e004      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004d3c:	bf00      	nop
 8004d3e:	e002      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004d40:	bf00      	nop
 8004d42:	e000      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10b      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d52:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004d56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d5e:	4a58      	ldr	r2, [pc, #352]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d64:	e003      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d6a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004d6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f002 0308 	and.w	r3, r2, #8
 8004d7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d84:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	d01e      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004d8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d9a:	d10c      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004da0:	3328      	adds	r3, #40	@ 0x28
 8004da2:	2102      	movs	r1, #2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f001 fd27 	bl	80067f8 <RCCEx_PLL3_Config>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004db6:	4b42      	ldr	r3, [pc, #264]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f002 0310 	and.w	r3, r2, #16
 8004dd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004de2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004de6:	460b      	mov	r3, r1
 8004de8:	4313      	orrs	r3, r2
 8004dea:	d01e      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004dec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004df8:	d10c      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dfe:	3328      	adds	r3, #40	@ 0x28
 8004e00:	2102      	movs	r1, #2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f001 fcf8 	bl	80067f8 <RCCEx_PLL3_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e14:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e18:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e24:	4a26      	ldr	r2, [pc, #152]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e26:	430b      	orrs	r3, r1
 8004e28:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004e36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e40:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004e44:	460b      	mov	r3, r1
 8004e46:	4313      	orrs	r3, r2
 8004e48:	d040      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e56:	d022      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8004e58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e5c:	d81b      	bhi.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8004e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e66:	d00b      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8004e68:	e015      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e6e:	3308      	adds	r3, #8
 8004e70:	2100      	movs	r1, #0
 8004e72:	4618      	mov	r0, r3
 8004e74:	f001 fc0e 	bl	8006694 <RCCEx_PLL2_Config>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004e7e:	e00f      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e84:	3328      	adds	r3, #40	@ 0x28
 8004e86:	2102      	movs	r1, #2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f001 fcb5 	bl	80067f8 <RCCEx_PLL3_Config>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004e94:	e004      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004e9c:	e000      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8004e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ea0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10d      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ea8:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eac:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004eb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004eb8:	4a01      	ldr	r2, [pc, #4]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ebe:	e005      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004ec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ec8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004ed8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004eda:	2300      	movs	r3, #0
 8004edc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ede:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	d03b      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004ee8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ef0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ef4:	d01f      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8004ef6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004efa:	d818      	bhi.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8004efc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f00:	d003      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8004f02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f06:	d007      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8004f08:	e011      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f0a:	4b64      	ldr	r3, [pc, #400]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	4a63      	ldr	r2, [pc, #396]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f16:	e00f      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f1c:	3328      	adds	r3, #40	@ 0x28
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4618      	mov	r0, r3
 8004f22:	f001 fc69 	bl	80067f8 <RCCEx_PLL3_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f2c:	e004      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004f34:	e000      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8004f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10b      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f40:	4b56      	ldr	r3, [pc, #344]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f44:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004f48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f50:	4a52      	ldr	r2, [pc, #328]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004f52:	430b      	orrs	r3, r1
 8004f54:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f56:	e003      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f5c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004f60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004f6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f6e:	2300      	movs	r3, #0
 8004f70:	677b      	str	r3, [r7, #116]	@ 0x74
 8004f72:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004f76:	460b      	mov	r3, r1
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	d031      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004f7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8004f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f8a:	d007      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004f8c:	e011      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f8e:	4b43      	ldr	r3, [pc, #268]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f92:	4a42      	ldr	r2, [pc, #264]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f9a:	e00e      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 fb75 	bl	8006694 <RCCEx_PLL2_Config>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004fb0:	e003      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10a      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004fc2:	4b36      	ldr	r3, [pc, #216]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd0:	4a32      	ldr	r2, [pc, #200]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fd6:	e003      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fdc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004fec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fee:	2300      	movs	r3, #0
 8004ff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ff2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	d00c      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ffc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005000:	3328      	adds	r3, #40	@ 0x28
 8005002:	2102      	movs	r1, #2
 8005004:	4618      	mov	r0, r3
 8005006:	f001 fbf7 	bl	80067f8 <RCCEx_PLL3_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005016:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005022:	663b      	str	r3, [r7, #96]	@ 0x60
 8005024:	2300      	movs	r3, #0
 8005026:	667b      	str	r3, [r7, #100]	@ 0x64
 8005028:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800502c:	460b      	mov	r3, r1
 800502e:	4313      	orrs	r3, r2
 8005030:	d03a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005032:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800503a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800503e:	d018      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8005040:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005044:	d811      	bhi.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800504a:	d014      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800504c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005050:	d80b      	bhi.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d011      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8005056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800505a:	d106      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800505c:	4b0f      	ldr	r3, [pc, #60]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800505e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005060:	4a0e      	ldr	r2, [pc, #56]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005068:	e008      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005070:	e004      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005072:	bf00      	nop
 8005074:	e002      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005076:	bf00      	nop
 8005078:	e000      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800507a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800507c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10d      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005084:	4b05      	ldr	r3, [pc, #20]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005088:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800508c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005094:	4a01      	ldr	r2, [pc, #4]	@ (800509c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005096:	430b      	orrs	r3, r1
 8005098:	6553      	str	r3, [r2, #84]	@ 0x54
 800509a:	e005      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800509c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80050b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050b6:	2300      	movs	r3, #0
 80050b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80050be:	460b      	mov	r3, r1
 80050c0:	4313      	orrs	r3, r2
 80050c2:	d009      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050c4:	4baa      	ldr	r3, [pc, #680]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80050c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80050cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050d2:	4aa7      	ldr	r2, [pc, #668]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80050d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80050e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80050e6:	2300      	movs	r3, #0
 80050e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80050ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80050ee:	460b      	mov	r3, r1
 80050f0:	4313      	orrs	r3, r2
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80050f4:	4b9e      	ldr	r3, [pc, #632]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80050fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005100:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005104:	4a9a      	ldr	r2, [pc, #616]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005106:	430b      	orrs	r3, r1
 8005108:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800510a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005118:	2300      	movs	r3, #0
 800511a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800511c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005120:	460b      	mov	r3, r1
 8005122:	4313      	orrs	r3, r2
 8005124:	d009      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005126:	4b92      	ldr	r3, [pc, #584]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800512a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800512e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005134:	4a8e      	ldr	r2, [pc, #568]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005136:	430b      	orrs	r3, r1
 8005138:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800513a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005146:	643b      	str	r3, [r7, #64]	@ 0x40
 8005148:	2300      	movs	r3, #0
 800514a:	647b      	str	r3, [r7, #68]	@ 0x44
 800514c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005150:	460b      	mov	r3, r1
 8005152:	4313      	orrs	r3, r2
 8005154:	d00e      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005156:	4b86      	ldr	r3, [pc, #536]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	4a85      	ldr	r2, [pc, #532]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800515c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005160:	6113      	str	r3, [r2, #16]
 8005162:	4b83      	ldr	r3, [pc, #524]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005164:	6919      	ldr	r1, [r3, #16]
 8005166:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800516a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800516e:	4a80      	ldr	r2, [pc, #512]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005170:	430b      	orrs	r3, r1
 8005172:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005174:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005180:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005182:	2300      	movs	r3, #0
 8005184:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005186:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800518a:	460b      	mov	r3, r1
 800518c:	4313      	orrs	r3, r2
 800518e:	d009      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005190:	4b77      	ldr	r3, [pc, #476]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005194:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005198:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800519c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519e:	4a74      	ldr	r2, [pc, #464]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051a0:	430b      	orrs	r3, r1
 80051a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80051b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051b2:	2300      	movs	r3, #0
 80051b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80051ba:	460b      	mov	r3, r1
 80051bc:	4313      	orrs	r3, r2
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051c0:	4b6b      	ldr	r3, [pc, #428]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80051c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d0:	4a67      	ldr	r2, [pc, #412]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80051d2:	430b      	orrs	r3, r1
 80051d4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80051d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	2100      	movs	r1, #0
 80051e0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80051ec:	460b      	mov	r3, r1
 80051ee:	4313      	orrs	r3, r2
 80051f0:	d011      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051f6:	3308      	adds	r3, #8
 80051f8:	2100      	movs	r1, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f001 fa4a 	bl	8006694 <RCCEx_PLL2_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005206:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005212:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	2100      	movs	r1, #0
 8005220:	6239      	str	r1, [r7, #32]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
 8005228:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800522c:	460b      	mov	r3, r1
 800522e:	4313      	orrs	r3, r2
 8005230:	d011      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005236:	3308      	adds	r3, #8
 8005238:	2101      	movs	r1, #1
 800523a:	4618      	mov	r0, r3
 800523c:	f001 fa2a 	bl	8006694 <RCCEx_PLL2_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005246:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005252:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005256:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525e:	2100      	movs	r1, #0
 8005260:	61b9      	str	r1, [r7, #24]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	61fb      	str	r3, [r7, #28]
 8005268:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800526c:	460b      	mov	r3, r1
 800526e:	4313      	orrs	r3, r2
 8005270:	d011      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005276:	3308      	adds	r3, #8
 8005278:	2102      	movs	r1, #2
 800527a:	4618      	mov	r0, r3
 800527c:	f001 fa0a 	bl	8006694 <RCCEx_PLL2_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005286:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005292:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005296:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800529a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529e:	2100      	movs	r1, #0
 80052a0:	6139      	str	r1, [r7, #16]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80052ac:	460b      	mov	r3, r1
 80052ae:	4313      	orrs	r3, r2
 80052b0:	d011      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052b6:	3328      	adds	r3, #40	@ 0x28
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 fa9c 	bl	80067f8 <RCCEx_PLL3_Config>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80052c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80052d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	2100      	movs	r1, #0
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80052ec:	460b      	mov	r3, r1
 80052ee:	4313      	orrs	r3, r2
 80052f0:	d011      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052f6:	3328      	adds	r3, #40	@ 0x28
 80052f8:	2101      	movs	r1, #1
 80052fa:	4618      	mov	r0, r3
 80052fc:	f001 fa7c 	bl	80067f8 <RCCEx_PLL3_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005306:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005312:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	2100      	movs	r1, #0
 8005320:	6039      	str	r1, [r7, #0]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	607b      	str	r3, [r7, #4]
 8005328:	e9d7 1200 	ldrd	r1, r2, [r7]
 800532c:	460b      	mov	r3, r1
 800532e:	4313      	orrs	r3, r2
 8005330:	d011      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005332:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005336:	3328      	adds	r3, #40	@ 0x28
 8005338:	2102      	movs	r1, #2
 800533a:	4618      	mov	r0, r3
 800533c:	f001 fa5c 	bl	80067f8 <RCCEx_PLL3_Config>
 8005340:	4603      	mov	r3, r0
 8005342:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005346:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005352:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8005356:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e000      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
}
 8005364:	4618      	mov	r0, r3
 8005366:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800536a:	46bd      	mov	sp, r7
 800536c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005370:	58024400 	.word	0x58024400

08005374 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b090      	sub	sp, #64	@ 0x40
 8005378:	af00      	add	r7, sp, #0
 800537a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800537e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005382:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005386:	430b      	orrs	r3, r1
 8005388:	f040 8094 	bne.w	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800538c:	4b9e      	ldr	r3, [pc, #632]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800538e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005398:	2b04      	cmp	r3, #4
 800539a:	f200 8087 	bhi.w	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800539e:	a201      	add	r2, pc, #4	@ (adr r2, 80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80053a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a4:	080053b9 	.word	0x080053b9
 80053a8:	080053e1 	.word	0x080053e1
 80053ac:	08005409 	.word	0x08005409
 80053b0:	080054a5 	.word	0x080054a5
 80053b4:	08005431 	.word	0x08005431
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053b8:	4b93      	ldr	r3, [pc, #588]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053c4:	d108      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053ca:	4618      	mov	r0, r3
 80053cc:	f001 f810 	bl	80063f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053d4:	f000 bd45 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053dc:	f000 bd41 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053e0:	4b89      	ldr	r3, [pc, #548]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053ec:	d108      	bne.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ee:	f107 0318 	add.w	r3, r7, #24
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fd54 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053fc:	f000 bd31 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005404:	f000 bd2d 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005408:	4b7f      	ldr	r3, [pc, #508]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005414:	d108      	bne.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005416:	f107 030c 	add.w	r3, r7, #12
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fe94 	bl	8006148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005424:	f000 bd1d 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800542c:	f000 bd19 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005430:	4b75      	ldr	r3, [pc, #468]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005434:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005438:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800543a:	4b73      	ldr	r3, [pc, #460]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b04      	cmp	r3, #4
 8005444:	d10c      	bne.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005448:	2b00      	cmp	r3, #0
 800544a:	d109      	bne.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800544c:	4b6e      	ldr	r3, [pc, #440]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	08db      	lsrs	r3, r3, #3
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	4a6d      	ldr	r2, [pc, #436]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
 800545c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800545e:	e01f      	b.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005460:	4b69      	ldr	r3, [pc, #420]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800546c:	d106      	bne.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800546e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005470:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005474:	d102      	bne.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005476:	4b66      	ldr	r3, [pc, #408]	@ (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800547a:	e011      	b.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800547c:	4b62      	ldr	r3, [pc, #392]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005484:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005488:	d106      	bne.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800548a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005490:	d102      	bne.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005492:	4b60      	ldr	r3, [pc, #384]	@ (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005496:	e003      	b.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800549c:	f000 bce1 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80054a0:	f000 bcdf 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80054a4:	4b5c      	ldr	r3, [pc, #368]	@ (8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80054a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054a8:	f000 bcdb 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054b0:	f000 bcd7 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80054b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80054bc:	430b      	orrs	r3, r1
 80054be:	f040 80ad 	bne.w	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80054c2:	4b51      	ldr	r3, [pc, #324]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80054c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80054ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054d2:	d056      	beq.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80054d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054da:	f200 8090 	bhi.w	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80054e2:	f000 8088 	beq.w	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80054e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e8:	2bc0      	cmp	r3, #192	@ 0xc0
 80054ea:	f200 8088 	bhi.w	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80054ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f0:	2b80      	cmp	r3, #128	@ 0x80
 80054f2:	d032      	beq.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	2b80      	cmp	r3, #128	@ 0x80
 80054f8:	f200 8081 	bhi.w	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80054fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005504:	2b40      	cmp	r3, #64	@ 0x40
 8005506:	d014      	beq.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005508:	e079      	b.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800550a:	4b3f      	ldr	r3, [pc, #252]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005512:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005516:	d108      	bne.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800551c:	4618      	mov	r0, r3
 800551e:	f000 ff67 	bl	80063f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005526:	f000 bc9c 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800552a:	2300      	movs	r3, #0
 800552c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800552e:	f000 bc98 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005532:	4b35      	ldr	r3, [pc, #212]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800553a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800553e:	d108      	bne.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005540:	f107 0318 	add.w	r3, r7, #24
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fcab 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800554e:	f000 bc88 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005556:	f000 bc84 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800555a:	4b2b      	ldr	r3, [pc, #172]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005562:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005566:	d108      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005568:	f107 030c 	add.w	r3, r7, #12
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fdeb 	bl	8006148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005576:	f000 bc74 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800557e:	f000 bc70 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005582:	4b21      	ldr	r3, [pc, #132]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005586:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800558a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800558c:	4b1e      	ldr	r3, [pc, #120]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b04      	cmp	r3, #4
 8005596:	d10c      	bne.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800559e:	4b1a      	ldr	r3, [pc, #104]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	08db      	lsrs	r3, r3, #3
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	4a18      	ldr	r2, [pc, #96]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80055aa:	fa22 f303 	lsr.w	r3, r2, r3
 80055ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b0:	e01f      	b.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055b2:	4b15      	ldr	r3, [pc, #84]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055be:	d106      	bne.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80055c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055c6:	d102      	bne.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80055c8:	4b11      	ldr	r3, [pc, #68]	@ (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80055ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055cc:	e011      	b.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055da:	d106      	bne.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80055dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055e2:	d102      	bne.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80055e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80055e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055e8:	e003      	b.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80055ee:	f000 bc38 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80055f2:	f000 bc36 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80055f6:	4b08      	ldr	r3, [pc, #32]	@ (8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80055f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055fa:	f000 bc32 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005602:	f000 bc2e 	b.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005606:	bf00      	nop
 8005608:	58024400 	.word	0x58024400
 800560c:	03d09000 	.word	0x03d09000
 8005610:	003d0900 	.word	0x003d0900
 8005614:	017d7840 	.word	0x017d7840
 8005618:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800561c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005620:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005624:	430b      	orrs	r3, r1
 8005626:	f040 809c 	bne.w	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800562a:	4b9e      	ldr	r3, [pc, #632]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800562c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800562e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005632:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005636:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800563a:	d054      	beq.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005642:	f200 808b 	bhi.w	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800564c:	f000 8083 	beq.w	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005652:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005656:	f200 8081 	bhi.w	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005660:	d02f      	beq.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005664:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005668:	d878      	bhi.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005672:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005676:	d012      	beq.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005678:	e070      	b.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800567a:	4b8a      	ldr	r3, [pc, #552]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005682:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005686:	d107      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800568c:	4618      	mov	r0, r3
 800568e:	f000 feaf 	bl	80063f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005696:	e3e4      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800569c:	e3e1      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800569e:	4b81      	ldr	r3, [pc, #516]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056aa:	d107      	bne.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ac:	f107 0318 	add.w	r3, r7, #24
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fbf5 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056ba:	e3d2      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056c0:	e3cf      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056c2:	4b78      	ldr	r3, [pc, #480]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056ce:	d107      	bne.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056d0:	f107 030c 	add.w	r3, r7, #12
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fd37 	bl	8006148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056de:	e3c0      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056e4:	e3bd      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80056e6:	4b6f      	ldr	r3, [pc, #444]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80056e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056f0:	4b6c      	ldr	r3, [pc, #432]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d10c      	bne.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80056fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005702:	4b68      	ldr	r3, [pc, #416]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	08db      	lsrs	r3, r3, #3
 8005708:	f003 0303 	and.w	r3, r3, #3
 800570c:	4a66      	ldr	r2, [pc, #408]	@ (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800570e:	fa22 f303 	lsr.w	r3, r2, r3
 8005712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005714:	e01e      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005716:	4b63      	ldr	r3, [pc, #396]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800571e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005722:	d106      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800572a:	d102      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800572c:	4b5f      	ldr	r3, [pc, #380]	@ (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800572e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005730:	e010      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005732:	4b5c      	ldr	r3, [pc, #368]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800573e:	d106      	bne.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005746:	d102      	bne.n	800574e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005748:	4b59      	ldr	r3, [pc, #356]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800574a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800574c:	e002      	b.n	8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005752:	e386      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005754:	e385      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005756:	4b57      	ldr	r3, [pc, #348]	@ (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800575a:	e382      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005760:	e37f      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005766:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800576a:	430b      	orrs	r3, r1
 800576c:	f040 80a7 	bne.w	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005770:	4b4c      	ldr	r3, [pc, #304]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005774:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005778:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005780:	d055      	beq.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005784:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005788:	f200 8096 	bhi.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005792:	f000 8084 	beq.w	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800579c:	f200 808c 	bhi.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80057a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057a6:	d030      	beq.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80057a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057ae:	f200 8083 	bhi.w	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80057b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057be:	d012      	beq.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80057c0:	e07a      	b.n	80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057c2:	4b38      	ldr	r3, [pc, #224]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057ce:	d107      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fe0b 	bl	80063f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057de:	e340      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e4:	e33d      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057e6:	4b2f      	ldr	r3, [pc, #188]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057f2:	d107      	bne.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057f4:	f107 0318 	add.w	r3, r7, #24
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fb51 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005802:	e32e      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005808:	e32b      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800580a:	4b26      	ldr	r3, [pc, #152]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005816:	d107      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005818:	f107 030c 	add.w	r3, r7, #12
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fc93 	bl	8006148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005826:	e31c      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800582c:	e319      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800582e:	4b1d      	ldr	r3, [pc, #116]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005832:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005836:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005838:	4b1a      	ldr	r3, [pc, #104]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b04      	cmp	r3, #4
 8005842:	d10c      	bne.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005846:	2b00      	cmp	r3, #0
 8005848:	d109      	bne.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800584a:	4b16      	ldr	r3, [pc, #88]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	08db      	lsrs	r3, r3, #3
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	4a14      	ldr	r2, [pc, #80]	@ (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005856:	fa22 f303 	lsr.w	r3, r2, r3
 800585a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800585c:	e01e      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800585e:	4b11      	ldr	r3, [pc, #68]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800586a:	d106      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800586c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005872:	d102      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005874:	4b0d      	ldr	r3, [pc, #52]	@ (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005878:	e010      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800587a:	4b0a      	ldr	r3, [pc, #40]	@ (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005886:	d106      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800588e:	d102      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005890:	4b07      	ldr	r3, [pc, #28]	@ (80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005894:	e002      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800589a:	e2e2      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800589c:	e2e1      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800589e:	4b05      	ldr	r3, [pc, #20]	@ (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80058a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058a2:	e2de      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80058a4:	58024400 	.word	0x58024400
 80058a8:	03d09000 	.word	0x03d09000
 80058ac:	003d0900 	.word	0x003d0900
 80058b0:	017d7840 	.word	0x017d7840
 80058b4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058bc:	e2d1      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80058be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058c2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80058c6:	430b      	orrs	r3, r1
 80058c8:	f040 809c 	bne.w	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80058cc:	4b93      	ldr	r3, [pc, #588]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80058ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80058d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80058d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058dc:	d054      	beq.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80058de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058e4:	f200 808b 	bhi.w	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80058e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058ee:	f000 8083 	beq.w	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80058f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058f8:	f200 8081 	bhi.w	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80058fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005902:	d02f      	beq.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800590a:	d878      	bhi.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800590c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590e:	2b00      	cmp	r3, #0
 8005910:	d004      	beq.n	800591c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005918:	d012      	beq.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800591a:	e070      	b.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800591c:	4b7f      	ldr	r3, [pc, #508]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005924:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005928:	d107      	bne.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800592a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fd5e 	bl	80063f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005938:	e293      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800593e:	e290      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005940:	4b76      	ldr	r3, [pc, #472]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005948:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800594c:	d107      	bne.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800594e:	f107 0318 	add.w	r3, r7, #24
 8005952:	4618      	mov	r0, r3
 8005954:	f000 faa4 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800595c:	e281      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005962:	e27e      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005964:	4b6d      	ldr	r3, [pc, #436]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800596c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005970:	d107      	bne.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005972:	f107 030c 	add.w	r3, r7, #12
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fbe6 	bl	8006148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005980:	e26f      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005982:	2300      	movs	r3, #0
 8005984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005986:	e26c      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005988:	4b64      	ldr	r3, [pc, #400]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800598a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800598c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005990:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005992:	4b62      	ldr	r3, [pc, #392]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b04      	cmp	r3, #4
 800599c:	d10c      	bne.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800599e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d109      	bne.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059a4:	4b5d      	ldr	r3, [pc, #372]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	08db      	lsrs	r3, r3, #3
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	4a5c      	ldr	r2, [pc, #368]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80059b0:	fa22 f303 	lsr.w	r3, r2, r3
 80059b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059b6:	e01e      	b.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059b8:	4b58      	ldr	r3, [pc, #352]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059c4:	d106      	bne.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80059c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059cc:	d102      	bne.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80059ce:	4b55      	ldr	r3, [pc, #340]	@ (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80059d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059d2:	e010      	b.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059d4:	4b51      	ldr	r3, [pc, #324]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059e0:	d106      	bne.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80059e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059e8:	d102      	bne.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80059ea:	4b4f      	ldr	r3, [pc, #316]	@ (8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80059ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059ee:	e002      	b.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80059f4:	e235      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059f6:	e234      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80059f8:	4b4c      	ldr	r3, [pc, #304]	@ (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80059fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059fc:	e231      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a02:	e22e      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a08:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	f040 808f 	bne.w	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005a12:	4b42      	ldr	r3, [pc, #264]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a16:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a22:	d06b      	beq.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a2a:	d874      	bhi.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a32:	d056      	beq.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a3a:	d86c      	bhi.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a42:	d03b      	beq.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a4a:	d864      	bhi.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a52:	d021      	beq.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a5a:	d85c      	bhi.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d004      	beq.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a68:	d004      	beq.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005a6a:	e054      	b.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005a6c:	f7fe fa22 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 8005a70:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a72:	e1f6      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a74:	4b29      	ldr	r3, [pc, #164]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a80:	d107      	bne.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a82:	f107 0318 	add.w	r3, r7, #24
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fa0a 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a90:	e1e7      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a96:	e1e4      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a98:	4b20      	ldr	r3, [pc, #128]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aa4:	d107      	bne.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aa6:	f107 030c 	add.w	r3, r7, #12
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fb4c 	bl	8006148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ab4:	e1d5      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aba:	e1d2      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005abc:	4b17      	ldr	r3, [pc, #92]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d109      	bne.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ac8:	4b14      	ldr	r3, [pc, #80]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	08db      	lsrs	r3, r3, #3
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	4a13      	ldr	r2, [pc, #76]	@ (8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ada:	e1c2      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ae0:	e1bf      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aee:	d102      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005af0:	4b0c      	ldr	r3, [pc, #48]	@ (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005af4:	e1b5      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005afa:	e1b2      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005afc:	4b07      	ldr	r3, [pc, #28]	@ (8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b08:	d102      	bne.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005b0a:	4b07      	ldr	r3, [pc, #28]	@ (8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b0e:	e1a8      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b14:	e1a5      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b1a:	e1a2      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	03d09000 	.word	0x03d09000
 8005b24:	003d0900 	.word	0x003d0900
 8005b28:	017d7840 	.word	0x017d7840
 8005b2c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b34:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	d173      	bne.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005b3c:	4b9c      	ldr	r3, [pc, #624]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b4c:	d02f      	beq.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b54:	d863      	bhi.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d004      	beq.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b62:	d012      	beq.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005b64:	e05b      	b.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b66:	4b92      	ldr	r3, [pc, #584]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b72:	d107      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b74:	f107 0318 	add.w	r3, r7, #24
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 f991 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b82:	e16e      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b84:	2300      	movs	r3, #0
 8005b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b88:	e16b      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b8a:	4b89      	ldr	r3, [pc, #548]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b96:	d107      	bne.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b98:	f107 030c 	add.w	r3, r7, #12
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 fad3 	bl	8006148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ba6:	e15c      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bac:	e159      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005bae:	4b80      	ldr	r3, [pc, #512]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005bb6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bb8:	4b7d      	ldr	r3, [pc, #500]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d10c      	bne.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d109      	bne.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bca:	4b79      	ldr	r3, [pc, #484]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	08db      	lsrs	r3, r3, #3
 8005bd0:	f003 0303 	and.w	r3, r3, #3
 8005bd4:	4a77      	ldr	r2, [pc, #476]	@ (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bdc:	e01e      	b.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bde:	4b74      	ldr	r3, [pc, #464]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bea:	d106      	bne.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bf2:	d102      	bne.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005bf4:	4b70      	ldr	r3, [pc, #448]	@ (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bf8:	e010      	b.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c06:	d106      	bne.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c0e:	d102      	bne.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c10:	4b6a      	ldr	r3, [pc, #424]	@ (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c14:	e002      	b.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005c1a:	e122      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c1c:	e121      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c22:	e11e      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005c24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c28:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	d133      	bne.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005c30:	4b5f      	ldr	r3, [pc, #380]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c38:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d004      	beq.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c46:	d012      	beq.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005c48:	e023      	b.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c4a:	4b59      	ldr	r3, [pc, #356]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c56:	d107      	bne.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fbc7 	bl	80063f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c66:	e0fc      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c6c:	e0f9      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c6e:	4b50      	ldr	r3, [pc, #320]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c7a:	d107      	bne.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c7c:	f107 0318 	add.w	r3, r7, #24
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 f90d 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c8a:	e0ea      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c90:	e0e7      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c96:	e0e4      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c9c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	f040 808d 	bne.w	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005ca6:	4b42      	ldr	r3, [pc, #264]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005caa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005cae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cb6:	d06b      	beq.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cbe:	d874      	bhi.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cc6:	d056      	beq.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cce:	d86c      	bhi.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005cd6:	d03b      	beq.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005cde:	d864      	bhi.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ce6:	d021      	beq.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cee:	d85c      	bhi.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cfc:	d004      	beq.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005cfe:	e054      	b.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005d00:	f000 f8b8 	bl	8005e74 <HAL_RCCEx_GetD3PCLK1Freq>
 8005d04:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d06:	e0ac      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d08:	4b29      	ldr	r3, [pc, #164]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d14:	d107      	bne.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d16:	f107 0318 	add.w	r3, r7, #24
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 f8c0 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d24:	e09d      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d2a:	e09a      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d2c:	4b20      	ldr	r3, [pc, #128]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d38:	d107      	bne.n	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d3a:	f107 030c 	add.w	r3, r7, #12
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fa02 	bl	8006148 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d48:	e08b      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d4e:	e088      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d50:	4b17      	ldr	r3, [pc, #92]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d109      	bne.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d5c:	4b14      	ldr	r3, [pc, #80]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	08db      	lsrs	r3, r3, #3
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	4a13      	ldr	r2, [pc, #76]	@ (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005d68:	fa22 f303 	lsr.w	r3, r2, r3
 8005d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d6e:	e078      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d74:	e075      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005d76:	4b0e      	ldr	r3, [pc, #56]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d82:	d102      	bne.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005d84:	4b0c      	ldr	r3, [pc, #48]	@ (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d88:	e06b      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d8e:	e068      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d90:	4b07      	ldr	r3, [pc, #28]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d9c:	d102      	bne.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005d9e:	4b07      	ldr	r3, [pc, #28]	@ (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005da2:	e05e      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005da4:	2300      	movs	r3, #0
 8005da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005da8:	e05b      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dae:	e058      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005db0:	58024400 	.word	0x58024400
 8005db4:	03d09000 	.word	0x03d09000
 8005db8:	003d0900 	.word	0x003d0900
 8005dbc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dc4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	d148      	bne.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005dcc:	4b27      	ldr	r3, [pc, #156]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005dd4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ddc:	d02a      	beq.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005de4:	d838      	bhi.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005df2:	d00d      	beq.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005df4:	e030      	b.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005df6:	4b1d      	ldr	r3, [pc, #116]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e02:	d102      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005e04:	4b1a      	ldr	r3, [pc, #104]	@ (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e08:	e02b      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e0e:	e028      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e10:	4b16      	ldr	r3, [pc, #88]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e1c:	d107      	bne.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fae4 	bl	80063f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e2c:	e019      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e32:	e016      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e34:	4b0d      	ldr	r3, [pc, #52]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e40:	d107      	bne.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e42:	f107 0318 	add.w	r3, r7, #24
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 f82a 	bl	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e50:	e007      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e56:	e004      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e5c:	e001      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3740      	adds	r7, #64	@ 0x40
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	58024400 	.word	0x58024400
 8005e70:	017d7840 	.word	0x017d7840

08005e74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005e78:	f7fd ffec 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	4b06      	ldr	r3, [pc, #24]	@ (8005e98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	091b      	lsrs	r3, r3, #4
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	4904      	ldr	r1, [pc, #16]	@ (8005e9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e8a:	5ccb      	ldrb	r3, [r1, r3]
 8005e8c:	f003 031f 	and.w	r3, r3, #31
 8005e90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	58024400 	.word	0x58024400
 8005e9c:	0800ca18 	.word	0x0800ca18

08005ea0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b089      	sub	sp, #36	@ 0x24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ea8:	4ba1      	ldr	r3, [pc, #644]	@ (8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eac:	f003 0303 	and.w	r3, r3, #3
 8005eb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005eb2:	4b9f      	ldr	r3, [pc, #636]	@ (8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb6:	0b1b      	lsrs	r3, r3, #12
 8005eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ebc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ebe:	4b9c      	ldr	r3, [pc, #624]	@ (8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec2:	091b      	lsrs	r3, r3, #4
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005eca:	4b99      	ldr	r3, [pc, #612]	@ (8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ece:	08db      	lsrs	r3, r3, #3
 8005ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	fb02 f303 	mul.w	r3, r2, r3
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 8111 	beq.w	8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	f000 8083 	beq.w	8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	f200 80a1 	bhi.w	8006040 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d056      	beq.n	8005fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005f0a:	e099      	b.n	8006040 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f0c:	4b88      	ldr	r3, [pc, #544]	@ (8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0320 	and.w	r3, r3, #32
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d02d      	beq.n	8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f18:	4b85      	ldr	r3, [pc, #532]	@ (8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	08db      	lsrs	r3, r3, #3
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	4a84      	ldr	r2, [pc, #528]	@ (8006134 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005f24:	fa22 f303 	lsr.w	r3, r2, r3
 8005f28:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	ee07 3a90 	vmov	s15, r3
 8005f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f42:	4b7b      	ldr	r3, [pc, #492]	@ (8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006138 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f72:	e087      	b.n	8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800613c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f86:	4b6a      	ldr	r3, [pc, #424]	@ (8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006138 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fb6:	e065      	b.n	8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006140 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fca:	4b59      	ldr	r3, [pc, #356]	@ (8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fde:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006138 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ffa:	e043      	b.n	8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006006:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006144 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800600a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800600e:	4b48      	ldr	r3, [pc, #288]	@ (8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006022:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006138 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800602a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800603e:	e021      	b.n	8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006140 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800604e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006052:	4b37      	ldr	r3, [pc, #220]	@ (8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006062:	ed97 6a03 	vldr	s12, [r7, #12]
 8006066:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006138 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800606a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800607a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006082:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006084:	4b2a      	ldr	r3, [pc, #168]	@ (8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006088:	0a5b      	lsrs	r3, r3, #9
 800608a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800609a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800609e:	edd7 6a07 	vldr	s13, [r7, #28]
 80060a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060aa:	ee17 2a90 	vmov	r2, s15
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80060b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b6:	0c1b      	lsrs	r3, r3, #16
 80060b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060bc:	ee07 3a90 	vmov	s15, r3
 80060c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80060d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060d8:	ee17 2a90 	vmov	r2, s15
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80060e0:	4b13      	ldr	r3, [pc, #76]	@ (8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e4:	0e1b      	lsrs	r3, r3, #24
 80060e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80060fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006106:	ee17 2a90 	vmov	r2, s15
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800610e:	e008      	b.n	8006122 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	609a      	str	r2, [r3, #8]
}
 8006122:	bf00      	nop
 8006124:	3724      	adds	r7, #36	@ 0x24
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	58024400 	.word	0x58024400
 8006134:	03d09000 	.word	0x03d09000
 8006138:	46000000 	.word	0x46000000
 800613c:	4c742400 	.word	0x4c742400
 8006140:	4a742400 	.word	0x4a742400
 8006144:	4bbebc20 	.word	0x4bbebc20

08006148 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006148:	b480      	push	{r7}
 800614a:	b089      	sub	sp, #36	@ 0x24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006150:	4ba1      	ldr	r3, [pc, #644]	@ (80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006154:	f003 0303 	and.w	r3, r3, #3
 8006158:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800615a:	4b9f      	ldr	r3, [pc, #636]	@ (80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800615c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615e:	0d1b      	lsrs	r3, r3, #20
 8006160:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006164:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006166:	4b9c      	ldr	r3, [pc, #624]	@ (80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616a:	0a1b      	lsrs	r3, r3, #8
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006172:	4b99      	ldr	r3, [pc, #612]	@ (80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006176:	08db      	lsrs	r3, r3, #3
 8006178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	fb02 f303 	mul.w	r3, r2, r3
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 8111 	beq.w	80063b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	2b02      	cmp	r3, #2
 800619a:	f000 8083 	beq.w	80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	f200 80a1 	bhi.w	80062e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d056      	beq.n	8006260 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80061b2:	e099      	b.n	80062e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061b4:	4b88      	ldr	r3, [pc, #544]	@ (80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d02d      	beq.n	800621c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061c0:	4b85      	ldr	r3, [pc, #532]	@ (80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	08db      	lsrs	r3, r3, #3
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	4a84      	ldr	r2, [pc, #528]	@ (80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80061cc:	fa22 f303 	lsr.w	r3, r2, r3
 80061d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	ee07 3a90 	vmov	s15, r3
 80061d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	ee07 3a90 	vmov	s15, r3
 80061e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ea:	4b7b      	ldr	r3, [pc, #492]	@ (80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80061fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80063e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800620a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800620e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006216:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800621a:	e087      	b.n	800632c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006226:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80063e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800622a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800622e:	4b6a      	ldr	r3, [pc, #424]	@ (80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006242:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80063e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800624a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800625e:	e065      	b.n	800632c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800626e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006272:	4b59      	ldr	r3, [pc, #356]	@ (80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006282:	ed97 6a03 	vldr	s12, [r7, #12]
 8006286:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80063e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800628a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800628e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062a2:	e043      	b.n	800632c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	ee07 3a90 	vmov	s15, r3
 80062aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80063ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80062b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b6:	4b48      	ldr	r3, [pc, #288]	@ (80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80063e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062e6:	e021      	b.n	800632c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80062f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062fa:	4b37      	ldr	r3, [pc, #220]	@ (80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006302:	ee07 3a90 	vmov	s15, r3
 8006306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630a:	ed97 6a03 	vldr	s12, [r7, #12]
 800630e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80063e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800631a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800631e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800632a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800632c:	4b2a      	ldr	r3, [pc, #168]	@ (80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800632e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006330:	0a5b      	lsrs	r3, r3, #9
 8006332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006342:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006346:	edd7 6a07 	vldr	s13, [r7, #28]
 800634a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800634e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006352:	ee17 2a90 	vmov	r2, s15
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800635a:	4b1f      	ldr	r3, [pc, #124]	@ (80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800635c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635e:	0c1b      	lsrs	r3, r3, #16
 8006360:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006364:	ee07 3a90 	vmov	s15, r3
 8006368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006370:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006374:	edd7 6a07 	vldr	s13, [r7, #28]
 8006378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800637c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006380:	ee17 2a90 	vmov	r2, s15
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006388:	4b13      	ldr	r3, [pc, #76]	@ (80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800638a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638c:	0e1b      	lsrs	r3, r3, #24
 800638e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800639e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ae:	ee17 2a90 	vmov	r2, s15
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80063b6:	e008      	b.n	80063ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	609a      	str	r2, [r3, #8]
}
 80063ca:	bf00      	nop
 80063cc:	3724      	adds	r7, #36	@ 0x24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	58024400 	.word	0x58024400
 80063dc:	03d09000 	.word	0x03d09000
 80063e0:	46000000 	.word	0x46000000
 80063e4:	4c742400 	.word	0x4c742400
 80063e8:	4a742400 	.word	0x4a742400
 80063ec:	4bbebc20 	.word	0x4bbebc20

080063f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b089      	sub	sp, #36	@ 0x24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063f8:	4ba0      	ldr	r3, [pc, #640]	@ (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fc:	f003 0303 	and.w	r3, r3, #3
 8006400:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006402:	4b9e      	ldr	r3, [pc, #632]	@ (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006406:	091b      	lsrs	r3, r3, #4
 8006408:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800640c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800640e:	4b9b      	ldr	r3, [pc, #620]	@ (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006418:	4b98      	ldr	r3, [pc, #608]	@ (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800641a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800641c:	08db      	lsrs	r3, r3, #3
 800641e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	fb02 f303 	mul.w	r3, r2, r3
 8006428:	ee07 3a90 	vmov	s15, r3
 800642c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006430:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 8111 	beq.w	800665e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	2b02      	cmp	r3, #2
 8006440:	f000 8083 	beq.w	800654a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2b02      	cmp	r3, #2
 8006448:	f200 80a1 	bhi.w	800658e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d056      	beq.n	8006506 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006458:	e099      	b.n	800658e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800645a:	4b88      	ldr	r3, [pc, #544]	@ (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b00      	cmp	r3, #0
 8006464:	d02d      	beq.n	80064c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006466:	4b85      	ldr	r3, [pc, #532]	@ (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	08db      	lsrs	r3, r3, #3
 800646c:	f003 0303 	and.w	r3, r3, #3
 8006470:	4a83      	ldr	r2, [pc, #524]	@ (8006680 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006472:	fa22 f303 	lsr.w	r3, r2, r3
 8006476:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	ee07 3a90 	vmov	s15, r3
 8006488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006490:	4b7a      	ldr	r3, [pc, #488]	@ (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006498:	ee07 3a90 	vmov	s15, r3
 800649c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80064a4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006684 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80064a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064bc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80064c0:	e087      	b.n	80065d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	ee07 3a90 	vmov	s15, r3
 80064c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064cc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006688 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80064d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d4:	4b69      	ldr	r3, [pc, #420]	@ (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064dc:	ee07 3a90 	vmov	s15, r3
 80064e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80064e8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006684 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80064ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006500:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006504:	e065      	b.n	80065d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	ee07 3a90 	vmov	s15, r3
 800650c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006510:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800668c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006518:	4b58      	ldr	r3, [pc, #352]	@ (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800651a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006520:	ee07 3a90 	vmov	s15, r3
 8006524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006528:	ed97 6a03 	vldr	s12, [r7, #12]
 800652c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006684 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006538:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800653c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006544:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006548:	e043      	b.n	80065d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	ee07 3a90 	vmov	s15, r3
 8006550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006554:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006690 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800655c:	4b47      	ldr	r3, [pc, #284]	@ (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800655e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006564:	ee07 3a90 	vmov	s15, r3
 8006568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800656c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006570:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006684 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800657c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006588:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800658c:	e021      	b.n	80065d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	ee07 3a90 	vmov	s15, r3
 8006594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006598:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006688 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800659c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a0:	4b36      	ldr	r3, [pc, #216]	@ (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a8:	ee07 3a90 	vmov	s15, r3
 80065ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80065b4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006684 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80065b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80065d2:	4b2a      	ldr	r3, [pc, #168]	@ (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d6:	0a5b      	lsrs	r3, r3, #9
 80065d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065dc:	ee07 3a90 	vmov	s15, r3
 80065e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80065f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065f8:	ee17 2a90 	vmov	r2, s15
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006600:	4b1e      	ldr	r3, [pc, #120]	@ (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006604:	0c1b      	lsrs	r3, r3, #16
 8006606:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006612:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006616:	ee37 7a87 	vadd.f32	s14, s15, s14
 800661a:	edd7 6a07 	vldr	s13, [r7, #28]
 800661e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006626:	ee17 2a90 	vmov	r2, s15
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800662e:	4b13      	ldr	r3, [pc, #76]	@ (800667c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006632:	0e1b      	lsrs	r3, r3, #24
 8006634:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006640:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006644:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006648:	edd7 6a07 	vldr	s13, [r7, #28]
 800664c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006654:	ee17 2a90 	vmov	r2, s15
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800665c:	e008      	b.n	8006670 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	609a      	str	r2, [r3, #8]
}
 8006670:	bf00      	nop
 8006672:	3724      	adds	r7, #36	@ 0x24
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	58024400 	.word	0x58024400
 8006680:	03d09000 	.word	0x03d09000
 8006684:	46000000 	.word	0x46000000
 8006688:	4c742400 	.word	0x4c742400
 800668c:	4a742400 	.word	0x4a742400
 8006690:	4bbebc20 	.word	0x4bbebc20

08006694 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066a2:	4b53      	ldr	r3, [pc, #332]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 80066a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d101      	bne.n	80066b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e099      	b.n	80067e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80066b2:	4b4f      	ldr	r3, [pc, #316]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a4e      	ldr	r2, [pc, #312]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 80066b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066be:	f7fa fc1d 	bl	8000efc <HAL_GetTick>
 80066c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066c4:	e008      	b.n	80066d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80066c6:	f7fa fc19 	bl	8000efc <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e086      	b.n	80067e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066d8:	4b45      	ldr	r3, [pc, #276]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1f0      	bne.n	80066c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80066e4:	4b42      	ldr	r3, [pc, #264]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 80066e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	031b      	lsls	r3, r3, #12
 80066f2:	493f      	ldr	r1, [pc, #252]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	3b01      	subs	r3, #1
 8006708:	025b      	lsls	r3, r3, #9
 800670a:	b29b      	uxth	r3, r3
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	3b01      	subs	r3, #1
 8006714:	041b      	lsls	r3, r3, #16
 8006716:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	3b01      	subs	r3, #1
 8006722:	061b      	lsls	r3, r3, #24
 8006724:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006728:	4931      	ldr	r1, [pc, #196]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 800672a:	4313      	orrs	r3, r2
 800672c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800672e:	4b30      	ldr	r3, [pc, #192]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 8006730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006732:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	492d      	ldr	r1, [pc, #180]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 800673c:	4313      	orrs	r3, r2
 800673e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006740:	4b2b      	ldr	r3, [pc, #172]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 8006742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006744:	f023 0220 	bic.w	r2, r3, #32
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	4928      	ldr	r1, [pc, #160]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 800674e:	4313      	orrs	r3, r2
 8006750:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006752:	4b27      	ldr	r3, [pc, #156]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 8006754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006756:	4a26      	ldr	r2, [pc, #152]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 8006758:	f023 0310 	bic.w	r3, r3, #16
 800675c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800675e:	4b24      	ldr	r3, [pc, #144]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 8006760:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006762:	4b24      	ldr	r3, [pc, #144]	@ (80067f4 <RCCEx_PLL2_Config+0x160>)
 8006764:	4013      	ands	r3, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	69d2      	ldr	r2, [r2, #28]
 800676a:	00d2      	lsls	r2, r2, #3
 800676c:	4920      	ldr	r1, [pc, #128]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 800676e:	4313      	orrs	r3, r2
 8006770:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006772:	4b1f      	ldr	r3, [pc, #124]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 8006774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006776:	4a1e      	ldr	r2, [pc, #120]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 8006778:	f043 0310 	orr.w	r3, r3, #16
 800677c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d106      	bne.n	8006792 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006784:	4b1a      	ldr	r3, [pc, #104]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006788:	4a19      	ldr	r2, [pc, #100]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 800678a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800678e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006790:	e00f      	b.n	80067b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d106      	bne.n	80067a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006798:	4b15      	ldr	r3, [pc, #84]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 800679a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679c:	4a14      	ldr	r2, [pc, #80]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 800679e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80067a4:	e005      	b.n	80067b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80067a6:	4b12      	ldr	r3, [pc, #72]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 80067a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067aa:	4a11      	ldr	r2, [pc, #68]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 80067ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80067b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80067b2:	4b0f      	ldr	r3, [pc, #60]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a0e      	ldr	r2, [pc, #56]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 80067b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80067bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067be:	f7fa fb9d 	bl	8000efc <HAL_GetTick>
 80067c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80067c4:	e008      	b.n	80067d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067c6:	f7fa fb99 	bl	8000efc <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e006      	b.n	80067e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80067d8:	4b05      	ldr	r3, [pc, #20]	@ (80067f0 <RCCEx_PLL2_Config+0x15c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0f0      	beq.n	80067c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	58024400 	.word	0x58024400
 80067f4:	ffff0007 	.word	0xffff0007

080067f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006806:	4b53      	ldr	r3, [pc, #332]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 8006808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	2b03      	cmp	r3, #3
 8006810:	d101      	bne.n	8006816 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e099      	b.n	800694a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006816:	4b4f      	ldr	r3, [pc, #316]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a4e      	ldr	r2, [pc, #312]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 800681c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006822:	f7fa fb6b 	bl	8000efc <HAL_GetTick>
 8006826:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006828:	e008      	b.n	800683c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800682a:	f7fa fb67 	bl	8000efc <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e086      	b.n	800694a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800683c:	4b45      	ldr	r3, [pc, #276]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1f0      	bne.n	800682a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006848:	4b42      	ldr	r3, [pc, #264]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 800684a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	051b      	lsls	r3, r3, #20
 8006856:	493f      	ldr	r1, [pc, #252]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 8006858:	4313      	orrs	r3, r2
 800685a:	628b      	str	r3, [r1, #40]	@ 0x28
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	3b01      	subs	r3, #1
 8006862:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	3b01      	subs	r3, #1
 800686c:	025b      	lsls	r3, r3, #9
 800686e:	b29b      	uxth	r3, r3
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	3b01      	subs	r3, #1
 8006878:	041b      	lsls	r3, r3, #16
 800687a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	3b01      	subs	r3, #1
 8006886:	061b      	lsls	r3, r3, #24
 8006888:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800688c:	4931      	ldr	r1, [pc, #196]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 800688e:	4313      	orrs	r3, r2
 8006890:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006892:	4b30      	ldr	r3, [pc, #192]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 8006894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006896:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	492d      	ldr	r1, [pc, #180]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80068a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 80068a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	4928      	ldr	r1, [pc, #160]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80068b6:	4b27      	ldr	r3, [pc, #156]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 80068b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ba:	4a26      	ldr	r2, [pc, #152]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 80068bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80068c2:	4b24      	ldr	r3, [pc, #144]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 80068c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068c6:	4b24      	ldr	r3, [pc, #144]	@ (8006958 <RCCEx_PLL3_Config+0x160>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	69d2      	ldr	r2, [r2, #28]
 80068ce:	00d2      	lsls	r2, r2, #3
 80068d0:	4920      	ldr	r1, [pc, #128]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80068d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 80068d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068da:	4a1e      	ldr	r2, [pc, #120]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 80068dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80068e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 80068ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ec:	4a19      	ldr	r2, [pc, #100]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 80068ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80068f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068f4:	e00f      	b.n	8006916 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d106      	bne.n	800690a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80068fc:	4b15      	ldr	r3, [pc, #84]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 80068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006900:	4a14      	ldr	r2, [pc, #80]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 8006902:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006906:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006908:	e005      	b.n	8006916 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800690a:	4b12      	ldr	r3, [pc, #72]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 800690c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690e:	4a11      	ldr	r2, [pc, #68]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 8006910:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006914:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006916:	4b0f      	ldr	r3, [pc, #60]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a0e      	ldr	r2, [pc, #56]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 800691c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006922:	f7fa faeb 	bl	8000efc <HAL_GetTick>
 8006926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006928:	e008      	b.n	800693c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800692a:	f7fa fae7 	bl	8000efc <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d901      	bls.n	800693c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e006      	b.n	800694a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800693c:	4b05      	ldr	r3, [pc, #20]	@ (8006954 <RCCEx_PLL3_Config+0x15c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0f0      	beq.n	800692a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006948:	7bfb      	ldrb	r3, [r7, #15]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	58024400 	.word	0x58024400
 8006958:	ffff0007 	.word	0xffff0007

0800695c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08a      	sub	sp, #40	@ 0x28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e28e      	b.n	8006e8c <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800696e:	f7fa fad1 	bl	8000f14 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006978:	2b01      	cmp	r3, #1
 800697a:	d113      	bne.n	80069a4 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a96      	ldr	r2, [pc, #600]	@ (8006bdc <HAL_SAI_Init+0x280>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d004      	beq.n	8006990 <HAL_SAI_Init+0x34>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a95      	ldr	r2, [pc, #596]	@ (8006be0 <HAL_SAI_Init+0x284>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d107      	bne.n	80069a0 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8006994:	2b01      	cmp	r3, #1
 8006996:	d103      	bne.n	80069a0 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e273      	b.n	8006e8c <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a8c      	ldr	r2, [pc, #560]	@ (8006bdc <HAL_SAI_Init+0x280>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d004      	beq.n	80069b8 <HAL_SAI_Init+0x5c>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a8c      	ldr	r2, [pc, #560]	@ (8006be4 <HAL_SAI_Init+0x288>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d102      	bne.n	80069be <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 80069b8:	4b8b      	ldr	r3, [pc, #556]	@ (8006be8 <HAL_SAI_Init+0x28c>)
 80069ba:	61bb      	str	r3, [r7, #24]
 80069bc:	e028      	b.n	8006a10 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a8a      	ldr	r2, [pc, #552]	@ (8006bec <HAL_SAI_Init+0x290>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d004      	beq.n	80069d2 <HAL_SAI_Init+0x76>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a88      	ldr	r2, [pc, #544]	@ (8006bf0 <HAL_SAI_Init+0x294>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d102      	bne.n	80069d8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 80069d2:	4b88      	ldr	r3, [pc, #544]	@ (8006bf4 <HAL_SAI_Init+0x298>)
 80069d4:	61bb      	str	r3, [r7, #24]
 80069d6:	e01b      	b.n	8006a10 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a86      	ldr	r2, [pc, #536]	@ (8006bf8 <HAL_SAI_Init+0x29c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d004      	beq.n	80069ec <HAL_SAI_Init+0x90>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a85      	ldr	r2, [pc, #532]	@ (8006bfc <HAL_SAI_Init+0x2a0>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d102      	bne.n	80069f2 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 80069ec:	4b84      	ldr	r3, [pc, #528]	@ (8006c00 <HAL_SAI_Init+0x2a4>)
 80069ee:	61bb      	str	r3, [r7, #24]
 80069f0:	e00e      	b.n	8006a10 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a7a      	ldr	r2, [pc, #488]	@ (8006be0 <HAL_SAI_Init+0x284>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d004      	beq.n	8006a06 <HAL_SAI_Init+0xaa>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a80      	ldr	r2, [pc, #512]	@ (8006c04 <HAL_SAI_Init+0x2a8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d102      	bne.n	8006a0c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8006a06:	4b80      	ldr	r3, [pc, #512]	@ (8006c08 <HAL_SAI_Init+0x2ac>)
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	e001      	b.n	8006a10 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e23d      	b.n	8006e8c <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7fa f80f 	bl	8000a48 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fa40 	bl	8006eb0 <SAI_Disable>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e228      	b.n	8006e8c <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d00c      	beq.n	8006a64 <HAL_SAI_Init+0x108>
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d80d      	bhi.n	8006a6a <HAL_SAI_Init+0x10e>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <HAL_SAI_Init+0xfc>
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d003      	beq.n	8006a5e <HAL_SAI_Init+0x102>
 8006a56:	e008      	b.n	8006a6a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006a5c:	e008      	b.n	8006a70 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006a5e:	2310      	movs	r3, #16
 8006a60:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006a62:	e005      	b.n	8006a70 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006a64:	2320      	movs	r3, #32
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006a68:	e002      	b.n	8006a70 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006a6e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	2b05      	cmp	r3, #5
 8006a76:	d832      	bhi.n	8006ade <HAL_SAI_Init+0x182>
 8006a78:	a201      	add	r2, pc, #4	@ (adr r2, 8006a80 <HAL_SAI_Init+0x124>)
 8006a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7e:	bf00      	nop
 8006a80:	08006a99 	.word	0x08006a99
 8006a84:	08006a9f 	.word	0x08006a9f
 8006a88:	08006aa7 	.word	0x08006aa7
 8006a8c:	08006aaf 	.word	0x08006aaf
 8006a90:	08006abf 	.word	0x08006abf
 8006a94:	08006acf 	.word	0x08006acf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61fb      	str	r3, [r7, #28]
      break;
 8006a9c:	e022      	b.n	8006ae4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006aa2:	61fb      	str	r3, [r7, #28]
      break;
 8006aa4:	e01e      	b.n	8006ae4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006aa6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006aaa:	61fb      	str	r3, [r7, #28]
      break;
 8006aac:	e01a      	b.n	8006ae4 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006aae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006ab2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	f043 0301 	orr.w	r3, r3, #1
 8006aba:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006abc:	e012      	b.n	8006ae4 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006abe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006ac2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac6:	f043 0302 	orr.w	r3, r3, #2
 8006aca:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006acc:	e00a      	b.n	8006ae4 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006ace:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006ad2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	f043 0303 	orr.w	r3, r3, #3
 8006ada:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8006adc:	e002      	b.n	8006ae4 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61fb      	str	r3, [r7, #28]
      break;
 8006ae2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ae8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 80c5 	beq.w	8006c7e <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a37      	ldr	r2, [pc, #220]	@ (8006bdc <HAL_SAI_Init+0x280>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_SAI_Init+0x1b0>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a37      	ldr	r2, [pc, #220]	@ (8006be4 <HAL_SAI_Init+0x288>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d106      	bne.n	8006b1a <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006b0c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006b10:	f04f 0100 	mov.w	r1, #0
 8006b14:	f7fe fc2e 	bl	8005374 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b18:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a33      	ldr	r2, [pc, #204]	@ (8006bec <HAL_SAI_Init+0x290>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d004      	beq.n	8006b2e <HAL_SAI_Init+0x1d2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a31      	ldr	r2, [pc, #196]	@ (8006bf0 <HAL_SAI_Init+0x294>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d106      	bne.n	8006b3c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006b2e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006b32:	f04f 0100 	mov.w	r1, #0
 8006b36:	f7fe fc1d 	bl	8005374 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b3a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a2d      	ldr	r2, [pc, #180]	@ (8006bf8 <HAL_SAI_Init+0x29c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d004      	beq.n	8006b50 <HAL_SAI_Init+0x1f4>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a2c      	ldr	r2, [pc, #176]	@ (8006bfc <HAL_SAI_Init+0x2a0>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d106      	bne.n	8006b5e <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8006b50:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006b54:	f04f 0100 	mov.w	r1, #0
 8006b58:	f7fe fc0c 	bl	8005374 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b5c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1f      	ldr	r2, [pc, #124]	@ (8006be0 <HAL_SAI_Init+0x284>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d106      	bne.n	8006b76 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8006b68:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006b6c:	f04f 0100 	mov.w	r1, #0
 8006b70:	f7fe fc00 	bl	8005374 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b74:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a22      	ldr	r2, [pc, #136]	@ (8006c04 <HAL_SAI_Init+0x2a8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d106      	bne.n	8006b8e <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8006b80:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006b84:	f04f 0100 	mov.w	r1, #0
 8006b88:	f7fe fbf4 	bl	8005374 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b8c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006b96:	d139      	bne.n	8006c0c <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d102      	bne.n	8006ba6 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8006ba0:	2340      	movs	r3, #64	@ 0x40
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	e00a      	b.n	8006bbc <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006baa:	2b08      	cmp	r3, #8
 8006bac:	d103      	bne.n	8006bb6 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8006bae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	e002      	b.n	8006bbc <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bba:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	fb02 f303 	mul.w	r3, r2, r3
 8006bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bd6:	613b      	str	r3, [r7, #16]
 8006bd8:	e030      	b.n	8006c3c <HAL_SAI_Init+0x2e0>
 8006bda:	bf00      	nop
 8006bdc:	40015804 	.word	0x40015804
 8006be0:	58005404 	.word	0x58005404
 8006be4:	40015824 	.word	0x40015824
 8006be8:	40015800 	.word	0x40015800
 8006bec:	40015c04 	.word	0x40015c04
 8006bf0:	40015c24 	.word	0x40015c24
 8006bf4:	40015c00 	.word	0x40015c00
 8006bf8:	40016004 	.word	0x40016004
 8006bfc:	40016024 	.word	0x40016024
 8006c00:	40016000 	.word	0x40016000
 8006c04:	58005424 	.word	0x58005424
 8006c08:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c14:	d101      	bne.n	8006c1a <HAL_SAI_Init+0x2be>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e000      	b.n	8006c1c <HAL_SAI_Init+0x2c0>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	4619      	mov	r1, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	fb02 f303 	mul.w	r3, r2, r3
 8006c34:	021b      	lsls	r3, r3, #8
 8006c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c3a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	4a95      	ldr	r2, [pc, #596]	@ (8006e94 <HAL_SAI_Init+0x538>)
 8006c40:	fba2 2303 	umull	r2, r3, r2, r3
 8006c44:	08da      	lsrs	r2, r3, #3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8006c4a:	6939      	ldr	r1, [r7, #16]
 8006c4c:	4b91      	ldr	r3, [pc, #580]	@ (8006e94 <HAL_SAI_Init+0x538>)
 8006c4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006c52:	08da      	lsrs	r2, r3, #3
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	1aca      	subs	r2, r1, r3
 8006c5e:	2a08      	cmp	r2, #8
 8006c60:	d904      	bls.n	8006c6c <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d104      	bne.n	8006c7e <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	085a      	lsrs	r2, r3, #1
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_SAI_Init+0x332>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d109      	bne.n	8006ca2 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d101      	bne.n	8006c9a <HAL_SAI_Init+0x33e>
 8006c96:	2300      	movs	r3, #0
 8006c98:	e001      	b.n	8006c9e <HAL_SAI_Init+0x342>
 8006c9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c9e:	623b      	str	r3, [r7, #32]
 8006ca0:	e008      	b.n	8006cb4 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d102      	bne.n	8006cb0 <HAL_SAI_Init+0x354>
 8006caa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cae:	e000      	b.n	8006cb2 <HAL_SAI_Init+0x356>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8006cb4:	f7fa f92e 	bl	8000f14 <HAL_GetREVID>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cbe:	d331      	bcc.n	8006d24 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6819      	ldr	r1, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	4b73      	ldr	r3, [pc, #460]	@ (8006e98 <HAL_SAI_Init+0x53c>)
 8006ccc:	400b      	ands	r3, r1
 8006cce:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6819      	ldr	r1, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cde:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ce4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cea:	431a      	orrs	r2, r3
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8006cf8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d04:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0a:	051b      	lsls	r3, r3, #20
 8006d0c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d12:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	e02d      	b.n	8006d80 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6819      	ldr	r1, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8006e9c <HAL_SAI_Init+0x540>)
 8006d30:	400b      	ands	r3, r1
 8006d32:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6819      	ldr	r1, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d42:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d48:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8006d5c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006d68:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6e:	051b      	lsls	r3, r3, #20
 8006d70:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8006d76:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6859      	ldr	r1, [r3, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	4b45      	ldr	r3, [pc, #276]	@ (8006ea0 <HAL_SAI_Init+0x544>)
 8006d8c:	400b      	ands	r3, r1
 8006d8e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6859      	ldr	r1, [r3, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69da      	ldr	r2, [r3, #28]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006da4:	431a      	orrs	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6899      	ldr	r1, [r3, #8]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	4b3a      	ldr	r3, [pc, #232]	@ (8006ea4 <HAL_SAI_Init+0x548>)
 8006dba:	400b      	ands	r3, r1
 8006dbc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6899      	ldr	r1, [r3, #8]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dc8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006dce:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8006dd4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8006dda:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de0:	3b01      	subs	r3, #1
 8006de2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006de4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68d9      	ldr	r1, [r3, #12]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8006dfc:	400b      	ands	r3, r1
 8006dfe:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68d9      	ldr	r1, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e0e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e14:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e16:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	021b      	lsls	r3, r3, #8
 8006e20:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ea8 <HAL_SAI_Init+0x54c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d004      	beq.n	8006e3e <HAL_SAI_Init+0x4e2>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1c      	ldr	r2, [pc, #112]	@ (8006eac <HAL_SAI_Init+0x550>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d119      	bne.n	8006e72 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e42:	f023 0201 	bic.w	r2, r3, #1
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d10e      	bne.n	8006e72 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8006e60:	431a      	orrs	r2, r3
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e6a:	f043 0201 	orr.w	r2, r3, #1
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3728      	adds	r7, #40	@ 0x28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	cccccccd 	.word	0xcccccccd
 8006e98:	f005c010 	.word	0xf005c010
 8006e9c:	f805c010 	.word	0xf805c010
 8006ea0:	ffff1ff0 	.word	0xffff1ff0
 8006ea4:	fff88000 	.word	0xfff88000
 8006ea8:	40015804 	.word	0x40015804
 8006eac:	58005404 	.word	0x58005404

08006eb0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006eb8:	4b18      	ldr	r3, [pc, #96]	@ (8006f1c <SAI_Disable+0x6c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a18      	ldr	r2, [pc, #96]	@ (8006f20 <SAI_Disable+0x70>)
 8006ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec2:	0b1b      	lsrs	r3, r3, #12
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006eda:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ee8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	72fb      	strb	r3, [r7, #11]
      break;
 8006ef6:	e009      	b.n	8006f0c <SAI_Disable+0x5c>
    }
    count--;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e7      	bne.n	8006edc <SAI_Disable+0x2c>

  return status;
 8006f0c:	7afb      	ldrb	r3, [r7, #11]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	24000000 	.word	0x24000000
 8006f20:	95cbec1b 	.word	0x95cbec1b

08006f24 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d009      	beq.n	8006f48 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8006f34:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006f36:	461a      	mov	r2, r3
        err.type, err.code);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	4807      	ldr	r0, [pc, #28]	@ (8006f60 <ai_log_err+0x3c>)
 8006f42:	f004 feaf 	bl	800bca4 <iprintf>
 8006f46:	e009      	b.n	8006f5c <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8006f48:	793b      	ldrb	r3, [r7, #4]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8006f52:	461a      	mov	r2, r3
 8006f54:	4803      	ldr	r0, [pc, #12]	@ (8006f64 <ai_log_err+0x40>)
 8006f56:	f004 fea5 	bl	800bca4 <iprintf>

  do {} while (1);
 8006f5a:	bf00      	nop
 8006f5c:	bf00      	nop
 8006f5e:	e7fd      	b.n	8006f5c <ai_log_err+0x38>
 8006f60:	0800c900 	.word	0x0800c900
 8006f64:	0800c934 	.word	0x0800c934

08006f68 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_tinycnnbuow_create_and_init(&tinycnnbuow, act_addr, NULL);
 8006f70:	2200      	movs	r2, #0
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	4828      	ldr	r0, [pc, #160]	@ (8007018 <ai_boostrap+0xb0>)
 8006f76:	f000 fb4d 	bl	8007614 <ai_tinycnnbuow_create_and_init>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8006f7e:	7b3b      	ldrb	r3, [r7, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d006      	beq.n	8006f92 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_tinycnnbuow_create_and_init");
 8006f84:	4925      	ldr	r1, [pc, #148]	@ (800701c <ai_boostrap+0xb4>)
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7ff ffcc 	bl	8006f24 <ai_log_err>
    return -1;
 8006f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f90:	e03e      	b.n	8007010 <ai_boostrap+0xa8>
  }

  ai_input = ai_tinycnnbuow_inputs_get(tinycnnbuow, NULL);
 8006f92:	4b21      	ldr	r3, [pc, #132]	@ (8007018 <ai_boostrap+0xb0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2100      	movs	r1, #0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fbb9 	bl	8007710 <ai_tinycnnbuow_inputs_get>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8007020 <ai_boostrap+0xb8>)
 8006fa2:	6013      	str	r3, [r2, #0]
  ai_output = ai_tinycnnbuow_outputs_get(tinycnnbuow, NULL);
 8006fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8007018 <ai_boostrap+0xb0>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2100      	movs	r1, #0
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fbca 	bl	8007744 <ai_tinycnnbuow_outputs_get>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8007024 <ai_boostrap+0xbc>)
 8006fb4:	6013      	str	r3, [r2, #0]

#if defined(AI_TINYCNNBUOW_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_TINYCNNBUOW_IN_NUM; idx++) {
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	e00f      	b.n	8006fdc <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8006fbc:	4b18      	ldr	r3, [pc, #96]	@ (8007020 <ai_boostrap+0xb8>)
 8006fbe:	6819      	ldr	r1, [r3, #0]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	00db      	lsls	r3, r3, #3
 8006fc6:	1a9b      	subs	r3, r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	440b      	add	r3, r1
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	4916      	ldr	r1, [pc, #88]	@ (8007028 <ai_boostrap+0xc0>)
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_TINYCNNBUOW_IN_NUM; idx++) {
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	ddec      	ble.n	8006fbc <ai_boostrap+0x54>

#if defined(AI_TINYCNNBUOW_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_TINYCNNBUOW_OUT_NUM; idx++) {
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	613b      	str	r3, [r7, #16]
 8006fe6:	e00f      	b.n	8007008 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8006fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8007024 <ai_boostrap+0xbc>)
 8006fea:	6819      	ldr	r1, [r3, #0]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	00db      	lsls	r3, r3, #3
 8006ff2:	1a9b      	subs	r3, r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	440b      	add	r3, r1
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	490c      	ldr	r1, [pc, #48]	@ (800702c <ai_boostrap+0xc4>)
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_TINYCNNBUOW_OUT_NUM; idx++) {
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	3301      	adds	r3, #1
 8007006:	613b      	str	r3, [r7, #16]
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	ddec      	ble.n	8006fe8 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_TINYCNNBUOW_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	24046f40 	.word	0x24046f40
 800701c:	0800c964 	.word	0x0800c964
 8007020:	24046f44 	.word	0x24046f44
 8007024:	24046f48 	.word	0x24046f48
 8007028:	240015b0 	.word	0x240015b0
 800702c:	240015b4 	.word	0x240015b4

08007030 <ai_run>:

static int ai_run(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_tinycnnbuow_run(tinycnnbuow, ai_input, ai_output);
 8007036:	4b0f      	ldr	r3, [pc, #60]	@ (8007074 <ai_run+0x44>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a0f      	ldr	r2, [pc, #60]	@ (8007078 <ai_run+0x48>)
 800703c:	6811      	ldr	r1, [r2, #0]
 800703e:	4a0f      	ldr	r2, [pc, #60]	@ (800707c <ai_run+0x4c>)
 8007040:	6812      	ldr	r2, [r2, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fbd4 	bl	80077f0 <ai_tinycnnbuow_run>
 8007048:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d00c      	beq.n	800706a <ai_run+0x3a>
    ai_log_err(ai_tinycnnbuow_get_error(tinycnnbuow),
 8007050:	4b08      	ldr	r3, [pc, #32]	@ (8007074 <ai_run+0x44>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fabb 	bl	80075d0 <ai_tinycnnbuow_get_error>
 800705a:	4603      	mov	r3, r0
 800705c:	4908      	ldr	r1, [pc, #32]	@ (8007080 <ai_run+0x50>)
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff ff60 	bl	8006f24 <ai_log_err>
        "ai_tinycnnbuow_run");
    return -1;
 8007064:	f04f 33ff 	mov.w	r3, #4294967295
 8007068:	e000      	b.n	800706c <ai_run+0x3c>
  }

  return 0;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	24046f40 	.word	0x24046f40
 8007078:	24046f44 	.word	0x24046f44
 800707c:	24046f48 	.word	0x24046f48
 8007080:	0800c984 	.word	0x0800c984

08007084 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <post_process>:

int post_process(ai_i8* data[])
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 80070b4:	4803      	ldr	r0, [pc, #12]	@ (80070c4 <MX_X_CUBE_AI_Init+0x14>)
 80070b6:	f004 fe5d 	bl	800bd74 <puts>

  ai_boostrap(data_activations0);
 80070ba:	4803      	ldr	r0, [pc, #12]	@ (80070c8 <MX_X_CUBE_AI_Init+0x18>)
 80070bc:	f7ff ff54 	bl	8006f68 <ai_boostrap>
    /* USER CODE END 5 */
}
 80070c0:	bf00      	nop
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	0800c998 	.word	0x0800c998
 80070c8:	24000010 	.word	0x24000010

080070cc <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 80070d2:	f04f 33ff 	mov.w	r3, #4294967295
 80070d6:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 80070d8:	4816      	ldr	r0, [pc, #88]	@ (8007134 <MX_X_CUBE_AI_Process+0x68>)
 80070da:	f004 fe4b 	bl	800bd74 <puts>

  if (tinycnnbuow) {
 80070de:	4b16      	ldr	r3, [pc, #88]	@ (8007138 <MX_X_CUBE_AI_Process+0x6c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d013      	beq.n	800710e <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 80070e6:	4815      	ldr	r0, [pc, #84]	@ (800713c <MX_X_CUBE_AI_Process+0x70>)
 80070e8:	f7ff ffcc 	bl	8007084 <acquire_and_process_data>
 80070ec:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d102      	bne.n	80070fa <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 80070f4:	f7ff ff9c 	bl	8007030 <ai_run>
 80070f8:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d103      	bne.n	8007108 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 8007100:	480f      	ldr	r0, [pc, #60]	@ (8007140 <MX_X_CUBE_AI_Process+0x74>)
 8007102:	f7ff ffca 	bl	800709a <post_process>
 8007106:	6078      	str	r0, [r7, #4]
    } while (res==0);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0eb      	beq.n	80070e6 <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00a      	beq.n	800712a <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8007114:	2311      	movs	r3, #17
 8007116:	703b      	strb	r3, [r7, #0]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2210      	movs	r2, #16
 800711c:	f362 231f 	bfi	r3, r2, #8, #24
 8007120:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 8007122:	4908      	ldr	r1, [pc, #32]	@ (8007144 <MX_X_CUBE_AI_Process+0x78>)
 8007124:	6838      	ldr	r0, [r7, #0]
 8007126:	f7ff fefd 	bl	8006f24 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	0800c9b8 	.word	0x0800c9b8
 8007138:	24046f40 	.word	0x24046f40
 800713c:	240015b0 	.word	0x240015b0
 8007140:	240015b4 	.word	0x240015b4
 8007144:	0800c9d4 	.word	0x0800c9d4

08007148 <tinycnnbuow_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool tinycnnbuow_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_tinycnnbuow_activations_map, 1, params)) {
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	2101      	movs	r1, #1
 8007156:	4888      	ldr	r0, [pc, #544]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007158:	f000 fc22 	bl	80079a0 <ai_platform_get_activations_map>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 8100 	beq.w	8007364 <tinycnnbuow_configure_activations+0x21c>
    /* Updating activations (byte) offsets */
    
    serving_default_input0_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 98800);
 8007164:	4b84      	ldr	r3, [pc, #528]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	4b84      	ldr	r3, [pc, #528]	@ (800737c <tinycnnbuow_configure_activations+0x234>)
 800716a:	4413      	add	r3, r2
 800716c:	4a84      	ldr	r2, [pc, #528]	@ (8007380 <tinycnnbuow_configure_activations+0x238>)
 800716e:	6093      	str	r3, [r2, #8]
    serving_default_input0_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 98800);
 8007170:	4b81      	ldr	r3, [pc, #516]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	4b81      	ldr	r3, [pc, #516]	@ (800737c <tinycnnbuow_configure_activations+0x234>)
 8007176:	4413      	add	r3, r2
 8007178:	4a81      	ldr	r2, [pc, #516]	@ (8007380 <tinycnnbuow_configure_activations+0x238>)
 800717a:	60d3      	str	r3, [r2, #12]
    in_pad_0_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 164848);
 800717c:	4b7e      	ldr	r3, [pc, #504]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	4b80      	ldr	r3, [pc, #512]	@ (8007384 <tinycnnbuow_configure_activations+0x23c>)
 8007182:	4413      	add	r3, r2
 8007184:	4a80      	ldr	r2, [pc, #512]	@ (8007388 <tinycnnbuow_configure_activations+0x240>)
 8007186:	6093      	str	r3, [r2, #8]
    in_pad_0_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 164848);
 8007188:	4b7b      	ldr	r3, [pc, #492]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	4b7d      	ldr	r3, [pc, #500]	@ (8007384 <tinycnnbuow_configure_activations+0x23c>)
 800718e:	4413      	add	r3, r2
 8007190:	4a7d      	ldr	r2, [pc, #500]	@ (8007388 <tinycnnbuow_configure_activations+0x240>)
 8007192:	60d3      	str	r3, [r2, #12]
    pad_0_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 162256);
 8007194:	4b78      	ldr	r3, [pc, #480]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	4b7c      	ldr	r3, [pc, #496]	@ (800738c <tinycnnbuow_configure_activations+0x244>)
 800719a:	4413      	add	r3, r2
 800719c:	4a7c      	ldr	r2, [pc, #496]	@ (8007390 <tinycnnbuow_configure_activations+0x248>)
 800719e:	6093      	str	r3, [r2, #8]
    pad_0_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 162256);
 80071a0:	4b75      	ldr	r3, [pc, #468]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	4b79      	ldr	r3, [pc, #484]	@ (800738c <tinycnnbuow_configure_activations+0x244>)
 80071a6:	4413      	add	r3, r2
 80071a8:	4a79      	ldr	r2, [pc, #484]	@ (8007390 <tinycnnbuow_configure_activations+0x248>)
 80071aa:	60d3      	str	r3, [r2, #12]
    out_pad_0_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 93616);
 80071ac:	4b72      	ldr	r3, [pc, #456]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	4b78      	ldr	r3, [pc, #480]	@ (8007394 <tinycnnbuow_configure_activations+0x24c>)
 80071b2:	4413      	add	r3, r2
 80071b4:	4a78      	ldr	r2, [pc, #480]	@ (8007398 <tinycnnbuow_configure_activations+0x250>)
 80071b6:	6093      	str	r3, [r2, #8]
    out_pad_0_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 93616);
 80071b8:	4b6f      	ldr	r3, [pc, #444]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	4b75      	ldr	r3, [pc, #468]	@ (8007394 <tinycnnbuow_configure_activations+0x24c>)
 80071be:	4413      	add	r3, r2
 80071c0:	4a75      	ldr	r2, [pc, #468]	@ (8007398 <tinycnnbuow_configure_activations+0x250>)
 80071c2:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch0_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 162256);
 80071c4:	4b6c      	ldr	r3, [pc, #432]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	4b70      	ldr	r3, [pc, #448]	@ (800738c <tinycnnbuow_configure_activations+0x244>)
 80071ca:	4413      	add	r3, r2
 80071cc:	4a73      	ldr	r2, [pc, #460]	@ (800739c <tinycnnbuow_configure_activations+0x254>)
 80071ce:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 162256);
 80071d0:	4b69      	ldr	r3, [pc, #420]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	4b6d      	ldr	r3, [pc, #436]	@ (800738c <tinycnnbuow_configure_activations+0x244>)
 80071d6:	4413      	add	r3, r2
 80071d8:	4a70      	ldr	r2, [pc, #448]	@ (800739c <tinycnnbuow_configure_activations+0x254>)
 80071da:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch1_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 162292);
 80071dc:	4b66      	ldr	r3, [pc, #408]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	4b6f      	ldr	r3, [pc, #444]	@ (80073a0 <tinycnnbuow_configure_activations+0x258>)
 80071e2:	4413      	add	r3, r2
 80071e4:	4a6f      	ldr	r2, [pc, #444]	@ (80073a4 <tinycnnbuow_configure_activations+0x25c>)
 80071e6:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch1_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 162292);
 80071e8:	4b63      	ldr	r3, [pc, #396]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	4b6c      	ldr	r3, [pc, #432]	@ (80073a0 <tinycnnbuow_configure_activations+0x258>)
 80071ee:	4413      	add	r3, r2
 80071f0:	4a6c      	ldr	r2, [pc, #432]	@ (80073a4 <tinycnnbuow_configure_activations+0x25c>)
 80071f2:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 20864);
 80071f4:	4b60      	ldr	r3, [pc, #384]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f503 43a3 	add.w	r3, r3, #20864	@ 0x5180
 80071fc:	4a6a      	ldr	r2, [pc, #424]	@ (80073a8 <tinycnnbuow_configure_activations+0x260>)
 80071fe:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 20864);
 8007200:	4b5d      	ldr	r3, [pc, #372]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f503 43a3 	add.w	r3, r3, #20864	@ 0x5180
 8007208:	4a67      	ldr	r2, [pc, #412]	@ (80073a8 <tinycnnbuow_configure_activations+0x260>)
 800720a:	60d3      	str	r3, [r2, #12]
    in_pad_5_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 152960);
 800720c:	4b5a      	ldr	r3, [pc, #360]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	4b66      	ldr	r3, [pc, #408]	@ (80073ac <tinycnnbuow_configure_activations+0x264>)
 8007212:	4413      	add	r3, r2
 8007214:	4a66      	ldr	r2, [pc, #408]	@ (80073b0 <tinycnnbuow_configure_activations+0x268>)
 8007216:	6093      	str	r3, [r2, #8]
    in_pad_5_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 152960);
 8007218:	4b57      	ldr	r3, [pc, #348]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	4b63      	ldr	r3, [pc, #396]	@ (80073ac <tinycnnbuow_configure_activations+0x264>)
 800721e:	4413      	add	r3, r2
 8007220:	4a63      	ldr	r2, [pc, #396]	@ (80073b0 <tinycnnbuow_configure_activations+0x268>)
 8007222:	60d3      	str	r3, [r2, #12]
    pad_5_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 142528);
 8007224:	4b54      	ldr	r3, [pc, #336]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	4b62      	ldr	r3, [pc, #392]	@ (80073b4 <tinycnnbuow_configure_activations+0x26c>)
 800722a:	4413      	add	r3, r2
 800722c:	4a62      	ldr	r2, [pc, #392]	@ (80073b8 <tinycnnbuow_configure_activations+0x270>)
 800722e:	6093      	str	r3, [r2, #8]
    pad_5_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 142528);
 8007230:	4b51      	ldr	r3, [pc, #324]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	4b5f      	ldr	r3, [pc, #380]	@ (80073b4 <tinycnnbuow_configure_activations+0x26c>)
 8007236:	4413      	add	r3, r2
 8007238:	4a5f      	ldr	r2, [pc, #380]	@ (80073b8 <tinycnnbuow_configure_activations+0x270>)
 800723a:	60d3      	str	r3, [r2, #12]
    transpose_6_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 0);
 800723c:	4b4e      	ldr	r3, [pc, #312]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a5e      	ldr	r2, [pc, #376]	@ (80073bc <tinycnnbuow_configure_activations+0x274>)
 8007242:	6093      	str	r3, [r2, #8]
    transpose_6_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 0);
 8007244:	4b4c      	ldr	r3, [pc, #304]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a5c      	ldr	r2, [pc, #368]	@ (80073bc <tinycnnbuow_configure_activations+0x274>)
 800724a:	60d3      	str	r3, [r2, #12]
    conv2d_7_scratch0_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 142528);
 800724c:	4b4a      	ldr	r3, [pc, #296]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	4b58      	ldr	r3, [pc, #352]	@ (80073b4 <tinycnnbuow_configure_activations+0x26c>)
 8007252:	4413      	add	r3, r2
 8007254:	4a5a      	ldr	r2, [pc, #360]	@ (80073c0 <tinycnnbuow_configure_activations+0x278>)
 8007256:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch0_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 142528);
 8007258:	4b47      	ldr	r3, [pc, #284]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	4b55      	ldr	r3, [pc, #340]	@ (80073b4 <tinycnnbuow_configure_activations+0x26c>)
 800725e:	4413      	add	r3, r2
 8007260:	4a57      	ldr	r2, [pc, #348]	@ (80073c0 <tinycnnbuow_configure_activations+0x278>)
 8007262:	60d3      	str	r3, [r2, #12]
    conv2d_7_scratch1_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 142816);
 8007264:	4b44      	ldr	r3, [pc, #272]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	4b56      	ldr	r3, [pc, #344]	@ (80073c4 <tinycnnbuow_configure_activations+0x27c>)
 800726a:	4413      	add	r3, r2
 800726c:	4a56      	ldr	r2, [pc, #344]	@ (80073c8 <tinycnnbuow_configure_activations+0x280>)
 800726e:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch1_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 142816);
 8007270:	4b41      	ldr	r3, [pc, #260]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	4b53      	ldr	r3, [pc, #332]	@ (80073c4 <tinycnnbuow_configure_activations+0x27c>)
 8007276:	4413      	add	r3, r2
 8007278:	4a53      	ldr	r2, [pc, #332]	@ (80073c8 <tinycnnbuow_configure_activations+0x280>)
 800727a:	60d3      	str	r3, [r2, #12]
    conv2d_7_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 159328);
 800727c:	4b3e      	ldr	r3, [pc, #248]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	4b52      	ldr	r3, [pc, #328]	@ (80073cc <tinycnnbuow_configure_activations+0x284>)
 8007282:	4413      	add	r3, r2
 8007284:	4a52      	ldr	r2, [pc, #328]	@ (80073d0 <tinycnnbuow_configure_activations+0x288>)
 8007286:	6093      	str	r3, [r2, #8]
    conv2d_7_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 159328);
 8007288:	4b3b      	ldr	r3, [pc, #236]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	4b4f      	ldr	r3, [pc, #316]	@ (80073cc <tinycnnbuow_configure_activations+0x284>)
 800728e:	4413      	add	r3, r2
 8007290:	4a4f      	ldr	r2, [pc, #316]	@ (80073d0 <tinycnnbuow_configure_activations+0x288>)
 8007292:	60d3      	str	r3, [r2, #12]
    in_pad_10_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 0);
 8007294:	4b38      	ldr	r3, [pc, #224]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a4e      	ldr	r2, [pc, #312]	@ (80073d4 <tinycnnbuow_configure_activations+0x28c>)
 800729a:	6093      	str	r3, [r2, #8]
    in_pad_10_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 0);
 800729c:	4b36      	ldr	r3, [pc, #216]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a4c      	ldr	r2, [pc, #304]	@ (80073d4 <tinycnnbuow_configure_activations+0x28c>)
 80072a2:	60d3      	str	r3, [r2, #12]
    pad_10_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 65536);
 80072a4:	4b34      	ldr	r3, [pc, #208]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80072ac:	4a4a      	ldr	r2, [pc, #296]	@ (80073d8 <tinycnnbuow_configure_activations+0x290>)
 80072ae:	6093      	str	r3, [r2, #8]
    pad_10_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 65536);
 80072b0:	4b31      	ldr	r3, [pc, #196]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80072b8:	4a47      	ldr	r2, [pc, #284]	@ (80073d8 <tinycnnbuow_configure_activations+0x290>)
 80072ba:	60d3      	str	r3, [r2, #12]
    transpose_11_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 141568);
 80072bc:	4b2e      	ldr	r3, [pc, #184]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	4b46      	ldr	r3, [pc, #280]	@ (80073dc <tinycnnbuow_configure_activations+0x294>)
 80072c2:	4413      	add	r3, r2
 80072c4:	4a46      	ldr	r2, [pc, #280]	@ (80073e0 <tinycnnbuow_configure_activations+0x298>)
 80072c6:	6093      	str	r3, [r2, #8]
    transpose_11_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 141568);
 80072c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	4b43      	ldr	r3, [pc, #268]	@ (80073dc <tinycnnbuow_configure_activations+0x294>)
 80072ce:	4413      	add	r3, r2
 80072d0:	4a43      	ldr	r2, [pc, #268]	@ (80073e0 <tinycnnbuow_configure_activations+0x298>)
 80072d2:	60d3      	str	r3, [r2, #12]
    conv2d_12_scratch0_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 0);
 80072d4:	4b28      	ldr	r3, [pc, #160]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a42      	ldr	r2, [pc, #264]	@ (80073e4 <tinycnnbuow_configure_activations+0x29c>)
 80072da:	6093      	str	r3, [r2, #8]
    conv2d_12_scratch0_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 0);
 80072dc:	4b26      	ldr	r3, [pc, #152]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a40      	ldr	r2, [pc, #256]	@ (80073e4 <tinycnnbuow_configure_activations+0x29c>)
 80072e2:	60d3      	str	r3, [r2, #12]
    conv2d_12_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 576);
 80072e4:	4b24      	ldr	r3, [pc, #144]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80072ec:	4a3e      	ldr	r2, [pc, #248]	@ (80073e8 <tinycnnbuow_configure_activations+0x2a0>)
 80072ee:	6093      	str	r3, [r2, #8]
    conv2d_12_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 576);
 80072f0:	4b21      	ldr	r3, [pc, #132]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80072f8:	4a3b      	ldr	r2, [pc, #236]	@ (80073e8 <tinycnnbuow_configure_activations+0x2a0>)
 80072fa:	60d3      	str	r3, [r2, #12]
    nl_12_nl_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 131648);
 80072fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	4b3a      	ldr	r3, [pc, #232]	@ (80073ec <tinycnnbuow_configure_activations+0x2a4>)
 8007302:	4413      	add	r3, r2
 8007304:	4a3a      	ldr	r2, [pc, #232]	@ (80073f0 <tinycnnbuow_configure_activations+0x2a8>)
 8007306:	6093      	str	r3, [r2, #8]
    nl_12_nl_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 131648);
 8007308:	4b1b      	ldr	r3, [pc, #108]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	4b37      	ldr	r3, [pc, #220]	@ (80073ec <tinycnnbuow_configure_activations+0x2a4>)
 800730e:	4413      	add	r3, r2
 8007310:	4a37      	ldr	r2, [pc, #220]	@ (80073f0 <tinycnnbuow_configure_activations+0x2a8>)
 8007312:	60d3      	str	r3, [r2, #12]
    transpose_13_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 0);
 8007314:	4b18      	ldr	r3, [pc, #96]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a36      	ldr	r2, [pc, #216]	@ (80073f4 <tinycnnbuow_configure_activations+0x2ac>)
 800731a:	6093      	str	r3, [r2, #8]
    transpose_13_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 0);
 800731c:	4b16      	ldr	r3, [pc, #88]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a34      	ldr	r2, [pc, #208]	@ (80073f4 <tinycnnbuow_configure_activations+0x2ac>)
 8007322:	60d3      	str	r3, [r2, #12]
    reduce_14_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 131072);
 8007324:	4b14      	ldr	r3, [pc, #80]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 800732c:	4a32      	ldr	r2, [pc, #200]	@ (80073f8 <tinycnnbuow_configure_activations+0x2b0>)
 800732e:	6093      	str	r3, [r2, #8]
    reduce_14_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 131072);
 8007330:	4b11      	ldr	r3, [pc, #68]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8007338:	4a2f      	ldr	r2, [pc, #188]	@ (80073f8 <tinycnnbuow_configure_activations+0x2b0>)
 800733a:	60d3      	str	r3, [r2, #12]
    reduce_14_Mul_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 0);
 800733c:	4b0e      	ldr	r3, [pc, #56]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a2e      	ldr	r2, [pc, #184]	@ (80073fc <tinycnnbuow_configure_activations+0x2b4>)
 8007342:	6093      	str	r3, [r2, #8]
    reduce_14_Mul_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 0);
 8007344:	4b0c      	ldr	r3, [pc, #48]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a2c      	ldr	r2, [pc, #176]	@ (80073fc <tinycnnbuow_configure_activations+0x2b4>)
 800734a:	60d3      	str	r3, [r2, #12]
    gemm_16_output_array.data = AI_PTR(g_tinycnnbuow_activations_map[0] + 128);
 800734c:	4b0a      	ldr	r3, [pc, #40]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3380      	adds	r3, #128	@ 0x80
 8007352:	4a2b      	ldr	r2, [pc, #172]	@ (8007400 <tinycnnbuow_configure_activations+0x2b8>)
 8007354:	6093      	str	r3, [r2, #8]
    gemm_16_output_array.data_start = AI_PTR(g_tinycnnbuow_activations_map[0] + 128);
 8007356:	4b08      	ldr	r3, [pc, #32]	@ (8007378 <tinycnnbuow_configure_activations+0x230>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3380      	adds	r3, #128	@ 0x80
 800735c:	4a28      	ldr	r2, [pc, #160]	@ (8007400 <tinycnnbuow_configure_activations+0x2b8>)
 800735e:	60d3      	str	r3, [r2, #12]
    return true;
 8007360:	2301      	movs	r3, #1
 8007362:	e005      	b.n	8007370 <tinycnnbuow_configure_activations+0x228>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8007364:	2213      	movs	r2, #19
 8007366:	2130      	movs	r1, #48	@ 0x30
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fb99 	bl	8007aa0 <ai_platform_network_set_error>
  return false;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	24046f4c 	.word	0x24046f4c
 800737c:	000181f0 	.word	0x000181f0
 8007380:	24000014 	.word	0x24000014
 8007384:	000283f0 	.word	0x000283f0
 8007388:	24000024 	.word	0x24000024
 800738c:	000279d0 	.word	0x000279d0
 8007390:	24000034 	.word	0x24000034
 8007394:	00016db0 	.word	0x00016db0
 8007398:	24000044 	.word	0x24000044
 800739c:	240001d4 	.word	0x240001d4
 80073a0:	000279f4 	.word	0x000279f4
 80073a4:	240001e4 	.word	0x240001e4
 80073a8:	24000054 	.word	0x24000054
 80073ac:	00025580 	.word	0x00025580
 80073b0:	24000064 	.word	0x24000064
 80073b4:	00022cc0 	.word	0x00022cc0
 80073b8:	24000074 	.word	0x24000074
 80073bc:	24000084 	.word	0x24000084
 80073c0:	240001f4 	.word	0x240001f4
 80073c4:	00022de0 	.word	0x00022de0
 80073c8:	24000204 	.word	0x24000204
 80073cc:	00026e60 	.word	0x00026e60
 80073d0:	24000094 	.word	0x24000094
 80073d4:	240000a4 	.word	0x240000a4
 80073d8:	240000b4 	.word	0x240000b4
 80073dc:	00022900 	.word	0x00022900
 80073e0:	240000c4 	.word	0x240000c4
 80073e4:	24000214 	.word	0x24000214
 80073e8:	240000d4 	.word	0x240000d4
 80073ec:	00020240 	.word	0x00020240
 80073f0:	240000e4 	.word	0x240000e4
 80073f4:	240000f4 	.word	0x240000f4
 80073f8:	24000104 	.word	0x24000104
 80073fc:	24000114 	.word	0x24000114
 8007400:	24000124 	.word	0x24000124

08007404 <tinycnnbuow_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool tinycnnbuow_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_tinycnnbuow_weights_map, 1, params)) {
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	2101      	movs	r1, #1
 8007412:	4864      	ldr	r0, [pc, #400]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 8007414:	f000 fa6c 	bl	80078f0 <ai_platform_get_weights_map>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 80b8 	beq.w	8007590 <tinycnnbuow_configure_weights+0x18c>
    /* Updating weights (byte) offsets */
    
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8007420:	4b61      	ldr	r3, [pc, #388]	@ (80075a8 <tinycnnbuow_configure_weights+0x1a4>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007428:	4a5f      	ldr	r2, [pc, #380]	@ (80075a8 <tinycnnbuow_configure_weights+0x1a4>)
 800742a:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_tinycnnbuow_weights_map[0] + 0);
 800742c:	4b5d      	ldr	r3, [pc, #372]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a5d      	ldr	r2, [pc, #372]	@ (80075a8 <tinycnnbuow_configure_weights+0x1a4>)
 8007432:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_tinycnnbuow_weights_map[0] + 0);
 8007434:	4b5b      	ldr	r3, [pc, #364]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a5b      	ldr	r2, [pc, #364]	@ (80075a8 <tinycnnbuow_configure_weights+0x1a4>)
 800743a:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800743c:	4b5b      	ldr	r3, [pc, #364]	@ (80075ac <tinycnnbuow_configure_weights+0x1a8>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007444:	4a59      	ldr	r2, [pc, #356]	@ (80075ac <tinycnnbuow_configure_weights+0x1a8>)
 8007446:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_tinycnnbuow_weights_map[0] + 288);
 8007448:	4b56      	ldr	r3, [pc, #344]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8007450:	4a56      	ldr	r2, [pc, #344]	@ (80075ac <tinycnnbuow_configure_weights+0x1a8>)
 8007452:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_tinycnnbuow_weights_map[0] + 288);
 8007454:	4b53      	ldr	r3, [pc, #332]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800745c:	4a53      	ldr	r2, [pc, #332]	@ (80075ac <tinycnnbuow_configure_weights+0x1a8>)
 800745e:	60d3      	str	r3, [r2, #12]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8007460:	4b53      	ldr	r3, [pc, #332]	@ (80075b0 <tinycnnbuow_configure_weights+0x1ac>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007468:	4a51      	ldr	r2, [pc, #324]	@ (80075b0 <tinycnnbuow_configure_weights+0x1ac>)
 800746a:	6013      	str	r3, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_tinycnnbuow_weights_map[0] + 320);
 800746c:	4b4d      	ldr	r3, [pc, #308]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8007474:	4a4e      	ldr	r2, [pc, #312]	@ (80075b0 <tinycnnbuow_configure_weights+0x1ac>)
 8007476:	6093      	str	r3, [r2, #8]
    conv2d_7_weights_array.data_start = AI_PTR(g_tinycnnbuow_weights_map[0] + 320);
 8007478:	4b4a      	ldr	r3, [pc, #296]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8007480:	4a4b      	ldr	r2, [pc, #300]	@ (80075b0 <tinycnnbuow_configure_weights+0x1ac>)
 8007482:	60d3      	str	r3, [r2, #12]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8007484:	4b4b      	ldr	r3, [pc, #300]	@ (80075b4 <tinycnnbuow_configure_weights+0x1b0>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800748c:	4a49      	ldr	r2, [pc, #292]	@ (80075b4 <tinycnnbuow_configure_weights+0x1b0>)
 800748e:	6013      	str	r3, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_tinycnnbuow_weights_map[0] + 4928);
 8007490:	4b44      	ldr	r3, [pc, #272]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8007498:	4a46      	ldr	r2, [pc, #280]	@ (80075b4 <tinycnnbuow_configure_weights+0x1b0>)
 800749a:	6093      	str	r3, [r2, #8]
    conv2d_7_bias_array.data_start = AI_PTR(g_tinycnnbuow_weights_map[0] + 4928);
 800749c:	4b41      	ldr	r3, [pc, #260]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 80074a4:	4a43      	ldr	r2, [pc, #268]	@ (80075b4 <tinycnnbuow_configure_weights+0x1b0>)
 80074a6:	60d3      	str	r3, [r2, #12]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 80074a8:	4b43      	ldr	r3, [pc, #268]	@ (80075b8 <tinycnnbuow_configure_weights+0x1b4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074b0:	4a41      	ldr	r2, [pc, #260]	@ (80075b8 <tinycnnbuow_configure_weights+0x1b4>)
 80074b2:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_tinycnnbuow_weights_map[0] + 4992);
 80074b4:	4b3b      	ldr	r3, [pc, #236]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80074bc:	4a3e      	ldr	r2, [pc, #248]	@ (80075b8 <tinycnnbuow_configure_weights+0x1b4>)
 80074be:	6093      	str	r3, [r2, #8]
    conv2d_12_weights_array.data_start = AI_PTR(g_tinycnnbuow_weights_map[0] + 4992);
 80074c0:	4b38      	ldr	r3, [pc, #224]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80074c8:	4a3b      	ldr	r2, [pc, #236]	@ (80075b8 <tinycnnbuow_configure_weights+0x1b4>)
 80074ca:	60d3      	str	r3, [r2, #12]
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 80074cc:	4b3b      	ldr	r3, [pc, #236]	@ (80075bc <tinycnnbuow_configure_weights+0x1b8>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074d4:	4a39      	ldr	r2, [pc, #228]	@ (80075bc <tinycnnbuow_configure_weights+0x1b8>)
 80074d6:	6013      	str	r3, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_tinycnnbuow_weights_map[0] + 23424);
 80074d8:	4b32      	ldr	r3, [pc, #200]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f503 43b7 	add.w	r3, r3, #23424	@ 0x5b80
 80074e0:	4a36      	ldr	r2, [pc, #216]	@ (80075bc <tinycnnbuow_configure_weights+0x1b8>)
 80074e2:	6093      	str	r3, [r2, #8]
    conv2d_12_bias_array.data_start = AI_PTR(g_tinycnnbuow_weights_map[0] + 23424);
 80074e4:	4b2f      	ldr	r3, [pc, #188]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f503 43b7 	add.w	r3, r3, #23424	@ 0x5b80
 80074ec:	4a33      	ldr	r2, [pc, #204]	@ (80075bc <tinycnnbuow_configure_weights+0x1b8>)
 80074ee:	60d3      	str	r3, [r2, #12]
    reduce_14_Mul_scale_array.format |= AI_FMT_FLAG_CONST;
 80074f0:	4b33      	ldr	r3, [pc, #204]	@ (80075c0 <tinycnnbuow_configure_weights+0x1bc>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074f8:	4a31      	ldr	r2, [pc, #196]	@ (80075c0 <tinycnnbuow_configure_weights+0x1bc>)
 80074fa:	6013      	str	r3, [r2, #0]
    reduce_14_Mul_scale_array.data = AI_PTR(g_tinycnnbuow_weights_map[0] + 23552);
 80074fc:	4b29      	ldr	r3, [pc, #164]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8007504:	4a2e      	ldr	r2, [pc, #184]	@ (80075c0 <tinycnnbuow_configure_weights+0x1bc>)
 8007506:	6093      	str	r3, [r2, #8]
    reduce_14_Mul_scale_array.data_start = AI_PTR(g_tinycnnbuow_weights_map[0] + 23552);
 8007508:	4b26      	ldr	r3, [pc, #152]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8007510:	4a2b      	ldr	r2, [pc, #172]	@ (80075c0 <tinycnnbuow_configure_weights+0x1bc>)
 8007512:	60d3      	str	r3, [r2, #12]
    reduce_14_Mul_bias_array.format |= AI_FMT_FLAG_CONST;
 8007514:	4b2b      	ldr	r3, [pc, #172]	@ (80075c4 <tinycnnbuow_configure_weights+0x1c0>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800751c:	4a29      	ldr	r2, [pc, #164]	@ (80075c4 <tinycnnbuow_configure_weights+0x1c0>)
 800751e:	6013      	str	r3, [r2, #0]
    reduce_14_Mul_bias_array.data = AI_PTR(g_tinycnnbuow_weights_map[0] + 23556);
 8007520:	4b20      	ldr	r3, [pc, #128]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	f645 4304 	movw	r3, #23556	@ 0x5c04
 8007528:	4413      	add	r3, r2
 800752a:	4a26      	ldr	r2, [pc, #152]	@ (80075c4 <tinycnnbuow_configure_weights+0x1c0>)
 800752c:	6093      	str	r3, [r2, #8]
    reduce_14_Mul_bias_array.data_start = AI_PTR(g_tinycnnbuow_weights_map[0] + 23556);
 800752e:	4b1d      	ldr	r3, [pc, #116]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	f645 4304 	movw	r3, #23556	@ 0x5c04
 8007536:	4413      	add	r3, r2
 8007538:	4a22      	ldr	r2, [pc, #136]	@ (80075c4 <tinycnnbuow_configure_weights+0x1c0>)
 800753a:	60d3      	str	r3, [r2, #12]
    gemm_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800753c:	4b22      	ldr	r3, [pc, #136]	@ (80075c8 <tinycnnbuow_configure_weights+0x1c4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007544:	4a20      	ldr	r2, [pc, #128]	@ (80075c8 <tinycnnbuow_configure_weights+0x1c4>)
 8007546:	6013      	str	r3, [r2, #0]
    gemm_16_weights_array.data = AI_PTR(g_tinycnnbuow_weights_map[0] + 23560);
 8007548:	4b16      	ldr	r3, [pc, #88]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	f645 4308 	movw	r3, #23560	@ 0x5c08
 8007550:	4413      	add	r3, r2
 8007552:	4a1d      	ldr	r2, [pc, #116]	@ (80075c8 <tinycnnbuow_configure_weights+0x1c4>)
 8007554:	6093      	str	r3, [r2, #8]
    gemm_16_weights_array.data_start = AI_PTR(g_tinycnnbuow_weights_map[0] + 23560);
 8007556:	4b13      	ldr	r3, [pc, #76]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	f645 4308 	movw	r3, #23560	@ 0x5c08
 800755e:	4413      	add	r3, r2
 8007560:	4a19      	ldr	r2, [pc, #100]	@ (80075c8 <tinycnnbuow_configure_weights+0x1c4>)
 8007562:	60d3      	str	r3, [r2, #12]
    gemm_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8007564:	4b19      	ldr	r3, [pc, #100]	@ (80075cc <tinycnnbuow_configure_weights+0x1c8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800756c:	4a17      	ldr	r2, [pc, #92]	@ (80075cc <tinycnnbuow_configure_weights+0x1c8>)
 800756e:	6013      	str	r3, [r2, #0]
    gemm_16_bias_array.data = AI_PTR(g_tinycnnbuow_weights_map[0] + 24328);
 8007570:	4b0c      	ldr	r3, [pc, #48]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	f645 7308 	movw	r3, #24328	@ 0x5f08
 8007578:	4413      	add	r3, r2
 800757a:	4a14      	ldr	r2, [pc, #80]	@ (80075cc <tinycnnbuow_configure_weights+0x1c8>)
 800757c:	6093      	str	r3, [r2, #8]
    gemm_16_bias_array.data_start = AI_PTR(g_tinycnnbuow_weights_map[0] + 24328);
 800757e:	4b09      	ldr	r3, [pc, #36]	@ (80075a4 <tinycnnbuow_configure_weights+0x1a0>)
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	f645 7308 	movw	r3, #24328	@ 0x5f08
 8007586:	4413      	add	r3, r2
 8007588:	4a10      	ldr	r2, [pc, #64]	@ (80075cc <tinycnnbuow_configure_weights+0x1c8>)
 800758a:	60d3      	str	r3, [r2, #12]
    return true;
 800758c:	2301      	movs	r3, #1
 800758e:	e005      	b.n	800759c <tinycnnbuow_configure_weights+0x198>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8007590:	2212      	movs	r2, #18
 8007592:	2130      	movs	r1, #48	@ 0x30
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fa83 	bl	8007aa0 <ai_platform_network_set_error>
  return false;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	24046f50 	.word	0x24046f50
 80075a8:	24000134 	.word	0x24000134
 80075ac:	24000144 	.word	0x24000144
 80075b0:	24000154 	.word	0x24000154
 80075b4:	24000164 	.word	0x24000164
 80075b8:	24000174 	.word	0x24000174
 80075bc:	24000184 	.word	0x24000184
 80075c0:	24000194 	.word	0x24000194
 80075c4:	240001a4 	.word	0x240001a4
 80075c8:	240001b4 	.word	0x240001b4
 80075cc:	240001c4 	.word	0x240001c4

080075d0 <ai_tinycnnbuow_get_error>:
}


AI_API_ENTRY
ai_error ai_tinycnnbuow_get_error(ai_handle network)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fa55 	bl	8007a88 <ai_platform_network_get_error>
 80075de:	4603      	mov	r3, r0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <ai_tinycnnbuow_create>:


AI_API_ENTRY
ai_error ai_tinycnnbuow_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80075f2:	2300      	movs	r3, #0
 80075f4:	9301      	str	r3, [sp, #4]
 80075f6:	2305      	movs	r3, #5
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	2301      	movs	r3, #1
 80075fc:	4a04      	ldr	r2, [pc, #16]	@ (8007610 <ai_tinycnnbuow_create+0x28>)
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fb43 	bl	8007c8c <ai_platform_network_create>
 8007606:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8007608:	4618      	mov	r0, r3
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	240012c4 	.word	0x240012c4

08007614 <ai_tinycnnbuow_create_and_init>:


AI_API_ENTRY
ai_error ai_tinycnnbuow_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b094      	sub	sp, #80	@ 0x50
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_tinycnnbuow_create(network, AI_TINYCNNBUOW_DATA_CONFIG);
 8007620:	2100      	movs	r1, #0
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f7ff ffe0 	bl	80075e8 <ai_tinycnnbuow_create>
 8007628:	4603      	mov	r3, r0
 800762a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 800762c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <ai_tinycnnbuow_create_and_init+0x24>
    return err;
 8007634:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007636:	e067      	b.n	8007708 <ai_tinycnnbuow_create_and_init+0xf4>
  }
  
  if (ai_tinycnnbuow_data_params_get(&params) != true) {
 8007638:	f107 0310 	add.w	r3, r7, #16
 800763c:	4618      	mov	r0, r3
 800763e:	f000 f8e7 	bl	8007810 <ai_tinycnnbuow_data_params_get>
 8007642:	4603      	mov	r3, r0
 8007644:	f083 0301 	eor.w	r3, r3, #1
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d008      	beq.n	8007660 <ai_tinycnnbuow_create_and_init+0x4c>
    err = ai_tinycnnbuow_get_error(*network);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff ffbc 	bl	80075d0 <ai_tinycnnbuow_get_error>
 8007658:	4603      	mov	r3, r0
 800765a:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 800765c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800765e:	e053      	b.n	8007708 <ai_tinycnnbuow_create_and_init+0xf4>
  }
#if defined(AI_TINYCNNBUOW_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8007660:	2300      	movs	r3, #0
 8007662:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007666:	e012      	b.n	800768e <ai_tinycnnbuow_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8007668:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 800766c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	4413      	add	r3, r2
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	f107 0310 	add.w	r3, r7, #16
 800767c:	330c      	adds	r3, #12
 800767e:	4618      	mov	r0, r3
 8007680:	f000 f928 	bl	80078d4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8007684:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007688:	3301      	adds	r3, #1
 800768a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <ai_tinycnnbuow_create_and_init+0x8a>
 8007694:	8bfb      	ldrh	r3, [r7, #30]
 8007696:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800769a:	429a      	cmp	r2, r3
 800769c:	d3e4      	bcc.n	8007668 <ai_tinycnnbuow_create_and_init+0x54>
  }
#endif
#if defined(AI_TINYCNNBUOW_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800769e:	2300      	movs	r3, #0
 80076a0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80076a4:	e012      	b.n	80076cc <ai_tinycnnbuow_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80076a6:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 80076aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	4413      	add	r3, r2
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	f107 0310 	add.w	r3, r7, #16
 80076ba:	3304      	adds	r3, #4
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 f909 	bl	80078d4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80076c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80076c6:	3301      	adds	r3, #1
 80076c8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d004      	beq.n	80076dc <ai_tinycnnbuow_create_and_init+0xc8>
 80076d2:	8afb      	ldrh	r3, [r7, #22]
 80076d4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80076d8:	429a      	cmp	r2, r3
 80076da:	d3e4      	bcc.n	80076a6 <ai_tinycnnbuow_create_and_init+0x92>
  }
#endif
  if (ai_tinycnnbuow_init(*network, &params) != true) {
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f107 0210 	add.w	r2, r7, #16
 80076e4:	4611      	mov	r1, r2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 f846 	bl	8007778 <ai_tinycnnbuow_init>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f083 0301 	eor.w	r3, r3, #1
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d006      	beq.n	8007706 <ai_tinycnnbuow_create_and_init+0xf2>
    err = ai_tinycnnbuow_get_error(*network);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7ff ff67 	bl	80075d0 <ai_tinycnnbuow_get_error>
 8007702:	4603      	mov	r3, r0
 8007704:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8007706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007708:	4618      	mov	r0, r3
 800770a:	3750      	adds	r7, #80	@ 0x50
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <ai_tinycnnbuow_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_tinycnnbuow_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <ai_tinycnnbuow_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007720:	4b06      	ldr	r3, [pc, #24]	@ (800773c <ai_tinycnnbuow_inputs_get+0x2c>)
 8007722:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a06      	ldr	r2, [pc, #24]	@ (8007740 <ai_tinycnnbuow_inputs_get+0x30>)
 8007728:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f9bd 	bl	8007aac <ai_platform_inputs_get>
 8007732:	4603      	mov	r3, r0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	240012c4 	.word	0x240012c4
 8007740:	a1c00100 	.word	0xa1c00100

08007744 <ai_tinycnnbuow_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_tinycnnbuow_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d104      	bne.n	800775e <ai_tinycnnbuow_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007754:	4b06      	ldr	r3, [pc, #24]	@ (8007770 <ai_tinycnnbuow_outputs_get+0x2c>)
 8007756:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a06      	ldr	r2, [pc, #24]	@ (8007774 <ai_tinycnnbuow_outputs_get+0x30>)
 800775c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fa1d 	bl	8007ba0 <ai_platform_outputs_get>
 8007766:	4603      	mov	r3, r0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	240012c4 	.word	0x240012c4
 8007774:	a1c00100 	.word	0xa1c00100

08007778 <ai_tinycnnbuow_init>:


AI_API_ENTRY
ai_bool ai_tinycnnbuow_init(
  ai_handle network, const ai_network_params* params)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fac3 	bl	8007d10 <ai_platform_network_init>
 800778a:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800778c:	2301      	movs	r3, #1
 800778e:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <ai_tinycnnbuow_init+0x22>
 8007796:	2300      	movs	r3, #0
 8007798:	e026      	b.n	80077e8 <ai_tinycnnbuow_init+0x70>
  ok &= tinycnnbuow_configure_weights(net_ctx, params);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7ff fe31 	bl	8007404 <tinycnnbuow_configure_weights>
 80077a2:	4603      	mov	r3, r0
 80077a4:	461a      	mov	r2, r3
 80077a6:	7afb      	ldrb	r3, [r7, #11]
 80077a8:	4013      	ands	r3, r2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bf14      	ite	ne
 80077ae:	2301      	movne	r3, #1
 80077b0:	2300      	moveq	r3, #0
 80077b2:	72fb      	strb	r3, [r7, #11]
  ok &= tinycnnbuow_configure_activations(net_ctx, params);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f7ff fcc6 	bl	8007148 <tinycnnbuow_configure_activations>
 80077bc:	4603      	mov	r3, r0
 80077be:	461a      	mov	r2, r3
 80077c0:	7afb      	ldrb	r3, [r7, #11]
 80077c2:	4013      	ands	r3, r2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	bf14      	ite	ne
 80077c8:	2301      	movne	r3, #1
 80077ca:	2300      	moveq	r3, #0
 80077cc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fb40 	bl	8007e54 <ai_platform_network_post_init>
 80077d4:	4603      	mov	r3, r0
 80077d6:	461a      	mov	r2, r3
 80077d8:	7afb      	ldrb	r3, [r7, #11]
 80077da:	4013      	ands	r3, r2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	bf14      	ite	ne
 80077e0:	2301      	movne	r3, #1
 80077e2:	2300      	moveq	r3, #0
 80077e4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80077e6:	7afb      	ldrb	r3, [r7, #11]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <ai_tinycnnbuow_run>:


AI_API_ENTRY
ai_i32 ai_tinycnnbuow_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	68b9      	ldr	r1, [r7, #8]
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fb53 	bl	8007eac <ai_platform_network_process>
 8007806:	4603      	mov	r3, r0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <ai_tinycnnbuow_data_params_get>:
 * @ingroup tinycnnbuow_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_tinycnnbuow_data_params_get(ai_network_params* params)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <ai_tinycnnbuow_data_params_get+0x12>
 800781e:	2300      	movs	r3, #0
 8007820:	e016      	b.n	8007850 <ai_tinycnnbuow_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8007822:	4a0d      	ldr	r2, [pc, #52]	@ (8007858 <ai_tinycnnbuow_data_params_get+0x48>)
 8007824:	f107 0310 	add.w	r3, r7, #16
 8007828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800782c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_TINYCNNBUOW_DATA_ACTIVATIONS_COUNT, g_tinycnnbuow_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8007830:	4a0a      	ldr	r2, [pc, #40]	@ (800785c <ai_tinycnnbuow_data_params_get+0x4c>)
 8007832:	f107 0308 	add.w	r3, r7, #8
 8007836:	e892 0003 	ldmia.w	r2, {r0, r1}
 800783a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_TINYCNNBUOW_DATA_WEIGHTS_COUNT, g_tinycnnbuow_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800783e:	f107 0210 	add.w	r2, r7, #16
 8007842:	f107 0308 	add.w	r3, r7, #8
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f903 	bl	8007a54 <ai_platform_bind_network_params>
 800784e:	4603      	mov	r3, r0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	0800ca08 	.word	0x0800ca08
 800785c:	0800ca10 	.word	0x0800ca10

08007860 <ai_buffer_get_size>:
 8007860:	b348      	cbz	r0, 80078b6 <ai_buffer_get_size+0x56>
 8007862:	4b15      	ldr	r3, [pc, #84]	@ (80078b8 <ai_buffer_get_size+0x58>)
 8007864:	b430      	push	{r4, r5}
 8007866:	6802      	ldr	r2, [r0, #0]
 8007868:	4d14      	ldr	r5, [pc, #80]	@ (80078bc <ai_buffer_get_size+0x5c>)
 800786a:	4013      	ands	r3, r2
 800786c:	6984      	ldr	r4, [r0, #24]
 800786e:	42ab      	cmp	r3, r5
 8007870:	6862      	ldr	r2, [r4, #4]
 8007872:	d103      	bne.n	800787c <ai_buffer_get_size+0x1c>
 8007874:	b111      	cbz	r1, 800787c <ai_buffer_get_size+0x1c>
 8007876:	321f      	adds	r2, #31
 8007878:	f022 021f 	bic.w	r2, r2, #31
 800787c:	7d03      	ldrb	r3, [r0, #20]
 800787e:	6941      	ldr	r1, [r0, #20]
 8007880:	f1a3 0301 	sub.w	r3, r3, #1
 8007884:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8007888:	fab3 f383 	clz	r3, r3
 800788c:	095b      	lsrs	r3, r3, #5
 800788e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8007892:	da0c      	bge.n	80078ae <ai_buffer_get_size+0x4e>
 8007894:	2b01      	cmp	r3, #1
 8007896:	d103      	bne.n	80078a0 <ai_buffer_get_size+0x40>
 8007898:	2802      	cmp	r0, #2
 800789a:	f04f 0302 	mov.w	r3, #2
 800789e:	d006      	beq.n	80078ae <ai_buffer_get_size+0x4e>
 80078a0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80078a4:	3301      	adds	r3, #1
 80078a6:	4298      	cmp	r0, r3
 80078a8:	fb01 f202 	mul.w	r2, r1, r2
 80078ac:	d1f2      	bne.n	8007894 <ai_buffer_get_size+0x34>
 80078ae:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80078b2:	bc30      	pop	{r4, r5}
 80078b4:	4770      	bx	lr
 80078b6:	4770      	bx	lr
 80078b8:	017fffff 	.word	0x017fffff
 80078bc:	000400c0 	.word	0x000400c0

080078c0 <ai_buffer_array_sane>:
 80078c0:	b138      	cbz	r0, 80078d2 <ai_buffer_array_sane+0x12>
 80078c2:	6843      	ldr	r3, [r0, #4]
 80078c4:	b123      	cbz	r3, 80078d0 <ai_buffer_array_sane+0x10>
 80078c6:	8840      	ldrh	r0, [r0, #2]
 80078c8:	3800      	subs	r0, #0
 80078ca:	bf18      	it	ne
 80078cc:	2001      	movne	r0, #1
 80078ce:	4770      	bx	lr
 80078d0:	4618      	mov	r0, r3
 80078d2:	4770      	bx	lr

080078d4 <ai_buffer_array_item_set_address>:
 80078d4:	b158      	cbz	r0, 80078ee <ai_buffer_array_item_set_address+0x1a>
 80078d6:	6843      	ldr	r3, [r0, #4]
 80078d8:	b143      	cbz	r3, 80078ec <ai_buffer_array_item_set_address+0x18>
 80078da:	8840      	ldrh	r0, [r0, #2]
 80078dc:	b138      	cbz	r0, 80078ee <ai_buffer_array_item_set_address+0x1a>
 80078de:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80078e2:	2001      	movs	r0, #1
 80078e4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	4770      	bx	lr
 80078ec:	4618      	mov	r0, r3
 80078ee:	4770      	bx	lr

080078f0 <ai_platform_get_weights_map>:
 80078f0:	2900      	cmp	r1, #0
 80078f2:	bf18      	it	ne
 80078f4:	2800      	cmpne	r0, #0
 80078f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f8:	bf0c      	ite	eq
 80078fa:	2401      	moveq	r4, #1
 80078fc:	2400      	movne	r4, #0
 80078fe:	2a00      	cmp	r2, #0
 8007900:	bf08      	it	eq
 8007902:	f044 0401 	orreq.w	r4, r4, #1
 8007906:	b114      	cbz	r4, 800790e <ai_platform_get_weights_map+0x1e>
 8007908:	2400      	movs	r4, #0
 800790a:	4620      	mov	r0, r4
 800790c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800790e:	4616      	mov	r6, r2
 8007910:	4b22      	ldr	r3, [pc, #136]	@ (800799c <ai_platform_get_weights_map+0xac>)
 8007912:	6812      	ldr	r2, [r2, #0]
 8007914:	4605      	mov	r5, r0
 8007916:	460f      	mov	r7, r1
 8007918:	429a      	cmp	r2, r3
 800791a:	d024      	beq.n	8007966 <ai_platform_get_weights_map+0x76>
 800791c:	6870      	ldr	r0, [r6, #4]
 800791e:	2800      	cmp	r0, #0
 8007920:	d0f2      	beq.n	8007908 <ai_platform_get_weights_map+0x18>
 8007922:	6806      	ldr	r6, [r0, #0]
 8007924:	429e      	cmp	r6, r3
 8007926:	d006      	beq.n	8007936 <ai_platform_get_weights_map+0x46>
 8007928:	f1a1 0401 	sub.w	r4, r1, #1
 800792c:	6028      	str	r0, [r5, #0]
 800792e:	fab4 f484 	clz	r4, r4
 8007932:	0964      	lsrs	r4, r4, #5
 8007934:	e7e9      	b.n	800790a <ai_platform_get_weights_map+0x1a>
 8007936:	3d04      	subs	r5, #4
 8007938:	4601      	mov	r1, r0
 800793a:	4623      	mov	r3, r4
 800793c:	e004      	b.n	8007948 <ai_platform_get_weights_map+0x58>
 800793e:	3301      	adds	r3, #1
 8007940:	f845 2f04 	str.w	r2, [r5, #4]!
 8007944:	429f      	cmp	r7, r3
 8007946:	d903      	bls.n	8007950 <ai_platform_get_weights_map+0x60>
 8007948:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800794c:	42b2      	cmp	r2, r6
 800794e:	d1f6      	bne.n	800793e <ai_platform_get_weights_map+0x4e>
 8007950:	429f      	cmp	r7, r3
 8007952:	d1da      	bne.n	800790a <ai_platform_get_weights_map+0x1a>
 8007954:	1c79      	adds	r1, r7, #1
 8007956:	4b11      	ldr	r3, [pc, #68]	@ (800799c <ai_platform_get_weights_map+0xac>)
 8007958:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 800795c:	1ae4      	subs	r4, r4, r3
 800795e:	fab4 f484 	clz	r4, r4
 8007962:	0964      	lsrs	r4, r4, #5
 8007964:	e7d1      	b.n	800790a <ai_platform_get_weights_map+0x1a>
 8007966:	1d30      	adds	r0, r6, #4
 8007968:	f7ff ffaa 	bl	80078c0 <ai_buffer_array_sane>
 800796c:	2800      	cmp	r0, #0
 800796e:	d0cb      	beq.n	8007908 <ai_platform_get_weights_map+0x18>
 8007970:	88f3      	ldrh	r3, [r6, #6]
 8007972:	429f      	cmp	r7, r3
 8007974:	d1c8      	bne.n	8007908 <ai_platform_get_weights_map+0x18>
 8007976:	3d04      	subs	r5, #4
 8007978:	4622      	mov	r2, r4
 800797a:	e004      	b.n	8007986 <ai_platform_get_weights_map+0x96>
 800797c:	3201      	adds	r2, #1
 800797e:	f845 3f04 	str.w	r3, [r5, #4]!
 8007982:	4297      	cmp	r7, r2
 8007984:	d905      	bls.n	8007992 <ai_platform_get_weights_map+0xa2>
 8007986:	68b3      	ldr	r3, [r6, #8]
 8007988:	4423      	add	r3, r4
 800798a:	341c      	adds	r4, #28
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1f4      	bne.n	800797c <ai_platform_get_weights_map+0x8c>
 8007992:	1abc      	subs	r4, r7, r2
 8007994:	fab4 f484 	clz	r4, r4
 8007998:	0964      	lsrs	r4, r4, #5
 800799a:	e7b6      	b.n	800790a <ai_platform_get_weights_map+0x1a>
 800799c:	a1facade 	.word	0xa1facade

080079a0 <ai_platform_get_activations_map>:
 80079a0:	2900      	cmp	r1, #0
 80079a2:	bf18      	it	ne
 80079a4:	2800      	cmpne	r0, #0
 80079a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a8:	bf0c      	ite	eq
 80079aa:	2401      	moveq	r4, #1
 80079ac:	2400      	movne	r4, #0
 80079ae:	2a00      	cmp	r2, #0
 80079b0:	bf08      	it	eq
 80079b2:	f044 0401 	orreq.w	r4, r4, #1
 80079b6:	b114      	cbz	r4, 80079be <ai_platform_get_activations_map+0x1e>
 80079b8:	2400      	movs	r4, #0
 80079ba:	4620      	mov	r0, r4
 80079bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079be:	4616      	mov	r6, r2
 80079c0:	4b23      	ldr	r3, [pc, #140]	@ (8007a50 <ai_platform_get_activations_map+0xb0>)
 80079c2:	6812      	ldr	r2, [r2, #0]
 80079c4:	4605      	mov	r5, r0
 80079c6:	460f      	mov	r7, r1
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d024      	beq.n	8007a16 <ai_platform_get_activations_map+0x76>
 80079cc:	6a30      	ldr	r0, [r6, #32]
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d0f2      	beq.n	80079b8 <ai_platform_get_activations_map+0x18>
 80079d2:	6806      	ldr	r6, [r0, #0]
 80079d4:	429e      	cmp	r6, r3
 80079d6:	d006      	beq.n	80079e6 <ai_platform_get_activations_map+0x46>
 80079d8:	f1a1 0401 	sub.w	r4, r1, #1
 80079dc:	6028      	str	r0, [r5, #0]
 80079de:	fab4 f484 	clz	r4, r4
 80079e2:	0964      	lsrs	r4, r4, #5
 80079e4:	e7e9      	b.n	80079ba <ai_platform_get_activations_map+0x1a>
 80079e6:	3d04      	subs	r5, #4
 80079e8:	4601      	mov	r1, r0
 80079ea:	4623      	mov	r3, r4
 80079ec:	e004      	b.n	80079f8 <ai_platform_get_activations_map+0x58>
 80079ee:	3301      	adds	r3, #1
 80079f0:	f845 2f04 	str.w	r2, [r5, #4]!
 80079f4:	429f      	cmp	r7, r3
 80079f6:	d903      	bls.n	8007a00 <ai_platform_get_activations_map+0x60>
 80079f8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80079fc:	42b2      	cmp	r2, r6
 80079fe:	d1f6      	bne.n	80079ee <ai_platform_get_activations_map+0x4e>
 8007a00:	429f      	cmp	r7, r3
 8007a02:	d1da      	bne.n	80079ba <ai_platform_get_activations_map+0x1a>
 8007a04:	1c79      	adds	r1, r7, #1
 8007a06:	4b12      	ldr	r3, [pc, #72]	@ (8007a50 <ai_platform_get_activations_map+0xb0>)
 8007a08:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8007a0c:	1ae4      	subs	r4, r4, r3
 8007a0e:	fab4 f484 	clz	r4, r4
 8007a12:	0964      	lsrs	r4, r4, #5
 8007a14:	e7d1      	b.n	80079ba <ai_platform_get_activations_map+0x1a>
 8007a16:	f106 000c 	add.w	r0, r6, #12
 8007a1a:	f7ff ff51 	bl	80078c0 <ai_buffer_array_sane>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d0ca      	beq.n	80079b8 <ai_platform_get_activations_map+0x18>
 8007a22:	89f3      	ldrh	r3, [r6, #14]
 8007a24:	429f      	cmp	r7, r3
 8007a26:	d1c7      	bne.n	80079b8 <ai_platform_get_activations_map+0x18>
 8007a28:	3d04      	subs	r5, #4
 8007a2a:	4622      	mov	r2, r4
 8007a2c:	e004      	b.n	8007a38 <ai_platform_get_activations_map+0x98>
 8007a2e:	3201      	adds	r2, #1
 8007a30:	f845 3f04 	str.w	r3, [r5, #4]!
 8007a34:	4297      	cmp	r7, r2
 8007a36:	d905      	bls.n	8007a44 <ai_platform_get_activations_map+0xa4>
 8007a38:	6933      	ldr	r3, [r6, #16]
 8007a3a:	4423      	add	r3, r4
 8007a3c:	341c      	adds	r4, #28
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1f4      	bne.n	8007a2e <ai_platform_get_activations_map+0x8e>
 8007a44:	1abc      	subs	r4, r7, r2
 8007a46:	fab4 f484 	clz	r4, r4
 8007a4a:	0964      	lsrs	r4, r4, #5
 8007a4c:	e7b5      	b.n	80079ba <ai_platform_get_activations_map+0x1a>
 8007a4e:	bf00      	nop
 8007a50:	a1facade 	.word	0xa1facade

08007a54 <ai_platform_bind_network_params>:
 8007a54:	2a00      	cmp	r2, #0
 8007a56:	bf18      	it	ne
 8007a58:	2900      	cmpne	r1, #0
 8007a5a:	d010      	beq.n	8007a7e <ai_platform_bind_network_params+0x2a>
 8007a5c:	b178      	cbz	r0, 8007a7e <ai_platform_bind_network_params+0x2a>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4808      	ldr	r0, [pc, #32]	@ (8007a84 <ai_platform_bind_network_params+0x30>)
 8007a62:	f103 0c0c 	add.w	ip, r3, #12
 8007a66:	f843 0b04 	str.w	r0, [r3], #4
 8007a6a:	c903      	ldmia	r1, {r0, r1}
 8007a6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8007a70:	2301      	movs	r3, #1
 8007a72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a76:	e88c 0003 	stmia.w	ip, {r0, r1}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	4770      	bx	lr
 8007a7e:	2300      	movs	r3, #0
 8007a80:	4618      	mov	r0, r3
 8007a82:	4770      	bx	lr
 8007a84:	a1facade 	.word	0xa1facade

08007a88 <ai_platform_network_get_error>:
 8007a88:	4b04      	ldr	r3, [pc, #16]	@ (8007a9c <ai_platform_network_get_error+0x14>)
 8007a8a:	6802      	ldr	r2, [r0, #0]
 8007a8c:	4393      	bics	r3, r2
 8007a8e:	d102      	bne.n	8007a96 <ai_platform_network_get_error+0xe>
 8007a90:	300c      	adds	r0, #12
 8007a92:	f000 bc33 	b.w	80082fc <core_get_error>
 8007a96:	f241 0010 	movw	r0, #4112	@ 0x1010
 8007a9a:	4770      	bx	lr
 8007a9c:	a1c00100 	.word	0xa1c00100

08007aa0 <ai_platform_network_set_error>:
 8007aa0:	b110      	cbz	r0, 8007aa8 <ai_platform_network_set_error+0x8>
 8007aa2:	300c      	adds	r0, #12
 8007aa4:	f000 bc30 	b.w	8008308 <core_set_error>
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop

08007aac <ai_platform_inputs_get>:
 8007aac:	4b3b      	ldr	r3, [pc, #236]	@ (8007b9c <ai_platform_inputs_get+0xf0>)
 8007aae:	6802      	ldr	r2, [r0, #0]
 8007ab0:	4393      	bics	r3, r2
 8007ab2:	d168      	bne.n	8007b86 <ai_platform_inputs_get+0xda>
 8007ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8007aba:	b085      	sub	sp, #20
 8007abc:	4605      	mov	r5, r0
 8007abe:	460f      	mov	r7, r1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d053      	beq.n	8007b6c <ai_platform_inputs_get+0xc0>
 8007ac4:	f8d0 b034 	ldr.w	fp, [r0, #52]	@ 0x34
 8007ac8:	f1bb 0f00 	cmp.w	fp, #0
 8007acc:	d04e      	beq.n	8007b6c <ai_platform_inputs_get+0xc0>
 8007ace:	f04f 0a00 	mov.w	sl, #0
 8007ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad6:	4656      	mov	r6, sl
 8007ad8:	46d1      	mov	r9, sl
 8007ada:	46da      	mov	sl, fp
 8007adc:	e016      	b.n	8007b0c <ai_platform_inputs_get+0x60>
 8007ade:	9a01      	ldr	r2, [sp, #4]
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	f84b 3002 	str.w	r3, [fp, r2]
 8007ae6:	69aa      	ldr	r2, [r5, #24]
 8007ae8:	f04f 0301 	mov.w	r3, #1
 8007aec:	6855      	ldr	r5, [r2, #4]
 8007aee:	6020      	str	r0, [r4, #0]
 8007af0:	3601      	adds	r6, #1
 8007af2:	7523      	strb	r3, [r4, #20]
 8007af4:	f109 091c 	add.w	r9, r9, #28
 8007af8:	6960      	ldr	r0, [r4, #20]
 8007afa:	2300      	movs	r3, #0
 8007afc:	f368 201f 	bfi	r0, r8, #8, #24
 8007b00:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8007b04:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007b08:	e9c4 0105 	strd	r0, r1, [r4, #20]
 8007b0c:	f8ba 3000 	ldrh.w	r3, [sl]
 8007b10:	00f2      	lsls	r2, r6, #3
 8007b12:	42b3      	cmp	r3, r6
 8007b14:	9201      	str	r2, [sp, #4]
 8007b16:	d938      	bls.n	8007b8a <ai_platform_inputs_get+0xde>
 8007b18:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d034      	beq.n	8007b8a <ai_platform_inputs_get+0xde>
 8007b20:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 8007b24:	2d00      	cmp	r5, #0
 8007b26:	d030      	beq.n	8007b8a <ai_platform_inputs_get+0xde>
 8007b28:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007b2c:	69a8      	ldr	r0, [r5, #24]
 8007b2e:	68e9      	ldr	r1, [r5, #12]
 8007b30:	6800      	ldr	r0, [r0, #0]
 8007b32:	9100      	str	r1, [sp, #0]
 8007b34:	e9d3 4b01 	ldrd	r4, fp, [r3, #4]
 8007b38:	68ab      	ldr	r3, [r5, #8]
 8007b3a:	eb0b 07c6 	add.w	r7, fp, r6, lsl #3
 8007b3e:	444c      	add	r4, r9
 8007b40:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8007b44:	f003 fdac 	bl	800b6a0 <ai_array_to_buffer_fmt>
 8007b48:	69aa      	ldr	r2, [r5, #24]
 8007b4a:	9900      	ldr	r1, [sp, #0]
 8007b4c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8007b50:	2f00      	cmp	r7, #0
 8007b52:	d0c9      	beq.n	8007ae8 <ai_platform_inputs_get+0x3c>
 8007b54:	2200      	movs	r2, #0
 8007b56:	f84b 2036 	str.w	r2, [fp, r6, lsl #3]
 8007b5a:	682a      	ldr	r2, [r5, #0]
 8007b5c:	607a      	str	r2, [r7, #4]
 8007b5e:	b112      	cbz	r2, 8007b66 <ai_platform_inputs_get+0xba>
 8007b60:	8852      	ldrh	r2, [r2, #2]
 8007b62:	2a00      	cmp	r2, #0
 8007b64:	d1bb      	bne.n	8007ade <ai_platform_inputs_get+0x32>
 8007b66:	69aa      	ldr	r2, [r5, #24]
 8007b68:	2700      	movs	r7, #0
 8007b6a:	e7bd      	b.n	8007ae8 <ai_platform_inputs_get+0x3c>
 8007b6c:	2600      	movs	r6, #0
 8007b6e:	2218      	movs	r2, #24
 8007b70:	2111      	movs	r1, #17
 8007b72:	f105 000c 	add.w	r0, r5, #12
 8007b76:	f000 fbc7 	bl	8008308 <core_set_error>
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	b107      	cbz	r7, 8007b80 <ai_platform_inputs_get+0xd4>
 8007b7e:	803e      	strh	r6, [r7, #0]
 8007b80:	b005      	add	sp, #20
 8007b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b86:	2000      	movs	r0, #0
 8007b88:	4770      	bx	lr
 8007b8a:	b2b6      	uxth	r6, r6
 8007b8c:	e9dd 5702 	ldrd	r5, r7, [sp, #8]
 8007b90:	2e00      	cmp	r6, #0
 8007b92:	d0eb      	beq.n	8007b6c <ai_platform_inputs_get+0xc0>
 8007b94:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007b98:	6858      	ldr	r0, [r3, #4]
 8007b9a:	e7ef      	b.n	8007b7c <ai_platform_inputs_get+0xd0>
 8007b9c:	a1c00100 	.word	0xa1c00100

08007ba0 <ai_platform_outputs_get>:
 8007ba0:	4b39      	ldr	r3, [pc, #228]	@ (8007c88 <ai_platform_outputs_get+0xe8>)
 8007ba2:	6802      	ldr	r2, [r0, #0]
 8007ba4:	4393      	bics	r3, r2
 8007ba6:	d16d      	bne.n	8007c84 <ai_platform_outputs_get+0xe4>
 8007ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bac:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8007bae:	b085      	sub	sp, #20
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	460f      	mov	r7, r1
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d94f      	bls.n	8007c58 <ai_platform_outputs_get+0xb8>
 8007bb8:	f04f 0a00 	mov.w	sl, #0
 8007bbc:	f8d0 b034 	ldr.w	fp, [r0, #52]	@ 0x34
 8007bc0:	4656      	mov	r6, sl
 8007bc2:	46d1      	mov	r9, sl
 8007bc4:	46da      	mov	sl, fp
 8007bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bca:	e016      	b.n	8007bfa <ai_platform_outputs_get+0x5a>
 8007bcc:	9a01      	ldr	r2, [sp, #4]
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f84b 3002 	str.w	r3, [fp, r2]
 8007bd4:	69aa      	ldr	r2, [r5, #24]
 8007bd6:	f04f 0301 	mov.w	r3, #1
 8007bda:	6855      	ldr	r5, [r2, #4]
 8007bdc:	6020      	str	r0, [r4, #0]
 8007bde:	3601      	adds	r6, #1
 8007be0:	7523      	strb	r3, [r4, #20]
 8007be2:	f109 091c 	add.w	r9, r9, #28
 8007be6:	6960      	ldr	r0, [r4, #20]
 8007be8:	2300      	movs	r3, #0
 8007bea:	f368 201f 	bfi	r0, r8, #8, #24
 8007bee:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8007bf2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007bf6:	e9c4 0105 	strd	r0, r1, [r4, #20]
 8007bfa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007bfe:	00f2      	lsls	r2, r6, #3
 8007c00:	42b3      	cmp	r3, r6
 8007c02:	9201      	str	r2, [sp, #4]
 8007c04:	d935      	bls.n	8007c72 <ai_platform_outputs_get+0xd2>
 8007c06:	f8da 3010 	ldr.w	r3, [sl, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d031      	beq.n	8007c72 <ai_platform_outputs_get+0xd2>
 8007c0e:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 8007c12:	b375      	cbz	r5, 8007c72 <ai_platform_outputs_get+0xd2>
 8007c14:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007c18:	69a8      	ldr	r0, [r5, #24]
 8007c1a:	68e9      	ldr	r1, [r5, #12]
 8007c1c:	6800      	ldr	r0, [r0, #0]
 8007c1e:	9100      	str	r1, [sp, #0]
 8007c20:	e9d3 4b01 	ldrd	r4, fp, [r3, #4]
 8007c24:	68ab      	ldr	r3, [r5, #8]
 8007c26:	eb0b 07c6 	add.w	r7, fp, r6, lsl #3
 8007c2a:	444c      	add	r4, r9
 8007c2c:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8007c30:	f003 fd36 	bl	800b6a0 <ai_array_to_buffer_fmt>
 8007c34:	69aa      	ldr	r2, [r5, #24]
 8007c36:	9900      	ldr	r1, [sp, #0]
 8007c38:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8007c3c:	2f00      	cmp	r7, #0
 8007c3e:	d0ca      	beq.n	8007bd6 <ai_platform_outputs_get+0x36>
 8007c40:	2200      	movs	r2, #0
 8007c42:	f84b 2036 	str.w	r2, [fp, r6, lsl #3]
 8007c46:	682a      	ldr	r2, [r5, #0]
 8007c48:	607a      	str	r2, [r7, #4]
 8007c4a:	b112      	cbz	r2, 8007c52 <ai_platform_outputs_get+0xb2>
 8007c4c:	8852      	ldrh	r2, [r2, #2]
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	d1bc      	bne.n	8007bcc <ai_platform_outputs_get+0x2c>
 8007c52:	69aa      	ldr	r2, [r5, #24]
 8007c54:	2700      	movs	r7, #0
 8007c56:	e7be      	b.n	8007bd6 <ai_platform_outputs_get+0x36>
 8007c58:	2600      	movs	r6, #0
 8007c5a:	2218      	movs	r2, #24
 8007c5c:	2111      	movs	r1, #17
 8007c5e:	f105 000c 	add.w	r0, r5, #12
 8007c62:	f000 fb51 	bl	8008308 <core_set_error>
 8007c66:	4630      	mov	r0, r6
 8007c68:	b107      	cbz	r7, 8007c6c <ai_platform_outputs_get+0xcc>
 8007c6a:	803e      	strh	r6, [r7, #0]
 8007c6c:	b005      	add	sp, #20
 8007c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c72:	b2b6      	uxth	r6, r6
 8007c74:	e9dd 5702 	ldrd	r5, r7, [sp, #8]
 8007c78:	2e00      	cmp	r6, #0
 8007c7a:	d0ed      	beq.n	8007c58 <ai_platform_outputs_get+0xb8>
 8007c7c:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007c80:	6858      	ldr	r0, [r3, #4]
 8007c82:	e7f1      	b.n	8007c68 <ai_platform_outputs_get+0xc8>
 8007c84:	2000      	movs	r0, #0
 8007c86:	4770      	bx	lr
 8007c88:	a1c00100 	.word	0xa1c00100

08007c8c <ai_platform_network_create>:
 8007c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c90:	b083      	sub	sp, #12
 8007c92:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8007c96:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8007c9a:	b320      	cbz	r0, 8007ce6 <ai_platform_network_create+0x5a>
 8007c9c:	6002      	str	r2, [r0, #0]
 8007c9e:	4616      	mov	r6, r2
 8007ca0:	461f      	mov	r7, r3
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	f000 fb28 	bl	80082f8 <core_init>
 8007ca8:	b970      	cbnz	r0, 8007cc8 <ai_platform_network_create+0x3c>
 8007caa:	2530      	movs	r5, #48	@ 0x30
 8007cac:	2300      	movs	r3, #0
 8007cae:	6023      	str	r3, [r4, #0]
 8007cb0:	2410      	movs	r4, #16
 8007cb2:	464a      	mov	r2, r9
 8007cb4:	4641      	mov	r1, r8
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	f003 fd94 	bl	800b7e4 <ai_version_get>
 8007cbc:	60b0      	str	r0, [r6, #8]
 8007cbe:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8007cc2:	b003      	add	sp, #12
 8007cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4641      	mov	r1, r8
 8007ccc:	4638      	mov	r0, r7
 8007cce:	f003 fd89 	bl	800b7e4 <ai_version_get>
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2105      	movs	r1, #5
 8007cd8:	2001      	movs	r0, #1
 8007cda:	f003 fd83 	bl	800b7e4 <ai_version_get>
 8007cde:	4285      	cmp	r5, r0
 8007ce0:	d008      	beq.n	8007cf4 <ai_platform_network_create+0x68>
 8007ce2:	2501      	movs	r5, #1
 8007ce4:	e7e2      	b.n	8007cac <ai_platform_network_create+0x20>
 8007ce6:	2510      	movs	r5, #16
 8007ce8:	462c      	mov	r4, r5
 8007cea:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8007cee:	b003      	add	sp, #12
 8007cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cf4:	4b05      	ldr	r3, [pc, #20]	@ (8007d0c <ai_platform_network_create+0x80>)
 8007cf6:	a801      	add	r0, sp, #4
 8007cf8:	9301      	str	r3, [sp, #4]
 8007cfa:	f000 fb11 	bl	8008320 <ai_check_custom_types>
 8007cfe:	b110      	cbz	r0, 8007d06 <ai_platform_network_create+0x7a>
 8007d00:	2400      	movs	r4, #0
 8007d02:	4625      	mov	r5, r4
 8007d04:	e7d5      	b.n	8007cb2 <ai_platform_network_create+0x26>
 8007d06:	2502      	movs	r5, #2
 8007d08:	e7d0      	b.n	8007cac <ai_platform_network_create+0x20>
 8007d0a:	bf00      	nop
 8007d0c:	84048403 	.word	0x84048403

08007d10 <ai_platform_network_init>:
 8007d10:	4a4e      	ldr	r2, [pc, #312]	@ (8007e4c <ai_platform_network_init+0x13c>)
 8007d12:	460b      	mov	r3, r1
 8007d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d18:	6801      	ldr	r1, [r0, #0]
 8007d1a:	ea01 0802 	and.w	r8, r1, r2
 8007d1e:	438a      	bics	r2, r1
 8007d20:	d13b      	bne.n	8007d9a <ai_platform_network_init+0x8a>
 8007d22:	4604      	mov	r4, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d05b      	beq.n	8007de0 <ai_platform_network_init+0xd0>
 8007d28:	4a49      	ldr	r2, [pc, #292]	@ (8007e50 <ai_platform_network_init+0x140>)
 8007d2a:	6818      	ldr	r0, [r3, #0]
 8007d2c:	4290      	cmp	r0, r2
 8007d2e:	d10a      	bne.n	8007d46 <ai_platform_network_init+0x36>
 8007d30:	4541      	cmp	r1, r8
 8007d32:	e9d3 7203 	ldrd	r7, r2, [r3, #12]
 8007d36:	e9d3 0301 	ldrd	r0, r3, [r3, #4]
 8007d3a:	d042      	beq.n	8007dc2 <ai_platform_network_init+0xb2>
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	4620      	mov	r0, r4
 8007d40:	6123      	str	r3, [r4, #16]
 8007d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d46:	461d      	mov	r5, r3
 8007d48:	2101      	movs	r1, #1
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8007d50:	f105 061c 	add.w	r6, r5, #28
 8007d54:	f7ff fd84 	bl	8007860 <ai_buffer_get_size>
 8007d58:	4607      	mov	r7, r0
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f8d5 a020 	ldr.w	sl, [r5, #32]
 8007d62:	f7ff fd7d 	bl	8007860 <ai_buffer_get_size>
 8007d66:	b1d7      	cbz	r7, 8007d9e <ai_platform_network_init+0x8e>
 8007d68:	b340      	cbz	r0, 8007dbc <ai_platform_network_init+0xac>
 8007d6a:	f1ba 0f00 	cmp.w	sl, #0
 8007d6e:	d030      	beq.n	8007dd2 <ai_platform_network_init+0xc2>
 8007d70:	f04f 0e01 	mov.w	lr, #1
 8007d74:	f1b9 0f00 	cmp.w	r9, #0
 8007d78:	d038      	beq.n	8007dec <ai_platform_network_init+0xdc>
 8007d7a:	2001      	movs	r0, #1
 8007d7c:	4b33      	ldr	r3, [pc, #204]	@ (8007e4c <ai_platform_network_init+0x13c>)
 8007d7e:	ea4f 470e 	mov.w	r7, lr, lsl #16
 8007d82:	6822      	ldr	r2, [r4, #0]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d1d9      	bne.n	8007d3c <ai_platform_network_init+0x2c>
 8007d88:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8007d8a:	4283      	cmp	r3, r0
 8007d8c:	d235      	bcs.n	8007dfa <ai_platform_network_init+0xea>
 8007d8e:	2212      	movs	r2, #18
 8007d90:	2116      	movs	r1, #22
 8007d92:	f104 000c 	add.w	r0, r4, #12
 8007d96:	f000 fab7 	bl	8008308 <core_set_error>
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	e7d1      	b.n	8007d42 <ai_platform_network_init+0x32>
 8007d9e:	b138      	cbz	r0, 8007db0 <ai_platform_network_init+0xa0>
 8007da0:	f1ba 0f00 	cmp.w	sl, #0
 8007da4:	d015      	beq.n	8007dd2 <ai_platform_network_init+0xc2>
 8007da6:	4638      	mov	r0, r7
 8007da8:	f04f 0e01 	mov.w	lr, #1
 8007dac:	463d      	mov	r5, r7
 8007dae:	e7e5      	b.n	8007d7c <ai_platform_network_init+0x6c>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	4543      	cmp	r3, r8
 8007db4:	d1c2      	bne.n	8007d3c <ai_platform_network_init+0x2c>
 8007db6:	4607      	mov	r7, r0
 8007db8:	6220      	str	r0, [r4, #32]
 8007dba:	e005      	b.n	8007dc8 <ai_platform_network_init+0xb8>
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	4686      	mov	lr, r0
 8007dc0:	e7d8      	b.n	8007d74 <ai_platform_network_init+0x64>
 8007dc2:	e9c4 0308 	strd	r0, r3, [r4, #32]
 8007dc6:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8007dc8:	4620      	mov	r0, r4
 8007dca:	62a7      	str	r7, [r4, #40]	@ 0x28
 8007dcc:	f000 fad0 	bl	8008370 <ai_layers_init_all>
 8007dd0:	e7b4      	b.n	8007d3c <ai_platform_network_init+0x2c>
 8007dd2:	2213      	movs	r2, #19
 8007dd4:	2110      	movs	r1, #16
 8007dd6:	f104 000c 	add.w	r0, r4, #12
 8007dda:	f000 fa95 	bl	8008308 <core_set_error>
 8007dde:	e7dc      	b.n	8007d9a <ai_platform_network_init+0x8a>
 8007de0:	2211      	movs	r2, #17
 8007de2:	2110      	movs	r1, #16
 8007de4:	300c      	adds	r0, #12
 8007de6:	f000 fa8f 	bl	8008308 <core_set_error>
 8007dea:	e7d6      	b.n	8007d9a <ai_platform_network_init+0x8a>
 8007dec:	2212      	movs	r2, #18
 8007dee:	2110      	movs	r1, #16
 8007df0:	f104 000c 	add.w	r0, r4, #12
 8007df4:	f000 fa88 	bl	8008308 <core_set_error>
 8007df8:	e7cf      	b.n	8007d9a <ai_platform_network_init+0x8a>
 8007dfa:	b1e0      	cbz	r0, 8007e36 <ai_platform_network_init+0x126>
 8007dfc:	46ac      	mov	ip, r5
 8007dfe:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007e00:	f44f 3880 	mov.w	r8, #65536	@ 0x10000
 8007e04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e0a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007e0e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007e12:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007e14:	f8c4 8020 	str.w	r8, [r4, #32]
 8007e18:	4573      	cmp	r3, lr
 8007e1a:	d310      	bcc.n	8007e3e <ai_platform_network_init+0x12e>
 8007e1c:	f1be 0f00 	cmp.w	lr, #0
 8007e20:	d0d2      	beq.n	8007dc8 <ai_platform_network_init+0xb8>
 8007e22:	46b4      	mov	ip, r6
 8007e24:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8007e26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e2c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007e30:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007e34:	e7c8      	b.n	8007dc8 <ai_platform_network_init+0xb8>
 8007e36:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007e38:	6220      	str	r0, [r4, #32]
 8007e3a:	4573      	cmp	r3, lr
 8007e3c:	d2ee      	bcs.n	8007e1c <ai_platform_network_init+0x10c>
 8007e3e:	2213      	movs	r2, #19
 8007e40:	2116      	movs	r1, #22
 8007e42:	f104 000c 	add.w	r0, r4, #12
 8007e46:	f000 fa5f 	bl	8008308 <core_set_error>
 8007e4a:	e7a6      	b.n	8007d9a <ai_platform_network_init+0x8a>
 8007e4c:	a1c00100 	.word	0xa1c00100
 8007e50:	a1facade 	.word	0xa1facade

08007e54 <ai_platform_network_post_init>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4b14      	ldr	r3, [pc, #80]	@ (8007ea8 <ai_platform_network_post_init+0x54>)
 8007e58:	6802      	ldr	r2, [r0, #0]
 8007e5a:	ea02 0103 	and.w	r1, r2, r3
 8007e5e:	4393      	bics	r3, r2
 8007e60:	d10c      	bne.n	8007e7c <ai_platform_network_post_init+0x28>
 8007e62:	6903      	ldr	r3, [r0, #16]
 8007e64:	4604      	mov	r4, r0
 8007e66:	079b      	lsls	r3, r3, #30
 8007e68:	d503      	bpl.n	8007e72 <ai_platform_network_post_init+0x1e>
 8007e6a:	428a      	cmp	r2, r1
 8007e6c:	d008      	beq.n	8007e80 <ai_platform_network_post_init+0x2c>
 8007e6e:	2001      	movs	r0, #1
 8007e70:	bd38      	pop	{r3, r4, r5, pc}
 8007e72:	2210      	movs	r2, #16
 8007e74:	2111      	movs	r1, #17
 8007e76:	300c      	adds	r0, #12
 8007e78:	f000 fa46 	bl	8008308 <core_set_error>
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	bd38      	pop	{r3, r4, r5, pc}
 8007e80:	f000 fa86 	bl	8008390 <ai_layers_post_init_all>
 8007e84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0f1      	beq.n	8007e6e <ai_platform_network_post_init+0x1a>
 8007e8a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8007e8c:	2d00      	cmp	r5, #0
 8007e8e:	d0ee      	beq.n	8007e6e <ai_platform_network_post_init+0x1a>
 8007e90:	4629      	mov	r1, r5
 8007e92:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007e94:	2000      	movs	r0, #0
 8007e96:	4798      	blx	r3
 8007e98:	692b      	ldr	r3, [r5, #16]
 8007e9a:	42ab      	cmp	r3, r5
 8007e9c:	461d      	mov	r5, r3
 8007e9e:	d0e6      	beq.n	8007e6e <ai_platform_network_post_init+0x1a>
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d0e4      	beq.n	8007e6e <ai_platform_network_post_init+0x1a>
 8007ea4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ea6:	e7f3      	b.n	8007e90 <ai_platform_network_post_init+0x3c>
 8007ea8:	a1c00100 	.word	0xa1c00100

08007eac <ai_platform_network_process>:
 8007eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	4bba      	ldr	r3, [pc, #744]	@ (800819c <ai_platform_network_process+0x2f0>)
 8007eb2:	4691      	mov	r9, r2
 8007eb4:	6802      	ldr	r2, [r0, #0]
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	4393      	bics	r3, r2
 8007eba:	f040 812f 	bne.w	800811c <ai_platform_network_process+0x270>
 8007ebe:	6903      	ldr	r3, [r0, #16]
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	2a00      	cmp	r2, #0
 8007eca:	f000 811e 	beq.w	800810a <ai_platform_network_process+0x25e>
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8007ed6:	6182      	str	r2, [r0, #24]
 8007ed8:	f040 811a 	bne.w	8008110 <ai_platform_network_process+0x264>
 8007edc:	2900      	cmp	r1, #0
 8007ede:	f000 8128 	beq.w	8008132 <ai_platform_network_process+0x286>
 8007ee2:	faba f78a 	clz	r7, sl
 8007ee6:	097f      	lsrs	r7, r7, #5
 8007ee8:	f1ba 0f00 	cmp.w	sl, #0
 8007eec:	f000 8121 	beq.w	8008132 <ai_platform_network_process+0x286>
 8007ef0:	f8ba 3000 	ldrh.w	r3, [sl]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 811c 	beq.w	8008132 <ai_platform_network_process+0x286>
 8007efa:	698b      	ldr	r3, [r1, #24]
 8007efc:	460d      	mov	r5, r1
 8007efe:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8007f08:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d072      	beq.n	8007ff6 <ai_platform_network_process+0x14a>
 8007f10:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8007f14:	2e00      	cmp	r6, #0
 8007f16:	d06e      	beq.n	8007ff6 <ai_platform_network_process+0x14a>
 8007f18:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007f1c:	ea4f 1907 	mov.w	r9, r7, lsl #4
 8007f20:	f8d3 b000 	ldr.w	fp, [r3]
 8007f24:	eb1b 1807 	adds.w	r8, fp, r7, lsl #4
 8007f28:	f000 8102 	beq.w	8008130 <ai_platform_network_process+0x284>
 8007f2c:	69b3      	ldr	r3, [r6, #24]
 8007f2e:	2101      	movs	r1, #1
 8007f30:	4628      	mov	r0, r5
 8007f32:	685c      	ldr	r4, [r3, #4]
 8007f34:	f7ff fc94 	bl	8007860 <ai_buffer_get_size>
 8007f38:	4284      	cmp	r4, r0
 8007f3a:	f0c0 8101 	bcc.w	8008140 <ai_platform_network_process+0x294>
 8007f3e:	68f0      	ldr	r0, [r6, #12]
 8007f40:	69a9      	ldr	r1, [r5, #24]
 8007f42:	68c2      	ldr	r2, [r0, #12]
 8007f44:	68cb      	ldr	r3, [r1, #12]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	f040 80fa 	bne.w	8008140 <ai_platform_network_process+0x294>
 8007f4c:	6882      	ldr	r2, [r0, #8]
 8007f4e:	688b      	ldr	r3, [r1, #8]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	f040 80f5 	bne.w	8008140 <ai_platform_network_process+0x294>
 8007f56:	6842      	ldr	r2, [r0, #4]
 8007f58:	684b      	ldr	r3, [r1, #4]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	f040 80f0 	bne.w	8008140 <ai_platform_network_process+0x294>
 8007f60:	69b3      	ldr	r3, [r6, #24]
 8007f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f66:	f003 fc2d 	bl	800b7c4 <ai_array_get_data_byte_size>
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f003 fc3f 	bl	800b7f0 <get_tensor_byte_size>
 8007f72:	4284      	cmp	r4, r0
 8007f74:	f0c0 80e4 	bcc.w	8008140 <ai_platform_network_process+0x294>
 8007f78:	69b3      	ldr	r3, [r6, #24]
 8007f7a:	6818      	ldr	r0, [r3, #0]
 8007f7c:	f003 fb90 	bl	800b6a0 <ai_array_to_buffer_fmt>
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	4058      	eors	r0, r3
 8007f84:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 8007f88:	f040 8192 	bne.w	80082b0 <ai_platform_network_process+0x404>
 8007f8c:	686b      	ldr	r3, [r5, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 80ce 	beq.w	8008130 <ai_platform_network_process+0x284>
 8007f94:	69ab      	ldr	r3, [r5, #24]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 8181 	beq.w	80082a0 <ai_platform_network_process+0x3f4>
 8007f9e:	9a01      	ldr	r2, [sp, #4]
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	3701      	adds	r7, #1
 8007fa4:	351c      	adds	r5, #28
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	bf38      	it	cc
 8007faa:	461a      	movcc	r2, r3
 8007fac:	9201      	str	r2, [sp, #4]
 8007fae:	f003 fc1f 	bl	800b7f0 <get_tensor_byte_size>
 8007fb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fb6:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	fb00 f303 	mul.w	r3, r0, r3
 8007fc0:	f8c8 300c 	str.w	r3, [r8, #12]
 8007fc4:	f855 1c18 	ldr.w	r1, [r5, #-24]
 8007fc8:	440b      	add	r3, r1
 8007fca:	f8c8 1004 	str.w	r1, [r8, #4]
 8007fce:	f84b 3009 	str.w	r3, [fp, r9]
 8007fd2:	69b0      	ldr	r0, [r6, #24]
 8007fd4:	6803      	ldr	r3, [r0, #0]
 8007fd6:	009a      	lsls	r2, r3, #2
 8007fd8:	f100 80a4 	bmi.w	8008124 <ai_platform_network_process+0x278>
 8007fdc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007fe0:	1a9b      	subs	r3, r3, r2
 8007fe2:	4419      	add	r1, r3
 8007fe4:	6081      	str	r1, [r0, #8]
 8007fe6:	69b3      	ldr	r3, [r6, #24]
 8007fe8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007fec:	60da      	str	r2, [r3, #12]
 8007fee:	f8ba 3000 	ldrh.w	r3, [sl]
 8007ff2:	42bb      	cmp	r3, r7
 8007ff4:	d888      	bhi.n	8007f08 <ai_platform_network_process+0x5c>
 8007ff6:	e9dd 4902 	ldrd	r4, r9, [sp, #8]
 8007ffa:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8007ffc:	f1b9 0f00 	cmp.w	r9, #0
 8008000:	f000 815e 	beq.w	80082c0 <ai_platform_network_process+0x414>
 8008004:	2a01      	cmp	r2, #1
 8008006:	f240 80a4 	bls.w	8008152 <ai_platform_network_process+0x2a6>
 800800a:	f8d4 8034 	ldr.w	r8, [r4, #52]	@ 0x34
 800800e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 809d 	beq.w	8008152 <ai_platform_network_process+0x2a6>
 8008018:	464e      	mov	r6, r9
 800801a:	2700      	movs	r7, #0
 800801c:	9402      	str	r4, [sp, #8]
 800801e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 80a1 	beq.w	800816a <ai_platform_network_process+0x2be>
 8008028:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800802c:	2d00      	cmp	r5, #0
 800802e:	f000 809c 	beq.w	800816a <ai_platform_network_process+0x2be>
 8008032:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008036:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800803a:	f8d3 9000 	ldr.w	r9, [r3]
 800803e:	eb19 1a07 	adds.w	sl, r9, r7, lsl #4
 8008042:	f000 8150 	beq.w	80082e6 <ai_platform_network_process+0x43a>
 8008046:	69ab      	ldr	r3, [r5, #24]
 8008048:	2101      	movs	r1, #1
 800804a:	4630      	mov	r0, r6
 800804c:	685c      	ldr	r4, [r3, #4]
 800804e:	f7ff fc07 	bl	8007860 <ai_buffer_get_size>
 8008052:	4284      	cmp	r4, r0
 8008054:	d37c      	bcc.n	8008150 <ai_platform_network_process+0x2a4>
 8008056:	68e8      	ldr	r0, [r5, #12]
 8008058:	69b1      	ldr	r1, [r6, #24]
 800805a:	68c2      	ldr	r2, [r0, #12]
 800805c:	68cb      	ldr	r3, [r1, #12]
 800805e:	429a      	cmp	r2, r3
 8008060:	d176      	bne.n	8008150 <ai_platform_network_process+0x2a4>
 8008062:	6882      	ldr	r2, [r0, #8]
 8008064:	688b      	ldr	r3, [r1, #8]
 8008066:	429a      	cmp	r2, r3
 8008068:	d172      	bne.n	8008150 <ai_platform_network_process+0x2a4>
 800806a:	6842      	ldr	r2, [r0, #4]
 800806c:	684b      	ldr	r3, [r1, #4]
 800806e:	429a      	cmp	r2, r3
 8008070:	d16e      	bne.n	8008150 <ai_platform_network_process+0x2a4>
 8008072:	69ab      	ldr	r3, [r5, #24]
 8008074:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008078:	f003 fba4 	bl	800b7c4 <ai_array_get_data_byte_size>
 800807c:	9003      	str	r0, [sp, #12]
 800807e:	4628      	mov	r0, r5
 8008080:	f003 fbb6 	bl	800b7f0 <get_tensor_byte_size>
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	4283      	cmp	r3, r0
 8008088:	d362      	bcc.n	8008150 <ai_platform_network_process+0x2a4>
 800808a:	69ab      	ldr	r3, [r5, #24]
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	f003 fb07 	bl	800b6a0 <ai_array_to_buffer_fmt>
 8008092:	6833      	ldr	r3, [r6, #0]
 8008094:	4043      	eors	r3, r0
 8008096:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 800809a:	f040 8114 	bne.w	80082c6 <ai_platform_network_process+0x41a>
 800809e:	6873      	ldr	r3, [r6, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 8120 	beq.w	80082e6 <ai_platform_network_process+0x43a>
 80080a6:	69b3      	ldr	r3, [r6, #24]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 8113 	beq.w	80082d6 <ai_platform_network_process+0x42a>
 80080b0:	9a01      	ldr	r2, [sp, #4]
 80080b2:	4628      	mov	r0, r5
 80080b4:	3701      	adds	r7, #1
 80080b6:	361c      	adds	r6, #28
 80080b8:	429a      	cmp	r2, r3
 80080ba:	bf38      	it	cc
 80080bc:	461a      	movcc	r2, r3
 80080be:	9201      	str	r2, [sp, #4]
 80080c0:	f003 fb96 	bl	800b7f0 <get_tensor_byte_size>
 80080c4:	f8ca 0008 	str.w	r0, [sl, #8]
 80080c8:	4603      	mov	r3, r0
 80080ca:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80080ce:	6812      	ldr	r2, [r2, #0]
 80080d0:	fb02 f303 	mul.w	r3, r2, r3
 80080d4:	f8ca 300c 	str.w	r3, [sl, #12]
 80080d8:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80080dc:	440b      	add	r3, r1
 80080de:	f8ca 1004 	str.w	r1, [sl, #4]
 80080e2:	f849 300b 	str.w	r3, [r9, fp]
 80080e6:	69a8      	ldr	r0, [r5, #24]
 80080e8:	6803      	ldr	r3, [r0, #0]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	d438      	bmi.n	8008160 <ai_platform_network_process+0x2b4>
 80080ee:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80080f2:	1a9b      	subs	r3, r3, r2
 80080f4:	4419      	add	r1, r3
 80080f6:	6081      	str	r1, [r0, #8]
 80080f8:	69ab      	ldr	r3, [r5, #24]
 80080fa:	f8da 2004 	ldr.w	r2, [sl, #4]
 80080fe:	60da      	str	r2, [r3, #12]
 8008100:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008104:	429f      	cmp	r7, r3
 8008106:	d38a      	bcc.n	800801e <ai_platform_network_process+0x172>
 8008108:	e02f      	b.n	800816a <ai_platform_network_process+0x2be>
 800810a:	2b03      	cmp	r3, #3
 800810c:	6182      	str	r2, [r0, #24]
 800810e:	d010      	beq.n	8008132 <ai_platform_network_process+0x286>
 8008110:	2230      	movs	r2, #48	@ 0x30
 8008112:	2111      	movs	r1, #17
 8008114:	f104 000c 	add.w	r0, r4, #12
 8008118:	f000 f8f6 	bl	8008308 <core_set_error>
 800811c:	2000      	movs	r0, #0
 800811e:	b005      	add	sp, #20
 8008120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008124:	f8ba 3000 	ldrh.w	r3, [sl]
 8008128:	429f      	cmp	r7, r3
 800812a:	f4ff aeed 	bcc.w	8007f08 <ai_platform_network_process+0x5c>
 800812e:	e762      	b.n	8007ff6 <ai_platform_network_process+0x14a>
 8008130:	9c02      	ldr	r4, [sp, #8]
 8008132:	2217      	movs	r2, #23
 8008134:	2112      	movs	r1, #18
 8008136:	f104 000c 	add.w	r0, r4, #12
 800813a:	f000 f8e5 	bl	8008308 <core_set_error>
 800813e:	e7ed      	b.n	800811c <ai_platform_network_process+0x270>
 8008140:	9c02      	ldr	r4, [sp, #8]
 8008142:	2218      	movs	r2, #24
 8008144:	2112      	movs	r1, #18
 8008146:	f104 000c 	add.w	r0, r4, #12
 800814a:	f000 f8dd 	bl	8008308 <core_set_error>
 800814e:	e7e5      	b.n	800811c <ai_platform_network_process+0x270>
 8008150:	9c02      	ldr	r4, [sp, #8]
 8008152:	2218      	movs	r2, #24
 8008154:	2113      	movs	r1, #19
 8008156:	f104 000c 	add.w	r0, r4, #12
 800815a:	f000 f8d5 	bl	8008308 <core_set_error>
 800815e:	e7dd      	b.n	800811c <ai_platform_network_process+0x270>
 8008160:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008164:	429f      	cmp	r7, r3
 8008166:	f4ff af5a 	bcc.w	800801e <ai_platform_network_process+0x172>
 800816a:	9c02      	ldr	r4, [sp, #8]
 800816c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008170:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8008172:	8323      	strh	r3, [r4, #24]
 8008174:	2a00      	cmp	r2, #0
 8008176:	f000 808d 	beq.w	8008294 <ai_platform_network_process+0x3e8>
 800817a:	2a01      	cmp	r2, #1
 800817c:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 800817e:	f000 808c 	beq.w	800829a <ai_platform_network_process+0x3ee>
 8008182:	f107 080c 	add.w	r8, r7, #12
 8008186:	8b60      	ldrh	r0, [r4, #26]
 8008188:	4283      	cmp	r3, r0
 800818a:	d9c8      	bls.n	800811e <ai_platform_network_process+0x272>
 800818c:	4646      	mov	r6, r8
 800818e:	46a3      	mov	fp, r4
 8008190:	2f00      	cmp	r7, #0
 8008192:	d031      	beq.n	80081f8 <ai_platform_network_process+0x34c>
 8008194:	f04f 0800 	mov.w	r8, #0
 8008198:	e015      	b.n	80081c6 <ai_platform_network_process+0x31a>
 800819a:	bf00      	nop
 800819c:	a1c00100 	.word	0xa1c00100
 80081a0:	68dc      	ldr	r4, [r3, #12]
 80081a2:	1b09      	subs	r1, r1, r4
 80081a4:	4408      	add	r0, r1
 80081a6:	6098      	str	r0, [r3, #8]
 80081a8:	6993      	ldr	r3, [r2, #24]
 80081aa:	686a      	ldr	r2, [r5, #4]
 80081ac:	60da      	str	r2, [r3, #12]
 80081ae:	f859 200a 	ldr.w	r2, [r9, sl]
 80081b2:	f108 0801 	add.w	r8, r8, #1
 80081b6:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 80081ba:	440b      	add	r3, r1
 80081bc:	4293      	cmp	r3, r2
 80081be:	d301      	bcc.n	80081c4 <ai_platform_network_process+0x318>
 80081c0:	68eb      	ldr	r3, [r5, #12]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	606b      	str	r3, [r5, #4]
 80081c6:	883b      	ldrh	r3, [r7, #0]
 80081c8:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80081cc:	4543      	cmp	r3, r8
 80081ce:	d913      	bls.n	80081f8 <ai_platform_network_process+0x34c>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	b18b      	cbz	r3, 80081f8 <ai_platform_network_process+0x34c>
 80081d4:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 80081d8:	b172      	cbz	r2, 80081f8 <ai_platform_network_process+0x34c>
 80081da:	68b9      	ldr	r1, [r7, #8]
 80081dc:	6993      	ldr	r3, [r2, #24]
 80081de:	f8d1 9000 	ldr.w	r9, [r1]
 80081e2:	681c      	ldr	r4, [r3, #0]
 80081e4:	eb09 1508 	add.w	r5, r9, r8, lsl #4
 80081e8:	6899      	ldr	r1, [r3, #8]
 80081ea:	00a4      	lsls	r4, r4, #2
 80081ec:	6868      	ldr	r0, [r5, #4]
 80081ee:	d5d7      	bpl.n	80081a0 <ai_platform_network_process+0x2f4>
 80081f0:	68aa      	ldr	r2, [r5, #8]
 80081f2:	f003 f963 	bl	800b4bc <st_int8_copy>
 80081f6:	e7da      	b.n	80081ae <ai_platform_network_process+0x302>
 80081f8:	4658      	mov	r0, fp
 80081fa:	f000 f8e1 	bl	80083c0 <ai_layers_forward_all>
 80081fe:	2e00      	cmp	r6, #0
 8008200:	d03b      	beq.n	800827a <ai_platform_network_process+0x3ce>
 8008202:	2500      	movs	r5, #0
 8008204:	e014      	b.n	8008230 <ai_platform_network_process+0x384>
 8008206:	4411      	add	r1, r2
 8008208:	f859 300a 	ldr.w	r3, [r9, sl]
 800820c:	4299      	cmp	r1, r3
 800820e:	d302      	bcc.n	8008216 <ai_platform_network_process+0x36a>
 8008210:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8008214:	1a59      	subs	r1, r3, r1
 8008216:	f8c8 1004 	str.w	r1, [r8, #4]
 800821a:	6982      	ldr	r2, [r0, #24]
 800821c:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8008220:	1b1b      	subs	r3, r3, r4
 8008222:	4419      	add	r1, r3
 8008224:	6091      	str	r1, [r2, #8]
 8008226:	6983      	ldr	r3, [r0, #24]
 8008228:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800822c:	60da      	str	r2, [r3, #12]
 800822e:	3501      	adds	r5, #1
 8008230:	8833      	ldrh	r3, [r6, #0]
 8008232:	42ab      	cmp	r3, r5
 8008234:	d921      	bls.n	800827a <ai_platform_network_process+0x3ce>
 8008236:	6873      	ldr	r3, [r6, #4]
 8008238:	b1fb      	cbz	r3, 800827a <ai_platform_network_process+0x3ce>
 800823a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800823e:	b1e0      	cbz	r0, 800827a <ai_platform_network_process+0x3ce>
 8008240:	68b2      	ldr	r2, [r6, #8]
 8008242:	ea4f 1a05 	mov.w	sl, r5, lsl #4
 8008246:	6983      	ldr	r3, [r0, #24]
 8008248:	f8d2 9000 	ldr.w	r9, [r2]
 800824c:	681c      	ldr	r4, [r3, #0]
 800824e:	eb09 1805 	add.w	r8, r9, r5, lsl #4
 8008252:	00a4      	lsls	r4, r4, #2
 8008254:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8008258:	d5d5      	bpl.n	8008206 <ai_platform_network_process+0x35a>
 800825a:	6898      	ldr	r0, [r3, #8]
 800825c:	f003 f92e 	bl	800b4bc <st_int8_copy>
 8008260:	f859 200a 	ldr.w	r2, [r9, sl]
 8008264:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8008268:	440b      	add	r3, r1
 800826a:	4293      	cmp	r3, r2
 800826c:	d302      	bcc.n	8008274 <ai_platform_network_process+0x3c8>
 800826e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	f8c8 3004 	str.w	r3, [r8, #4]
 8008278:	e7d9      	b.n	800822e <ai_platform_network_process+0x382>
 800827a:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 800827e:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8008282:	3001      	adds	r0, #1
 8008284:	b280      	uxth	r0, r0
 8008286:	4283      	cmp	r3, r0
 8008288:	f8ab 001a 	strh.w	r0, [fp, #26]
 800828c:	d880      	bhi.n	8008190 <ai_platform_network_process+0x2e4>
 800828e:	b005      	add	sp, #20
 8008290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008294:	4617      	mov	r7, r2
 8008296:	4690      	mov	r8, r2
 8008298:	e775      	b.n	8008186 <ai_platform_network_process+0x2da>
 800829a:	f04f 0800 	mov.w	r8, #0
 800829e:	e772      	b.n	8008186 <ai_platform_network_process+0x2da>
 80082a0:	9c02      	ldr	r4, [sp, #8]
 80082a2:	2221      	movs	r2, #33	@ 0x21
 80082a4:	2112      	movs	r1, #18
 80082a6:	f104 000c 	add.w	r0, r4, #12
 80082aa:	f000 f82d 	bl	8008308 <core_set_error>
 80082ae:	e735      	b.n	800811c <ai_platform_network_process+0x270>
 80082b0:	9c02      	ldr	r4, [sp, #8]
 80082b2:	2219      	movs	r2, #25
 80082b4:	2112      	movs	r1, #18
 80082b6:	f104 000c 	add.w	r0, r4, #12
 80082ba:	f000 f825 	bl	8008308 <core_set_error>
 80082be:	e72d      	b.n	800811c <ai_platform_network_process+0x270>
 80082c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80082c4:	e755      	b.n	8008172 <ai_platform_network_process+0x2c6>
 80082c6:	9c02      	ldr	r4, [sp, #8]
 80082c8:	2219      	movs	r2, #25
 80082ca:	2113      	movs	r1, #19
 80082cc:	f104 000c 	add.w	r0, r4, #12
 80082d0:	f000 f81a 	bl	8008308 <core_set_error>
 80082d4:	e722      	b.n	800811c <ai_platform_network_process+0x270>
 80082d6:	9c02      	ldr	r4, [sp, #8]
 80082d8:	2221      	movs	r2, #33	@ 0x21
 80082da:	2113      	movs	r1, #19
 80082dc:	f104 000c 	add.w	r0, r4, #12
 80082e0:	f000 f812 	bl	8008308 <core_set_error>
 80082e4:	e71a      	b.n	800811c <ai_platform_network_process+0x270>
 80082e6:	9c02      	ldr	r4, [sp, #8]
 80082e8:	2217      	movs	r2, #23
 80082ea:	2113      	movs	r1, #19
 80082ec:	f104 000c 	add.w	r0, r4, #12
 80082f0:	f000 f80a 	bl	8008308 <core_set_error>
 80082f4:	e712      	b.n	800811c <ai_platform_network_process+0x270>
 80082f6:	bf00      	nop

080082f8 <core_init>:
 80082f8:	2001      	movs	r0, #1
 80082fa:	4770      	bx	lr

080082fc <core_get_error>:
 80082fc:	4603      	mov	r3, r0
 80082fe:	2200      	movs	r2, #0
 8008300:	6800      	ldr	r0, [r0, #0]
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop

08008308 <core_set_error>:
 8008308:	4603      	mov	r3, r0
 800830a:	7800      	ldrb	r0, [r0, #0]
 800830c:	b108      	cbz	r0, 8008312 <core_set_error+0xa>
 800830e:	2000      	movs	r0, #0
 8008310:	4770      	bx	lr
 8008312:	7019      	strb	r1, [r3, #0]
 8008314:	2001      	movs	r0, #1
 8008316:	6819      	ldr	r1, [r3, #0]
 8008318:	f362 211f 	bfi	r1, r2, #8, #24
 800831c:	6019      	str	r1, [r3, #0]
 800831e:	4770      	bx	lr

08008320 <ai_check_custom_types>:
 8008320:	b082      	sub	sp, #8
 8008322:	4b12      	ldr	r3, [pc, #72]	@ (800836c <ai_check_custom_types+0x4c>)
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	b118      	cbz	r0, 8008330 <ai_check_custom_types+0x10>
 8008328:	7803      	ldrb	r3, [r0, #0]
 800832a:	2b03      	cmp	r3, #3
 800832c:	d002      	beq.n	8008334 <ai_check_custom_types+0x14>
 800832e:	2000      	movs	r0, #0
 8008330:	b002      	add	sp, #8
 8008332:	4770      	bx	lr
 8008334:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008338:	4293      	cmp	r3, r2
 800833a:	d004      	beq.n	8008346 <ai_check_custom_types+0x26>
 800833c:	2001      	movs	r0, #1
 800833e:	f080 0001 	eor.w	r0, r0, #1
 8008342:	b002      	add	sp, #8
 8008344:	4770      	bx	lr
 8008346:	7842      	ldrb	r2, [r0, #1]
 8008348:	3001      	adds	r0, #1
 800834a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800834e:	429a      	cmp	r2, r3
 8008350:	d1f4      	bne.n	800833c <ai_check_custom_types+0x1c>
 8008352:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008356:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800835a:	429a      	cmp	r2, r3
 800835c:	d1ee      	bne.n	800833c <ai_check_custom_types+0x1c>
 800835e:	7842      	ldrb	r2, [r0, #1]
 8008360:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008364:	429a      	cmp	r2, r3
 8008366:	d1e9      	bne.n	800833c <ai_check_custom_types+0x1c>
 8008368:	2000      	movs	r0, #0
 800836a:	e7e8      	b.n	800833e <ai_check_custom_types+0x1e>
 800836c:	84048403 	.word	0x84048403

08008370 <ai_layers_init_all>:
 8008370:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008372:	4601      	mov	r1, r0
 8008374:	b14b      	cbz	r3, 800838a <ai_layers_init_all+0x1a>
 8008376:	2000      	movs	r0, #0
 8008378:	461a      	mov	r2, r3
 800837a:	60d9      	str	r1, [r3, #12]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	3001      	adds	r0, #1
 8008380:	4293      	cmp	r3, r2
 8008382:	d003      	beq.n	800838c <ai_layers_init_all+0x1c>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1f7      	bne.n	8008378 <ai_layers_init_all+0x8>
 8008388:	4770      	bx	lr
 800838a:	4618      	mov	r0, r3
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop

08008390 <ai_layers_post_init_all>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8008394:	b184      	cbz	r4, 80083b8 <ai_layers_post_init_all+0x28>
 8008396:	2500      	movs	r5, #0
 8008398:	6863      	ldr	r3, [r4, #4]
 800839a:	07db      	lsls	r3, r3, #31
 800839c:	d504      	bpl.n	80083a8 <ai_layers_post_init_all+0x18>
 800839e:	6a23      	ldr	r3, [r4, #32]
 80083a0:	4620      	mov	r0, r4
 80083a2:	b10b      	cbz	r3, 80083a8 <ai_layers_post_init_all+0x18>
 80083a4:	3501      	adds	r5, #1
 80083a6:	4798      	blx	r3
 80083a8:	6923      	ldr	r3, [r4, #16]
 80083aa:	42a3      	cmp	r3, r4
 80083ac:	461c      	mov	r4, r3
 80083ae:	d001      	beq.n	80083b4 <ai_layers_post_init_all+0x24>
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1f1      	bne.n	8008398 <ai_layers_post_init_all+0x8>
 80083b4:	4628      	mov	r0, r5
 80083b6:	bd38      	pop	{r3, r4, r5, pc}
 80083b8:	4625      	mov	r5, r4
 80083ba:	4628      	mov	r0, r5
 80083bc:	bd38      	pop	{r3, r4, r5, pc}
 80083be:	bf00      	nop

080083c0 <ai_layers_forward_all>:
 80083c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c4:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80083c6:	4604      	mov	r4, r0
 80083c8:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 80083cc:	63c5      	str	r5, [r0, #60]	@ 0x3c
 80083ce:	f1b8 0f00 	cmp.w	r8, #0
 80083d2:	d029      	beq.n	8008428 <ai_layers_forward_all+0x68>
 80083d4:	b325      	cbz	r5, 8008420 <ai_layers_forward_all+0x60>
 80083d6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80083d8:	4629      	mov	r1, r5
 80083da:	2001      	movs	r0, #1
 80083dc:	47c0      	blx	r8
 80083de:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 80083e0:	b1f6      	cbz	r6, 8008420 <ai_layers_forward_all+0x60>
 80083e2:	2700      	movs	r7, #0
 80083e4:	4631      	mov	r1, r6
 80083e6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80083e8:	2002      	movs	r0, #2
 80083ea:	47c0      	blx	r8
 80083ec:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80083ee:	4628      	mov	r0, r5
 80083f0:	696b      	ldr	r3, [r5, #20]
 80083f2:	4798      	blx	r3
 80083f4:	692e      	ldr	r6, [r5, #16]
 80083f6:	2003      	movs	r0, #3
 80083f8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80083fa:	42b5      	cmp	r5, r6
 80083fc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80083fe:	d007      	beq.n	8008410 <ai_layers_forward_all+0x50>
 8008400:	47c0      	blx	r8
 8008402:	3701      	adds	r7, #1
 8008404:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8008406:	2e00      	cmp	r6, #0
 8008408:	d1ec      	bne.n	80083e4 <ai_layers_forward_all+0x24>
 800840a:	4638      	mov	r0, r7
 800840c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008410:	2003      	movs	r0, #3
 8008412:	3701      	adds	r7, #1
 8008414:	47c0      	blx	r8
 8008416:	2300      	movs	r3, #0
 8008418:	4638      	mov	r0, r7
 800841a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008420:	2700      	movs	r7, #0
 8008422:	4638      	mov	r0, r7
 8008424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008428:	2d00      	cmp	r5, #0
 800842a:	d0f9      	beq.n	8008420 <ai_layers_forward_all+0x60>
 800842c:	4647      	mov	r7, r8
 800842e:	696b      	ldr	r3, [r5, #20]
 8008430:	4628      	mov	r0, r5
 8008432:	4798      	blx	r3
 8008434:	462b      	mov	r3, r5
 8008436:	692d      	ldr	r5, [r5, #16]
 8008438:	429d      	cmp	r5, r3
 800843a:	d004      	beq.n	8008446 <ai_layers_forward_all+0x86>
 800843c:	3701      	adds	r7, #1
 800843e:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8008440:	2d00      	cmp	r5, #0
 8008442:	d1f4      	bne.n	800842e <ai_layers_forward_all+0x6e>
 8008444:	e7e1      	b.n	800840a <ai_layers_forward_all+0x4a>
 8008446:	2300      	movs	r3, #0
 8008448:	3701      	adds	r7, #1
 800844a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800844c:	e7dd      	b.n	800840a <ai_layers_forward_all+0x4a>
 800844e:	bf00      	nop

08008450 <forward_conv2d_if32of32wf32>:
 8008450:	6982      	ldr	r2, [r0, #24]
 8008452:	8813      	ldrh	r3, [r2, #0]
 8008454:	b90b      	cbnz	r3, 800845a <forward_conv2d_if32of32wf32+0xa>
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	deff      	udf	#255	@ 0xff
 800845a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845e:	6857      	ldr	r7, [r2, #4]
 8008460:	b0a3      	sub	sp, #140	@ 0x8c
 8008462:	4686      	mov	lr, r0
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	b102      	cbz	r2, 800846a <forward_conv2d_if32of32wf32+0x1a>
 8008468:	6812      	ldr	r2, [r2, #0]
 800846a:	2b01      	cmp	r3, #1
 800846c:	f000 80c0 	beq.w	80085f0 <forward_conv2d_if32of32wf32+0x1a0>
 8008470:	6938      	ldr	r0, [r7, #16]
 8008472:	b100      	cbz	r0, 8008476 <forward_conv2d_if32of32wf32+0x26>
 8008474:	6800      	ldr	r0, [r0, #0]
 8008476:	2b02      	cmp	r3, #2
 8008478:	f000 80b5 	beq.w	80085e6 <forward_conv2d_if32of32wf32+0x196>
 800847c:	69fe      	ldr	r6, [r7, #28]
 800847e:	2e00      	cmp	r6, #0
 8008480:	f000 80b4 	beq.w	80085ec <forward_conv2d_if32of32wf32+0x19c>
 8008484:	8b39      	ldrh	r1, [r7, #24]
 8008486:	6834      	ldr	r4, [r6, #0]
 8008488:	2901      	cmp	r1, #1
 800848a:	f240 80b4 	bls.w	80085f6 <forward_conv2d_if32of32wf32+0x1a6>
 800848e:	6876      	ldr	r6, [r6, #4]
 8008490:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8008494:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8008498:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800849c:	f8de c03c 	ldr.w	ip, [lr, #60]	@ 0x3c
 80084a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80084a2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084a6:	6992      	ldr	r2, [r2, #24]
 80084a8:	9115      	str	r1, [sp, #84]	@ 0x54
 80084aa:	f8d9 100c 	ldr.w	r1, [r9, #12]
 80084ae:	6892      	ldr	r2, [r2, #8]
 80084b0:	9116      	str	r1, [sp, #88]	@ 0x58
 80084b2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80084b6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80084ba:	9117      	str	r1, [sp, #92]	@ 0x5c
 80084bc:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80084c0:	9220      	str	r2, [sp, #128]	@ 0x80
 80084c2:	9118      	str	r1, [sp, #96]	@ 0x60
 80084c4:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80084c8:	69a2      	ldr	r2, [r4, #24]
 80084ca:	9119      	str	r1, [sp, #100]	@ 0x64
 80084cc:	f8be 102c 	ldrh.w	r1, [lr, #44]	@ 0x2c
 80084d0:	f8be b028 	ldrh.w	fp, [lr, #40]	@ 0x28
 80084d4:	911a      	str	r1, [sp, #104]	@ 0x68
 80084d6:	f8de 101c 	ldr.w	r1, [lr, #28]
 80084da:	911f      	str	r1, [sp, #124]	@ 0x7c
 80084dc:	f8bc 1000 	ldrh.w	r1, [ip]
 80084e0:	e9de 540c 	ldrd	r5, r4, [lr, #48]	@ 0x30
 80084e4:	911b      	str	r1, [sp, #108]	@ 0x6c
 80084e6:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 80084ea:	911c      	str	r1, [sp, #112]	@ 0x70
 80084ec:	b2a9      	uxth	r1, r5
 80084ee:	911d      	str	r1, [sp, #116]	@ 0x74
 80084f0:	b2a1      	uxth	r1, r4
 80084f2:	911e      	str	r1, [sp, #120]	@ 0x78
 80084f4:	6891      	ldr	r1, [r2, #8]
 80084f6:	e9da 9801 	ldrd	r9, r8, [sl, #4]
 80084fa:	b10e      	cbz	r6, 8008500 <forward_conv2d_if32of32wf32+0xb0>
 80084fc:	69b6      	ldr	r6, [r6, #24]
 80084fe:	68b6      	ldr	r6, [r6, #8]
 8008500:	6980      	ldr	r0, [r0, #24]
 8008502:	b2a4      	uxth	r4, r4
 8008504:	b2ad      	uxth	r5, r5
 8008506:	2b03      	cmp	r3, #3
 8008508:	6880      	ldr	r0, [r0, #8]
 800850a:	f104 34ff 	add.w	r4, r4, #4294967295
 800850e:	f105 35ff 	add.w	r5, r5, #4294967295
 8008512:	9014      	str	r0, [sp, #80]	@ 0x50
 8008514:	f108 30ff 	add.w	r0, r8, #4294967295
 8008518:	fb00 8404 	mla	r4, r0, r4, r8
 800851c:	f109 30ff 	add.w	r0, r9, #4294967295
 8008520:	fb00 9505 	mla	r5, r0, r5, r9
 8008524:	d074      	beq.n	8008610 <forward_conv2d_if32of32wf32+0x1c0>
 8008526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008528:	2b00      	cmp	r3, #0
 800852a:	d03e      	beq.n	80085aa <forward_conv2d_if32of32wf32+0x15a>
 800852c:	f8d3 a000 	ldr.w	sl, [r3]
 8008530:	f1ba 0f00 	cmp.w	sl, #0
 8008534:	d003      	beq.n	800853e <forward_conv2d_if32of32wf32+0xee>
 8008536:	f8da 0018 	ldr.w	r0, [sl, #24]
 800853a:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800853e:	6858      	ldr	r0, [r3, #4]
 8008540:	2800      	cmp	r0, #0
 8008542:	d033      	beq.n	80085ac <forward_conv2d_if32of32wf32+0x15c>
 8008544:	6983      	ldr	r3, [r0, #24]
 8008546:	f8d2 c000 	ldr.w	ip, [r2]
 800854a:	689f      	ldr	r7, [r3, #8]
 800854c:	f3cc 4343 	ubfx	r3, ip, #17, #4
 8008550:	2b08      	cmp	r3, #8
 8008552:	d052      	beq.n	80085fa <forward_conv2d_if32of32wf32+0x1aa>
 8008554:	2f00      	cmp	r7, #0
 8008556:	bf08      	it	eq
 8008558:	460f      	moveq	r7, r1
 800855a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800855c:	463a      	mov	r2, r7
 800855e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8008560:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8008562:	940d      	str	r4, [sp, #52]	@ 0x34
 8008564:	f8cd 901c 	str.w	r9, [sp, #28]
 8008568:	950e      	str	r5, [sp, #56]	@ 0x38
 800856a:	e9cd b30b 	strd	fp, r3, [sp, #44]	@ 0x2c
 800856e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008570:	930a      	str	r3, [sp, #40]	@ 0x28
 8008572:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008574:	e9cd 8308 	strd	r8, r3, [sp, #32]
 8008578:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800857a:	9306      	str	r3, [sp, #24]
 800857c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800857e:	9305      	str	r3, [sp, #20]
 8008580:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008582:	9304      	str	r3, [sp, #16]
 8008584:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008586:	9303      	str	r3, [sp, #12]
 8008588:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800858a:	9302      	str	r3, [sp, #8]
 800858c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800858e:	e9cd a300 	strd	sl, r3, [sp]
 8008592:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008594:	9311      	str	r3, [sp, #68]	@ 0x44
 8008596:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008598:	9310      	str	r3, [sp, #64]	@ 0x40
 800859a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800859c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800859e:	4633      	mov	r3, r6
 80085a0:	f000 fd7c 	bl	800909c <forward_lite_conv2d_if32of32wf32>
 80085a4:	b023      	add	sp, #140	@ 0x8c
 80085a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085aa:	469a      	mov	sl, r3
 80085ac:	6810      	ldr	r0, [r2, #0]
 80085ae:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80085b2:	2b08      	cmp	r3, #8
 80085b4:	d001      	beq.n	80085ba <forward_conv2d_if32of32wf32+0x16a>
 80085b6:	460f      	mov	r7, r1
 80085b8:	e7cf      	b.n	800855a <forward_conv2d_if32of32wf32+0x10a>
 80085ba:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80085be:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80085c2:	68d2      	ldr	r2, [r2, #12]
 80085c4:	4103      	asrs	r3, r0
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	2a00      	cmp	r2, #0
 80085ca:	d0f4      	beq.n	80085b6 <forward_conv2d_if32of32wf32+0x166>
 80085cc:	2700      	movs	r7, #0
 80085ce:	4638      	mov	r0, r7
 80085d0:	6980      	ldr	r0, [r0, #24]
 80085d2:	9121      	str	r1, [sp, #132]	@ 0x84
 80085d4:	6840      	ldr	r0, [r0, #4]
 80085d6:	9001      	str	r0, [sp, #4]
 80085d8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80085da:	9000      	str	r0, [sp, #0]
 80085dc:	4638      	mov	r0, r7
 80085de:	f001 fee5 	bl	800a3ac <lite_decompress_ilutof32>
 80085e2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80085e4:	e7b6      	b.n	8008554 <forward_conv2d_if32of32wf32+0x104>
 80085e6:	2300      	movs	r3, #0
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	deff      	udf	#255	@ 0xff
 80085ec:	4634      	mov	r4, r6
 80085ee:	e74f      	b.n	8008490 <forward_conv2d_if32of32wf32+0x40>
 80085f0:	2300      	movs	r3, #0
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	deff      	udf	#255	@ 0xff
 80085f6:	2600      	movs	r6, #0
 80085f8:	e74a      	b.n	8008490 <forward_conv2d_if32of32wf32+0x40>
 80085fa:	68d2      	ldr	r2, [r2, #12]
 80085fc:	2a00      	cmp	r2, #0
 80085fe:	d0a9      	beq.n	8008554 <forward_conv2d_if32of32wf32+0x104>
 8008600:	f3cc 13c6 	ubfx	r3, ip, #7, #7
 8008604:	f3cc 5c41 	ubfx	ip, ip, #21, #2
 8008608:	fa43 f30c 	asr.w	r3, r3, ip
 800860c:	b29b      	uxth	r3, r3
 800860e:	e7df      	b.n	80085d0 <forward_conv2d_if32of32wf32+0x180>
 8008610:	2300      	movs	r3, #0
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	deff      	udf	#255	@ 0xff
 8008616:	bf00      	nop

08008618 <forward_conv2d_if32of32wf32_nl_pool>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8008620:	b0c1      	sub	sp, #260	@ 0x104
 8008622:	f8bc 7000 	ldrh.w	r7, [ip]
 8008626:	b90f      	cbnz	r7, 800862c <forward_conv2d_if32of32wf32_nl_pool+0x14>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	deff      	udf	#255	@ 0xff
 800862c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008630:	4604      	mov	r4, r0
 8008632:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8008636:	f1ba 0f00 	cmp.w	sl, #0
 800863a:	d001      	beq.n	8008640 <forward_conv2d_if32of32wf32_nl_pool+0x28>
 800863c:	f8da a000 	ldr.w	sl, [sl]
 8008640:	2f01      	cmp	r7, #1
 8008642:	f000 812d 	beq.w	80088a0 <forward_conv2d_if32of32wf32_nl_pool+0x288>
 8008646:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800864a:	f1b9 0f00 	cmp.w	r9, #0
 800864e:	d001      	beq.n	8008654 <forward_conv2d_if32of32wf32_nl_pool+0x3c>
 8008650:	f8d9 9000 	ldr.w	r9, [r9]
 8008654:	2f02      	cmp	r7, #2
 8008656:	f000 8123 	beq.w	80088a0 <forward_conv2d_if32of32wf32_nl_pool+0x288>
 800865a:	69d9      	ldr	r1, [r3, #28]
 800865c:	2900      	cmp	r1, #0
 800865e:	f000 8142 	beq.w	80088e6 <forward_conv2d_if32of32wf32_nl_pool+0x2ce>
 8008662:	8b1b      	ldrh	r3, [r3, #24]
 8008664:	680a      	ldr	r2, [r1, #0]
 8008666:	2b01      	cmp	r3, #1
 8008668:	f240 812c 	bls.w	80088c4 <forward_conv2d_if32of32wf32_nl_pool+0x2ac>
 800866c:	684b      	ldr	r3, [r1, #4]
 800866e:	933e      	str	r3, [sp, #248]	@ 0xf8
 8008670:	f8da 000c 	ldr.w	r0, [sl, #12]
 8008674:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8008678:	9021      	str	r0, [sp, #132]	@ 0x84
 800867a:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800867e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008680:	9022      	str	r0, [sp, #136]	@ 0x88
 8008682:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8008684:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8008688:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800868c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8008690:	902e      	str	r0, [sp, #184]	@ 0xb8
 8008692:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8008694:	681e      	ldr	r6, [r3, #0]
 8008696:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800869a:	9129      	str	r1, [sp, #164]	@ 0xa4
 800869c:	902f      	str	r0, [sp, #188]	@ 0xbc
 800869e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80086a0:	f8de 1008 	ldr.w	r1, [lr, #8]
 80086a4:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80086a8:	9627      	str	r6, [sp, #156]	@ 0x9c
 80086aa:	9030      	str	r0, [sp, #192]	@ 0xc0
 80086ac:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80086ae:	912d      	str	r1, [sp, #180]	@ 0xb4
 80086b0:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80086b4:	e9d4 850a 	ldrd	r8, r5, [r4, #40]	@ 0x28
 80086b8:	9031      	str	r0, [sp, #196]	@ 0xc4
 80086ba:	9526      	str	r5, [sp, #152]	@ 0x98
 80086bc:	685d      	ldr	r5, [r3, #4]
 80086be:	9528      	str	r5, [sp, #160]	@ 0xa0
 80086c0:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 80086c4:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80086c6:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80086ca:	9022      	str	r0, [sp, #136]	@ 0x88
 80086cc:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80086ce:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80086d2:	9023      	str	r0, [sp, #140]	@ 0x8c
 80086d4:	fa1f f088 	uxth.w	r0, r8
 80086d8:	9032      	str	r0, [sp, #200]	@ 0xc8
 80086da:	f8bd 0098 	ldrh.w	r0, [sp, #152]	@ 0x98
 80086de:	9033      	str	r0, [sp, #204]	@ 0xcc
 80086e0:	f8bd 009c 	ldrh.w	r0, [sp, #156]	@ 0x9c
 80086e4:	9034      	str	r0, [sp, #208]	@ 0xd0
 80086e6:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	@ 0xa0
 80086ea:	9035      	str	r0, [sp, #212]	@ 0xd4
 80086ec:	6898      	ldr	r0, [r3, #8]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	902b      	str	r0, [sp, #172]	@ 0xac
 80086f2:	932c      	str	r3, [sp, #176]	@ 0xb0
 80086f4:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 80086f8:	9336      	str	r3, [sp, #216]	@ 0xd8
 80086fa:	b2ab      	uxth	r3, r5
 80086fc:	9337      	str	r3, [sp, #220]	@ 0xdc
 80086fe:	b2b3      	uxth	r3, r6
 8008700:	9338      	str	r3, [sp, #224]	@ 0xe0
 8008702:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	@ 0xa4
 8008706:	9324      	str	r3, [sp, #144]	@ 0x90
 8008708:	b20b      	sxth	r3, r1
 800870a:	9325      	str	r3, [sp, #148]	@ 0x94
 800870c:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8008710:	9339      	str	r3, [sp, #228]	@ 0xe4
 8008712:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 8008716:	933a      	str	r3, [sp, #232]	@ 0xe8
 8008718:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 800871c:	933b      	str	r3, [sp, #236]	@ 0xec
 800871e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008724:	933c      	str	r3, [sp, #240]	@ 0xf0
 8008726:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008728:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800872c:	933d      	str	r3, [sp, #244]	@ 0xf4
 800872e:	6a23      	ldr	r3, [r4, #32]
 8008730:	9321      	str	r3, [sp, #132]	@ 0x84
 8008732:	f1bb 0f00 	cmp.w	fp, #0
 8008736:	f000 80b6 	beq.w	80088a6 <forward_conv2d_if32of32wf32_nl_pool+0x28e>
 800873a:	f8db 3018 	ldr.w	r3, [fp, #24]
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 80b7 	beq.w	80088b2 <forward_conv2d_if32of32wf32_nl_pool+0x29a>
 8008744:	922a      	str	r2, [sp, #168]	@ 0xa8
 8008746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	9321      	str	r3, [sp, #132]	@ 0x84
 800874e:	f003 f817 	bl	800b780 <ai_array_get_byte_size>
 8008752:	f8db 7018 	ldr.w	r7, [fp, #24]
 8008756:	4683      	mov	fp, r0
 8008758:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 800875a:	2f00      	cmp	r7, #0
 800875c:	f000 80b9 	beq.w	80088d2 <forward_conv2d_if32of32wf32_nl_pool+0x2ba>
 8008760:	923f      	str	r2, [sp, #252]	@ 0xfc
 8008762:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008766:	f003 f80b 	bl	800b780 <ai_array_get_byte_size>
 800876a:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800876e:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8008770:	f8bc 7000 	ldrh.w	r7, [ip]
 8008774:	902a      	str	r0, [sp, #168]	@ 0xa8
 8008776:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8008778:	b2ad      	uxth	r5, r5
 800877a:	f8da 0018 	ldr.w	r0, [sl, #24]
 800877e:	b2b6      	uxth	r6, r6
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	3d01      	subs	r5, #1
 8008784:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8008788:	3e01      	subs	r6, #1
 800878a:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800878e:	fa1f f888 	uxth.w	r8, r8
 8008792:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008794:	2f03      	cmp	r7, #3
 8008796:	f8bd e098 	ldrh.w	lr, [sp, #152]	@ 0x98
 800879a:	f103 39ff 	add.w	r9, r3, #4294967295
 800879e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80087a0:	6992      	ldr	r2, [r2, #24]
 80087a2:	fb15 3509 	smlabb	r5, r5, r9, r3
 80087a6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80087a8:	6880      	ldr	r0, [r0, #8]
 80087aa:	fa0f f985 	sxth.w	r9, r5
 80087ae:	f103 35ff 	add.w	r5, r3, #4294967295
 80087b2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80087b4:	6889      	ldr	r1, [r1, #8]
 80087b6:	fb16 3605 	smlabb	r6, r6, r5, r3
 80087ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80087bc:	6892      	ldr	r2, [r2, #8]
 80087be:	eba3 0509 	sub.w	r5, r3, r9
 80087c2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80087c4:	b236      	sxth	r6, r6
 80087c6:	fa15 f583 	uxtah	r5, r5, r3
 80087ca:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80087cc:	fa15 f583 	uxtah	r5, r5, r3
 80087d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80087d2:	fb95 f5f8 	sdiv	r5, r5, r8
 80087d6:	eba3 0806 	sub.w	r8, r3, r6
 80087da:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80087dc:	f105 0501 	add.w	r5, r5, #1
 80087e0:	fa18 f883 	uxtah	r8, r8, r3
 80087e4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80087e6:	b22d      	sxth	r5, r5
 80087e8:	fa18 f883 	uxtah	r8, r8, r3
 80087ec:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80087ee:	fb98 fefe 	sdiv	lr, r8, lr
 80087f2:	9326      	str	r3, [sp, #152]	@ 0x98
 80087f4:	f10e 0e01 	add.w	lr, lr, #1
 80087f8:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 80087fc:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 8008800:	d94e      	bls.n	80088a0 <forward_conv2d_if32of32wf32_nl_pool+0x288>
 8008802:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8008806:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 800880a:	f1bc 0f00 	cmp.w	ip, #0
 800880e:	d067      	beq.n	80088e0 <forward_conv2d_if32of32wf32_nl_pool+0x2c8>
 8008810:	f8dc 7000 	ldr.w	r7, [ip]
 8008814:	b10f      	cbz	r7, 800881a <forward_conv2d_if32of32wf32_nl_pool+0x202>
 8008816:	69bf      	ldr	r7, [r7, #24]
 8008818:	68bf      	ldr	r7, [r7, #8]
 800881a:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 800881c:	9513      	str	r5, [sp, #76]	@ 0x4c
 800881e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8008820:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8008822:	960e      	str	r6, [sp, #56]	@ 0x38
 8008824:	931e      	str	r3, [sp, #120]	@ 0x78
 8008826:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8008828:	931d      	str	r3, [sp, #116]	@ 0x74
 800882a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 800882c:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 8008830:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8008832:	931a      	str	r3, [sp, #104]	@ 0x68
 8008834:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008836:	9319      	str	r3, [sp, #100]	@ 0x64
 8008838:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800883a:	e9cd b317 	strd	fp, r3, [sp, #92]	@ 0x5c
 800883e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008840:	e9cd 8315 	strd	r8, r3, [sp, #84]	@ 0x54
 8008844:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8008846:	9312      	str	r3, [sp, #72]	@ 0x48
 8008848:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800884a:	9311      	str	r3, [sp, #68]	@ 0x44
 800884c:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800884e:	e9cd 930f 	strd	r9, r3, [sp, #60]	@ 0x3c
 8008852:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8008854:	930d      	str	r3, [sp, #52]	@ 0x34
 8008856:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8008858:	930c      	str	r3, [sp, #48]	@ 0x30
 800885a:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800885c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800885e:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8008860:	930a      	str	r3, [sp, #40]	@ 0x28
 8008862:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8008864:	9309      	str	r3, [sp, #36]	@ 0x24
 8008866:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008868:	9308      	str	r3, [sp, #32]
 800886a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800886c:	9307      	str	r3, [sp, #28]
 800886e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8008870:	9306      	str	r3, [sp, #24]
 8008872:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008874:	9305      	str	r3, [sp, #20]
 8008876:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800887c:	9303      	str	r3, [sp, #12]
 800887e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8008880:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8008884:	fa0f f38e 	sxth.w	r3, lr
 8008888:	9314      	str	r3, [sp, #80]	@ 0x50
 800888a:	4653      	mov	r3, sl
 800888c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8008890:	69a4      	ldr	r4, [r4, #24]
 8008892:	68a4      	ldr	r4, [r4, #8]
 8008894:	9400      	str	r4, [sp, #0]
 8008896:	f000 fed9 	bl	800964c <forward_lite_conv2d_if32of32wf32_pool>
 800889a:	b041      	add	sp, #260	@ 0x104
 800889c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a0:	2300      	movs	r3, #0
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	deff      	udf	#255	@ 0xff
 80088a6:	b183      	cbz	r3, 80088ca <forward_conv2d_if32of32wf32_nl_pool+0x2b2>
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	9321      	str	r3, [sp, #132]	@ 0x84
 80088ac:	2301      	movs	r3, #1
 80088ae:	932a      	str	r3, [sp, #168]	@ 0xa8
 80088b0:	e761      	b.n	8008776 <forward_conv2d_if32of32wf32_nl_pool+0x15e>
 80088b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80088b4:	b10b      	cbz	r3, 80088ba <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	9321      	str	r3, [sp, #132]	@ 0x84
 80088ba:	2301      	movs	r3, #1
 80088bc:	f04f 0b00 	mov.w	fp, #0
 80088c0:	932a      	str	r3, [sp, #168]	@ 0xa8
 80088c2:	e758      	b.n	8008776 <forward_conv2d_if32of32wf32_nl_pool+0x15e>
 80088c4:	2300      	movs	r3, #0
 80088c6:	933e      	str	r3, [sp, #248]	@ 0xf8
 80088c8:	e6d2      	b.n	8008670 <forward_conv2d_if32of32wf32_nl_pool+0x58>
 80088ca:	469b      	mov	fp, r3
 80088cc:	2301      	movs	r3, #1
 80088ce:	932a      	str	r3, [sp, #168]	@ 0xa8
 80088d0:	e751      	b.n	8008776 <forward_conv2d_if32of32wf32_nl_pool+0x15e>
 80088d2:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80088d6:	2301      	movs	r3, #1
 80088d8:	f8bc 7000 	ldrh.w	r7, [ip]
 80088dc:	932a      	str	r3, [sp, #168]	@ 0xa8
 80088de:	e74a      	b.n	8008776 <forward_conv2d_if32of32wf32_nl_pool+0x15e>
 80088e0:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80088e4:	deff      	udf	#255	@ 0xff
 80088e6:	68cb      	ldr	r3, [r1, #12]
 80088e8:	deff      	udf	#255	@ 0xff
 80088ea:	bf00      	nop

080088ec <forward_dense>:
 80088ec:	6982      	ldr	r2, [r0, #24]
 80088ee:	8813      	ldrh	r3, [r2, #0]
 80088f0:	b90b      	cbnz	r3, 80088f6 <forward_dense+0xa>
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	deff      	udf	#255	@ 0xff
 80088f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088fa:	f8d2 a004 	ldr.w	sl, [r2, #4]
 80088fe:	b08e      	sub	sp, #56	@ 0x38
 8008900:	f8da 0004 	ldr.w	r0, [sl, #4]
 8008904:	b100      	cbz	r0, 8008908 <forward_dense+0x1c>
 8008906:	6800      	ldr	r0, [r0, #0]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d061      	beq.n	80089d0 <forward_dense+0xe4>
 800890c:	f8da 2010 	ldr.w	r2, [sl, #16]
 8008910:	b102      	cbz	r2, 8008914 <forward_dense+0x28>
 8008912:	6812      	ldr	r2, [r2, #0]
 8008914:	2b02      	cmp	r3, #2
 8008916:	d035      	beq.n	8008984 <forward_dense+0x98>
 8008918:	f8da 501c 	ldr.w	r5, [sl, #28]
 800891c:	2d00      	cmp	r5, #0
 800891e:	d055      	beq.n	80089cc <forward_dense+0xe0>
 8008920:	f8ba 4018 	ldrh.w	r4, [sl, #24]
 8008924:	6829      	ldr	r1, [r5, #0]
 8008926:	2c01      	cmp	r4, #1
 8008928:	d955      	bls.n	80089d6 <forward_dense+0xea>
 800892a:	686d      	ldr	r5, [r5, #4]
 800892c:	698e      	ldr	r6, [r1, #24]
 800892e:	2b03      	cmp	r3, #3
 8008930:	68d1      	ldr	r1, [r2, #12]
 8008932:	68c4      	ldr	r4, [r0, #12]
 8008934:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8008938:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800893c:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
 8008940:	6831      	ldr	r1, [r6, #0]
 8008942:	fb07 f804 	mul.w	r8, r7, r4
 8008946:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 800894a:	d046      	beq.n	80089da <forward_dense+0xee>
 800894c:	f8da 4028 	ldr.w	r4, [sl, #40]	@ 0x28
 8008950:	b11c      	cbz	r4, 800895a <forward_dense+0x6e>
 8008952:	6824      	ldr	r4, [r4, #0]
 8008954:	b10c      	cbz	r4, 800895a <forward_dense+0x6e>
 8008956:	69a3      	ldr	r3, [r4, #24]
 8008958:	689c      	ldr	r4, [r3, #8]
 800895a:	6983      	ldr	r3, [r0, #24]
 800895c:	6992      	ldr	r2, [r2, #24]
 800895e:	6899      	ldr	r1, [r3, #8]
 8008960:	6890      	ldr	r0, [r2, #8]
 8008962:	b10d      	cbz	r5, 8008968 <forward_dense+0x7c>
 8008964:	69ab      	ldr	r3, [r5, #24]
 8008966:	689d      	ldr	r5, [r3, #8]
 8008968:	4f1d      	ldr	r7, [pc, #116]	@ (80089e0 <forward_dense+0xf4>)
 800896a:	45bc      	cmp	ip, r7
 800896c:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8008970:	d022      	beq.n	80089b8 <forward_dense+0xcc>
 8008972:	4e1c      	ldr	r6, [pc, #112]	@ (80089e4 <forward_dense+0xf8>)
 8008974:	45b4      	cmp	ip, r6
 8008976:	d015      	beq.n	80089a4 <forward_dense+0xb8>
 8008978:	4b1b      	ldr	r3, [pc, #108]	@ (80089e8 <forward_dense+0xfc>)
 800897a:	459c      	cmp	ip, r3
 800897c:	d005      	beq.n	800898a <forward_dense+0x9e>
 800897e:	b00e      	add	sp, #56	@ 0x38
 8008980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008984:	2300      	movs	r3, #0
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	deff      	udf	#255	@ 0xff
 800898a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800898e:	a807      	add	r0, sp, #28
 8008990:	9209      	str	r2, [sp, #36]	@ 0x24
 8008992:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 8008996:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 800899a:	f001 fd5d 	bl	800a458 <forward_lite_dense_if32of32wf32>
 800899e:	b00e      	add	sp, #56	@ 0x38
 80089a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089a4:	e9cd 9803 	strd	r9, r8, [sp, #12]
 80089a8:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 80089ac:	9400      	str	r4, [sp, #0]
 80089ae:	f001 fead 	bl	800a70c <forward_lite_dense_if32of32wf32_lut4>
 80089b2:	b00e      	add	sp, #56	@ 0x38
 80089b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b8:	e9cd 9803 	strd	r9, r8, [sp, #12]
 80089bc:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 80089c0:	9400      	str	r4, [sp, #0]
 80089c2:	f001 ffeb 	bl	800a99c <forward_lite_dense_if32of32wf32_lut8>
 80089c6:	b00e      	add	sp, #56	@ 0x38
 80089c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089cc:	4629      	mov	r1, r5
 80089ce:	e7ad      	b.n	800892c <forward_dense+0x40>
 80089d0:	2300      	movs	r3, #0
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	deff      	udf	#255	@ 0xff
 80089d6:	2500      	movs	r5, #0
 80089d8:	e7a8      	b.n	800892c <forward_dense+0x40>
 80089da:	2300      	movs	r3, #0
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	deff      	udf	#255	@ 0xff
 80089e0:	00d01040 	.word	0x00d01040
 80089e4:	00f01040 	.word	0x00f01040
 80089e8:	00821040 	.word	0x00821040

080089ec <forward_pad>:
 80089ec:	7f03      	ldrb	r3, [r0, #28]
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d80b      	bhi.n	8008a0a <forward_pad+0x1e>
 80089f2:	e8df f003 	tbb	[pc, r3]
 80089f6:	0608      	.short	0x0608
 80089f8:	0204      	.short	0x0204
 80089fa:	f000 ba2f 	b.w	8008e5c <forward_pad_8bit_ch1st_3x3_constant>
 80089fe:	f000 babd 	b.w	8008f7c <forward_pad_edge>
 8008a02:	f000 bafb 	b.w	8008ffc <forward_pad_reflect>
 8008a06:	f000 ba73 	b.w	8008ef0 <forward_pad_constant>
 8008a0a:	4770      	bx	lr

08008a0c <forward_transpose>:
 8008a0c:	6983      	ldr	r3, [r0, #24]
 8008a0e:	8819      	ldrh	r1, [r3, #0]
 8008a10:	b909      	cbnz	r1, 8008a16 <forward_transpose+0xa>
 8008a12:	684b      	ldr	r3, [r1, #4]
 8008a14:	deff      	udf	#255	@ 0xff
 8008a16:	4602      	mov	r2, r0
 8008a18:	6858      	ldr	r0, [r3, #4]
 8008a1a:	6843      	ldr	r3, [r0, #4]
 8008a1c:	b103      	cbz	r3, 8008a20 <forward_transpose+0x14>
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2901      	cmp	r1, #1
 8008a22:	f000 80a7 	beq.w	8008b74 <forward_transpose+0x168>
 8008a26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2a:	6904      	ldr	r4, [r0, #16]
 8008a2c:	b08b      	sub	sp, #44	@ 0x2c
 8008a2e:	b104      	cbz	r4, 8008a32 <forward_transpose+0x26>
 8008a30:	6824      	ldr	r4, [r4, #0]
 8008a32:	6a15      	ldr	r5, [r2, #32]
 8008a34:	e9d3 6004 	ldrd	r6, r0, [r3, #16]
 8008a38:	6869      	ldr	r1, [r5, #4]
 8008a3a:	f5b6 6fa0 	cmp.w	r6, #1280	@ 0x500
 8008a3e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8008a42:	9100      	str	r1, [sp, #0]
 8008a44:	68a9      	ldr	r1, [r5, #8]
 8008a46:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8008a4a:	9104      	str	r1, [sp, #16]
 8008a4c:	68e9      	ldr	r1, [r5, #12]
 8008a4e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8008a52:	9105      	str	r1, [sp, #20]
 8008a54:	f0c0 808a 	bcc.w	8008b6c <forward_transpose+0x160>
 8008a58:	69d1      	ldr	r1, [r2, #28]
 8008a5a:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 8008a5e:	f080 8082 	bcs.w	8008b66 <forward_transpose+0x15a>
 8008a62:	2104      	movs	r1, #4
 8008a64:	5841      	ldr	r1, [r0, r1]
 8008a66:	f026 06ff 	bic.w	r6, r6, #255	@ 0xff
 8008a6a:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 8008a6e:	d071      	beq.n	8008b54 <forward_transpose+0x148>
 8008a70:	2200      	movs	r2, #0
 8008a72:	9202      	str	r2, [sp, #8]
 8008a74:	6998      	ldr	r0, [r3, #24]
 8008a76:	69a2      	ldr	r2, [r4, #24]
 8008a78:	68e3      	ldr	r3, [r4, #12]
 8008a7a:	6896      	ldr	r6, [r2, #8]
 8008a7c:	6802      	ldr	r2, [r0, #0]
 8008a7e:	6880      	ldr	r0, [r0, #8]
 8008a80:	f3c2 2b83 	ubfx	fp, r2, #10, #4
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	9001      	str	r0, [sp, #4]
 8008a88:	2a00      	cmp	r2, #0
 8008a8a:	d060      	beq.n	8008b4e <forward_transpose+0x142>
 8008a8c:	2700      	movs	r7, #0
 8008a8e:	6898      	ldr	r0, [r3, #8]
 8008a90:	46a0      	mov	r8, r4
 8008a92:	46ba      	mov	sl, r7
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d05a      	beq.n	8008b4e <forward_transpose+0x142>
 8008a98:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8008a9c:	2400      	movs	r4, #0
 8008a9e:	f8cd a018 	str.w	sl, [sp, #24]
 8008aa2:	46ba      	mov	sl, r7
 8008aa4:	f3c5 2517 	ubfx	r5, r5, #8, #24
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f04f 0900 	mov.w	r9, #0
 8008aae:	4655      	mov	r5, sl
 8008ab0:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8008ab4:	e9cd 4707 	strd	r4, r7, [sp, #28]
 8008ab8:	2804      	cmp	r0, #4
 8008aba:	bf8c      	ite	hi
 8008abc:	691f      	ldrhi	r7, [r3, #16]
 8008abe:	2701      	movls	r7, #1
 8008ac0:	45b9      	cmp	r9, r7
 8008ac2:	d22e      	bcs.n	8008b22 <forward_transpose+0x116>
 8008ac4:	46aa      	mov	sl, r5
 8008ac6:	2700      	movs	r7, #0
 8008ac8:	2805      	cmp	r0, #5
 8008aca:	9103      	str	r1, [sp, #12]
 8008acc:	463d      	mov	r5, r7
 8008ace:	4657      	mov	r7, sl
 8008ad0:	d91f      	bls.n	8008b12 <forward_transpose+0x106>
 8008ad2:	695a      	ldr	r2, [r3, #20]
 8008ad4:	4295      	cmp	r5, r2
 8008ad6:	d21e      	bcs.n	8008b16 <forward_transpose+0x10a>
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	b1a2      	cbz	r2, 8008b06 <forward_transpose+0xfa>
 8008adc:	2400      	movs	r4, #0
 8008ade:	9b00      	ldr	r3, [sp, #0]
 8008ae0:	4631      	mov	r1, r6
 8008ae2:	465a      	mov	r2, fp
 8008ae4:	445e      	add	r6, fp
 8008ae6:	fb03 a004 	mla	r0, r3, r4, sl
 8008aea:	9b01      	ldr	r3, [sp, #4]
 8008aec:	3401      	adds	r4, #1
 8008aee:	4418      	add	r0, r3
 8008af0:	f002 fce4 	bl	800b4bc <st_int8_copy>
 8008af4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008af8:	685a      	ldr	r2, [r3, #4]
 8008afa:	4294      	cmp	r4, r2
 8008afc:	d3ef      	bcc.n	8008ade <forward_transpose+0xd2>
 8008afe:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8008b02:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8008b06:	9a02      	ldr	r2, [sp, #8]
 8008b08:	2805      	cmp	r0, #5
 8008b0a:	f105 0501 	add.w	r5, r5, #1
 8008b0e:	4492      	add	sl, r2
 8008b10:	d8df      	bhi.n	8008ad2 <forward_transpose+0xc6>
 8008b12:	2d00      	cmp	r5, #0
 8008b14:	d0e0      	beq.n	8008ad8 <forward_transpose+0xcc>
 8008b16:	9903      	ldr	r1, [sp, #12]
 8008b18:	463d      	mov	r5, r7
 8008b1a:	f109 0901 	add.w	r9, r9, #1
 8008b1e:	440d      	add	r5, r1
 8008b20:	e7ca      	b.n	8008ab8 <forward_transpose+0xac>
 8008b22:	e9dd 4707 	ldrd	r4, r7, [sp, #28]
 8008b26:	4605      	mov	r5, r0
 8008b28:	6898      	ldr	r0, [r3, #8]
 8008b2a:	3401      	adds	r4, #1
 8008b2c:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8008b30:	9a04      	ldr	r2, [sp, #16]
 8008b32:	4284      	cmp	r4, r0
 8008b34:	4492      	add	sl, r2
 8008b36:	d3b7      	bcc.n	8008aa8 <forward_transpose+0x9c>
 8008b38:	f8dd a018 	ldr.w	sl, [sp, #24]
 8008b3c:	68da      	ldr	r2, [r3, #12]
 8008b3e:	f10a 0a01 	add.w	sl, sl, #1
 8008b42:	4592      	cmp	sl, r2
 8008b44:	d203      	bcs.n	8008b4e <forward_transpose+0x142>
 8008b46:	9a05      	ldr	r2, [sp, #20]
 8008b48:	4417      	add	r7, r2
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d1a4      	bne.n	8008a98 <forward_transpose+0x8c>
 8008b4e:	b00b      	add	sp, #44	@ 0x2c
 8008b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b54:	69d2      	ldr	r2, [r2, #28]
 8008b56:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
 8008b5a:	d309      	bcc.n	8008b70 <forward_transpose+0x164>
 8008b5c:	696a      	ldr	r2, [r5, #20]
 8008b5e:	0092      	lsls	r2, r2, #2
 8008b60:	5882      	ldr	r2, [r0, r2]
 8008b62:	9202      	str	r2, [sp, #8]
 8008b64:	e786      	b.n	8008a74 <forward_transpose+0x68>
 8008b66:	6929      	ldr	r1, [r5, #16]
 8008b68:	0089      	lsls	r1, r1, #2
 8008b6a:	e77b      	b.n	8008a64 <forward_transpose+0x58>
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	e77a      	b.n	8008a66 <forward_transpose+0x5a>
 8008b70:	2204      	movs	r2, #4
 8008b72:	e7f5      	b.n	8008b60 <forward_transpose+0x154>
 8008b74:	2300      	movs	r3, #0
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	deff      	udf	#255	@ 0xff
 8008b7a:	bf00      	nop

08008b7c <forward_reduce>:
 8008b7c:	6981      	ldr	r1, [r0, #24]
 8008b7e:	880a      	ldrh	r2, [r1, #0]
 8008b80:	b90a      	cbnz	r2, 8008b86 <forward_reduce+0xa>
 8008b82:	6853      	ldr	r3, [r2, #4]
 8008b84:	deff      	udf	#255	@ 0xff
 8008b86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8a:	6849      	ldr	r1, [r1, #4]
 8008b8c:	b08b      	sub	sp, #44	@ 0x2c
 8008b8e:	4603      	mov	r3, r0
 8008b90:	684e      	ldr	r6, [r1, #4]
 8008b92:	b106      	cbz	r6, 8008b96 <forward_reduce+0x1a>
 8008b94:	6836      	ldr	r6, [r6, #0]
 8008b96:	2a01      	cmp	r2, #1
 8008b98:	f000 8081 	beq.w	8008c9e <forward_reduce+0x122>
 8008b9c:	690a      	ldr	r2, [r1, #16]
 8008b9e:	2a00      	cmp	r2, #0
 8008ba0:	d07b      	beq.n	8008c9a <forward_reduce+0x11e>
 8008ba2:	6814      	ldr	r4, [r2, #0]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	6971      	ldr	r1, [r6, #20]
 8008ba8:	a803      	add	r0, sp, #12
 8008baa:	e9d3 3807 	ldrd	r3, r8, [r3, #28]
 8008bae:	684f      	ldr	r7, [r1, #4]
 8008bb0:	f104 0108 	add.w	r1, r4, #8
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	6963      	ldr	r3, [r4, #20]
 8008bb8:	685d      	ldr	r5, [r3, #4]
 8008bba:	ab05      	add	r3, sp, #20
 8008bbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bbe:	9304      	str	r3, [sp, #16]
 8008bc0:	f240 5302 	movw	r3, #1282	@ 0x502
 8008bc4:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8008bc8:	e9cd 2207 	strd	r2, r2, [sp, #28]
 8008bcc:	9303      	str	r3, [sp, #12]
 8008bce:	f106 0208 	add.w	r2, r6, #8
 8008bd2:	463b      	mov	r3, r7
 8008bd4:	f002 fe22 	bl	800b81c <core_compute_offsets>
 8008bd8:	69b3      	ldr	r3, [r6, #24]
 8008bda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008bde:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8008be2:	f002 fdcd 	bl	800b780 <ai_array_get_byte_size>
 8008be6:	69a2      	ldr	r2, [r4, #24]
 8008be8:	6894      	ldr	r4, [r2, #8]
 8008bea:	e9d2 0100 	ldrd	r0, r1, [r2]
 8008bee:	f002 fdc7 	bl	800b780 <ai_array_get_byte_size>
 8008bf2:	eb04 0900 	add.w	r9, r4, r0
 8008bf6:	454c      	cmp	r4, r9
 8008bf8:	d209      	bcs.n	8008c0e <forward_reduce+0x92>
 8008bfa:	46a2      	mov	sl, r4
 8008bfc:	9b01      	ldr	r3, [sp, #4]
 8008bfe:	4651      	mov	r1, sl
 8008c00:	44aa      	add	sl, r5
 8008c02:	462a      	mov	r2, r5
 8008c04:	6898      	ldr	r0, [r3, #8]
 8008c06:	f002 fc59 	bl	800b4bc <st_int8_copy>
 8008c0a:	45d1      	cmp	r9, sl
 8008c0c:	d8f6      	bhi.n	8008bfc <forward_reduce+0x80>
 8008c0e:	68f2      	ldr	r2, [r6, #12]
 8008c10:	68d1      	ldr	r1, [r2, #12]
 8008c12:	2900      	cmp	r1, #0
 8008c14:	d03e      	beq.n	8008c94 <forward_reduce+0x118>
 8008c16:	2300      	movs	r3, #0
 8008c18:	6895      	ldr	r5, [r2, #8]
 8008c1a:	9301      	str	r3, [sp, #4]
 8008c1c:	2d00      	cmp	r5, #0
 8008c1e:	d039      	beq.n	8008c94 <forward_reduce+0x118>
 8008c20:	68b1      	ldr	r1, [r6, #8]
 8008c22:	f04f 0a00 	mov.w	sl, #0
 8008c26:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8008c2a:	f04f 0900 	mov.w	r9, #0
 8008c2e:	2904      	cmp	r1, #4
 8008c30:	bf8c      	ite	hi
 8008c32:	6910      	ldrhi	r0, [r2, #16]
 8008c34:	2001      	movls	r0, #1
 8008c36:	4581      	cmp	r9, r0
 8008c38:	d21c      	bcs.n	8008c74 <forward_reduce+0xf8>
 8008c3a:	6850      	ldr	r0, [r2, #4]
 8008c3c:	b180      	cbz	r0, 8008c60 <forward_reduce+0xe4>
 8008c3e:	2500      	movs	r5, #0
 8008c40:	465a      	mov	r2, fp
 8008c42:	4621      	mov	r1, r4
 8008c44:	4620      	mov	r0, r4
 8008c46:	3501      	adds	r5, #1
 8008c48:	47c0      	blx	r8
 8008c4a:	9904      	ldr	r1, [sp, #16]
 8008c4c:	68f2      	ldr	r2, [r6, #12]
 8008c4e:	44bb      	add	fp, r7
 8008c50:	6848      	ldr	r0, [r1, #4]
 8008c52:	6851      	ldr	r1, [r2, #4]
 8008c54:	4404      	add	r4, r0
 8008c56:	42a9      	cmp	r1, r5
 8008c58:	d8f2      	bhi.n	8008c40 <forward_reduce+0xc4>
 8008c5a:	68b1      	ldr	r1, [r6, #8]
 8008c5c:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8008c60:	9803      	ldr	r0, [sp, #12]
 8008c62:	f5b0 6fa0 	cmp.w	r0, #1280	@ 0x500
 8008c66:	d302      	bcc.n	8008c6e <forward_reduce+0xf2>
 8008c68:	9804      	ldr	r0, [sp, #16]
 8008c6a:	6900      	ldr	r0, [r0, #16]
 8008c6c:	4404      	add	r4, r0
 8008c6e:	f109 0901 	add.w	r9, r9, #1
 8008c72:	e7dc      	b.n	8008c2e <forward_reduce+0xb2>
 8008c74:	9b04      	ldr	r3, [sp, #16]
 8008c76:	f10a 0a01 	add.w	sl, sl, #1
 8008c7a:	6895      	ldr	r5, [r2, #8]
 8008c7c:	6898      	ldr	r0, [r3, #8]
 8008c7e:	4555      	cmp	r5, sl
 8008c80:	4404      	add	r4, r0
 8008c82:	d8d2      	bhi.n	8008c2a <forward_reduce+0xae>
 8008c84:	68d8      	ldr	r0, [r3, #12]
 8008c86:	9b01      	ldr	r3, [sp, #4]
 8008c88:	68d1      	ldr	r1, [r2, #12]
 8008c8a:	4404      	add	r4, r0
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	428b      	cmp	r3, r1
 8008c90:	9301      	str	r3, [sp, #4]
 8008c92:	d3c3      	bcc.n	8008c1c <forward_reduce+0xa0>
 8008c94:	b00b      	add	sp, #44	@ 0x2c
 8008c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9a:	6953      	ldr	r3, [r2, #20]
 8008c9c:	deff      	udf	#255	@ 0xff
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	deff      	udf	#255	@ 0xff

08008ca4 <forward_relu>:
 8008ca4:	6982      	ldr	r2, [r0, #24]
 8008ca6:	8813      	ldrh	r3, [r2, #0]
 8008ca8:	b90b      	cbnz	r3, 8008cae <forward_relu+0xa>
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	deff      	udf	#255	@ 0xff
 8008cae:	6851      	ldr	r1, [r2, #4]
 8008cb0:	684a      	ldr	r2, [r1, #4]
 8008cb2:	b102      	cbz	r2, 8008cb6 <forward_relu+0x12>
 8008cb4:	6812      	ldr	r2, [r2, #0]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	f000 8084 	beq.w	8008dc4 <forward_relu+0x120>
 8008cbc:	b470      	push	{r4, r5, r6}
 8008cbe:	690b      	ldr	r3, [r1, #16]
 8008cc0:	b103      	cbz	r3, 8008cc4 <forward_relu+0x20>
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699c      	ldr	r4, [r3, #24]
 8008cc6:	6991      	ldr	r1, [r2, #24]
 8008cc8:	6893      	ldr	r3, [r2, #8]
 8008cca:	69c6      	ldr	r6, [r0, #28]
 8008ccc:	6889      	ldr	r1, [r1, #8]
 8008cce:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8008cd2:	68a0      	ldr	r0, [r4, #8]
 8008cd4:	b196      	cbz	r6, 8008cfc <forward_relu+0x58>
 8008cd6:	6874      	ldr	r4, [r6, #4]
 8008cd8:	2c01      	cmp	r4, #1
 8008cda:	d036      	beq.n	8008d4a <forward_relu+0xa6>
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d068      	beq.n	8008db2 <forward_relu+0x10e>
 8008ce0:	68d5      	ldr	r5, [r2, #12]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008ce8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8008cec:	429d      	cmp	r5, r3
 8008cee:	fb04 f202 	mul.w	r2, r4, r2
 8008cf2:	d1f9      	bne.n	8008ce8 <forward_relu+0x44>
 8008cf4:	68b3      	ldr	r3, [r6, #8]
 8008cf6:	bc70      	pop	{r4, r5, r6}
 8008cf8:	f001 b8c2 	b.w	8009e80 <forward_lite_nl_relu_generic_if32of32_kernel>
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d05a      	beq.n	8008db6 <forward_relu+0x112>
 8008d00:	68d5      	ldr	r5, [r2, #12]
 8008d02:	2201      	movs	r2, #1
 8008d04:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008d08:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8008d0c:	429d      	cmp	r5, r3
 8008d0e:	fb04 f202 	mul.w	r2, r4, r2
 8008d12:	d1f9      	bne.n	8008d08 <forward_relu+0x64>
 8008d14:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008d18:	4413      	add	r3, r2
 8008d1a:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8008d1e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008d22:	428a      	cmp	r2, r1
 8008d24:	d30f      	bcc.n	8008d46 <forward_relu+0xa2>
 8008d26:	1a51      	subs	r1, r2, r1
 8008d28:	1d13      	adds	r3, r2, #4
 8008d2a:	3004      	adds	r0, #4
 8008d2c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8008dcc <forward_relu+0x128>
 8008d30:	f021 0103 	bic.w	r1, r1, #3
 8008d34:	1a52      	subs	r2, r2, r1
 8008d36:	ed73 7a01 	vldmdb	r3!, {s15}
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008d40:	ed60 7a01 	vstmdb	r0!, {s15}
 8008d44:	d1f7      	bne.n	8008d36 <forward_relu+0x92>
 8008d46:	bc70      	pop	{r4, r5, r6}
 8008d48:	4770      	bx	lr
 8008d4a:	b3b3      	cbz	r3, 8008dba <forward_relu+0x116>
 8008d4c:	68d5      	ldr	r5, [r2, #12]
 8008d4e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008d52:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008d56:	429d      	cmp	r5, r3
 8008d58:	fb02 f404 	mul.w	r4, r2, r4
 8008d5c:	d1f9      	bne.n	8008d52 <forward_relu+0xae>
 8008d5e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008d62:	68b2      	ldr	r2, [r6, #8]
 8008d64:	4423      	add	r3, r4
 8008d66:	ed92 7a00 	vldr	s14, [r2]
 8008d6a:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8008d6e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008d72:	428a      	cmp	r2, r1
 8008d74:	d3e7      	bcc.n	8008d46 <forward_relu+0xa2>
 8008d76:	1a51      	subs	r1, r2, r1
 8008d78:	1d13      	adds	r3, r2, #4
 8008d7a:	3004      	adds	r0, #4
 8008d7c:	2400      	movs	r4, #0
 8008d7e:	f021 0103 	bic.w	r1, r1, #3
 8008d82:	1a52      	subs	r2, r2, r1
 8008d84:	ed73 7a01 	vldmdb	r3!, {s15}
 8008d88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d90:	d50a      	bpl.n	8008da8 <forward_relu+0x104>
 8008d92:	429a      	cmp	r2, r3
 8008d94:	ed60 7a01 	vstmdb	r0!, {s15}
 8008d98:	d0d5      	beq.n	8008d46 <forward_relu+0xa2>
 8008d9a:	ed73 7a01 	vldmdb	r3!, {s15}
 8008d9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da6:	d4f4      	bmi.n	8008d92 <forward_relu+0xee>
 8008da8:	429a      	cmp	r2, r3
 8008daa:	f840 4d04 	str.w	r4, [r0, #-4]!
 8008dae:	d1e9      	bne.n	8008d84 <forward_relu+0xe0>
 8008db0:	e7c9      	b.n	8008d46 <forward_relu+0xa2>
 8008db2:	2201      	movs	r2, #1
 8008db4:	e79e      	b.n	8008cf4 <forward_relu+0x50>
 8008db6:	460a      	mov	r2, r1
 8008db8:	e7b5      	b.n	8008d26 <forward_relu+0x82>
 8008dba:	68b3      	ldr	r3, [r6, #8]
 8008dbc:	460a      	mov	r2, r1
 8008dbe:	ed93 7a00 	vldr	s14, [r3]
 8008dc2:	e7d8      	b.n	8008d76 <forward_relu+0xd2>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	deff      	udf	#255	@ 0xff
 8008dca:	bf00      	nop
 8008dcc:	00000000 	.word	0x00000000

08008dd0 <forward_bn>:
 8008dd0:	6982      	ldr	r2, [r0, #24]
 8008dd2:	8813      	ldrh	r3, [r2, #0]
 8008dd4:	b90b      	cbnz	r3, 8008dda <forward_bn+0xa>
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	deff      	udf	#255	@ 0xff
 8008dda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ddc:	6852      	ldr	r2, [r2, #4]
 8008dde:	b083      	sub	sp, #12
 8008de0:	6855      	ldr	r5, [r2, #4]
 8008de2:	b105      	cbz	r5, 8008de6 <forward_bn+0x16>
 8008de4:	682d      	ldr	r5, [r5, #0]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d032      	beq.n	8008e50 <forward_bn+0x80>
 8008dea:	6916      	ldr	r6, [r2, #16]
 8008dec:	b106      	cbz	r6, 8008df0 <forward_bn+0x20>
 8008dee:	6836      	ldr	r6, [r6, #0]
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d023      	beq.n	8008e3c <forward_bn+0x6c>
 8008df4:	69d3      	ldr	r3, [r2, #28]
 8008df6:	b323      	cbz	r3, 8008e42 <forward_bn+0x72>
 8008df8:	8b12      	ldrh	r2, [r2, #24]
 8008dfa:	681f      	ldr	r7, [r3, #0]
 8008dfc:	2a01      	cmp	r2, #1
 8008dfe:	d92a      	bls.n	8008e56 <forward_bn+0x86>
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	e9d5 2002 	ldrd	r2, r0, [r5, #8]
 8008e06:	0a12      	lsrs	r2, r2, #8
 8008e08:	d020      	beq.n	8008e4c <forward_bn+0x7c>
 8008e0a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008e0e:	2401      	movs	r4, #1
 8008e10:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008e14:	4290      	cmp	r0, r2
 8008e16:	fb01 f404 	mul.w	r4, r1, r4
 8008e1a:	d1f9      	bne.n	8008e10 <forward_bn+0x40>
 8008e1c:	69a9      	ldr	r1, [r5, #24]
 8008e1e:	69b6      	ldr	r6, [r6, #24]
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	6845      	ldr	r5, [r0, #4]
 8008e24:	6889      	ldr	r1, [r1, #8]
 8008e26:	68b0      	ldr	r0, [r6, #8]
 8008e28:	6892      	ldr	r2, [r2, #8]
 8008e2a:	b10b      	cbz	r3, 8008e30 <forward_bn+0x60>
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	e9cd 4500 	strd	r4, r5, [sp]
 8008e34:	f001 faac 	bl	800a390 <forward_lite_bn_if32of32wf32>
 8008e38:	b003      	add	sp, #12
 8008e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	deff      	udf	#255	@ 0xff
 8008e42:	e9d5 2002 	ldrd	r2, r0, [r5, #8]
 8008e46:	461f      	mov	r7, r3
 8008e48:	0a12      	lsrs	r2, r2, #8
 8008e4a:	d1de      	bne.n	8008e0a <forward_bn+0x3a>
 8008e4c:	2401      	movs	r4, #1
 8008e4e:	e7e5      	b.n	8008e1c <forward_bn+0x4c>
 8008e50:	2300      	movs	r3, #0
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	deff      	udf	#255	@ 0xff
 8008e56:	2300      	movs	r3, #0
 8008e58:	e7d3      	b.n	8008e02 <forward_bn+0x32>
 8008e5a:	bf00      	nop

08008e5c <forward_pad_8bit_ch1st_3x3_constant>:
 8008e5c:	6982      	ldr	r2, [r0, #24]
 8008e5e:	8813      	ldrh	r3, [r2, #0]
 8008e60:	b90b      	cbnz	r3, 8008e66 <forward_pad_8bit_ch1st_3x3_constant+0xa>
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	deff      	udf	#255	@ 0xff
 8008e66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e6a:	6852      	ldr	r2, [r2, #4]
 8008e6c:	b085      	sub	sp, #20
 8008e6e:	6855      	ldr	r5, [r2, #4]
 8008e70:	b105      	cbz	r5, 8008e74 <forward_pad_8bit_ch1st_3x3_constant+0x18>
 8008e72:	682d      	ldr	r5, [r5, #0]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d036      	beq.n	8008ee6 <forward_pad_8bit_ch1st_3x3_constant+0x8a>
 8008e78:	6913      	ldr	r3, [r2, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d036      	beq.n	8008eec <forward_pad_8bit_ch1st_3x3_constant+0x90>
 8008e7e:	f8d3 c000 	ldr.w	ip, [r3]
 8008e82:	68eb      	ldr	r3, [r5, #12]
 8008e84:	e9d0 6209 	ldrd	r6, r2, [r0, #36]	@ 0x24
 8008e88:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8008e8c:	f9b6 8008 	ldrsh.w	r8, [r6, #8]
 8008e90:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	6892      	ldr	r2, [r2, #8]
 8008e98:	e9d6 1000 	ldrd	r1, r0, [r6]
 8008e9c:	4301      	orrs	r1, r0
 8008e9e:	b20c      	sxth	r4, r1
 8008ea0:	e9d5 7105 	ldrd	r7, r1, [r5, #20]
 8008ea4:	6888      	ldr	r0, [r1, #8]
 8008ea6:	68fe      	ldr	r6, [r7, #12]
 8008ea8:	e9dc 5105 	ldrd	r5, r1, [ip, #20]
 8008eac:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8008eb0:	6889      	ldr	r1, [r1, #8]
 8008eb2:	687d      	ldr	r5, [r7, #4]
 8008eb4:	b974      	cbnz	r4, 8008ed4 <forward_pad_8bit_ch1st_3x3_constant+0x78>
 8008eb6:	f1b8 0f02 	cmp.w	r8, #2
 8008eba:	d10b      	bne.n	8008ed4 <forward_pad_8bit_ch1st_3x3_constant+0x78>
 8008ebc:	f1b9 0f02 	cmp.w	r9, #2
 8008ec0:	d108      	bne.n	8008ed4 <forward_pad_8bit_ch1st_3x3_constant+0x78>
 8008ec2:	e9cd 6c02 	strd	r6, ip, [sp, #8]
 8008ec6:	e9cd e500 	strd	lr, r5, [sp]
 8008eca:	f002 f84d 	bl	800af68 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>
 8008ece:	b005      	add	sp, #20
 8008ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ed4:	e9cd 6c02 	strd	r6, ip, [sp, #8]
 8008ed8:	e9cd e500 	strd	lr, r5, [sp]
 8008edc:	f002 f874 	bl	800afc8 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>
 8008ee0:	b005      	add	sp, #20
 8008ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	deff      	udf	#255	@ 0xff
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	deff      	udf	#255	@ 0xff

08008ef0 <forward_pad_constant>:
 8008ef0:	6982      	ldr	r2, [r0, #24]
 8008ef2:	8813      	ldrh	r3, [r2, #0]
 8008ef4:	b90b      	cbnz	r3, 8008efa <forward_pad_constant+0xa>
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	deff      	udf	#255	@ 0xff
 8008efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008efe:	6852      	ldr	r2, [r2, #4]
 8008f00:	b088      	sub	sp, #32
 8008f02:	6854      	ldr	r4, [r2, #4]
 8008f04:	b104      	cbz	r4, 8008f08 <forward_pad_constant+0x18>
 8008f06:	6824      	ldr	r4, [r4, #0]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d034      	beq.n	8008f76 <forward_pad_constant+0x86>
 8008f0c:	6913      	ldr	r3, [r2, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d02f      	beq.n	8008f72 <forward_pad_constant+0x82>
 8008f12:	6819      	ldr	r1, [r3, #0]
 8008f14:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8008f16:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8008f18:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 8008f1c:	69a3      	ldr	r3, [r4, #24]
 8008f1e:	6967      	ldr	r7, [r4, #20]
 8008f20:	f8d3 8000 	ldr.w	r8, [r3]
 8008f24:	6892      	ldr	r2, [r2, #8]
 8008f26:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 8008f2a:	e9d0 ec02 	ldrd	lr, ip, [r0, #8]
 8008f2e:	6889      	ldr	r1, [r1, #8]
 8008f30:	fb0e f606 	mul.w	r6, lr, r6
 8008f34:	6898      	ldr	r0, [r3, #8]
 8008f36:	f3c8 13c6 	ubfx	r3, r8, #7, #7
 8008f3a:	9606      	str	r6, [sp, #24]
 8008f3c:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8008f40:	fb0e f606 	mul.w	r6, lr, r6
 8008f44:	9605      	str	r6, [sp, #20]
 8008f46:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8008f4a:	fb0c f606 	mul.w	r6, ip, r6
 8008f4e:	9604      	str	r6, [sp, #16]
 8008f50:	f9b5 5000 	ldrsh.w	r5, [r5]
 8008f54:	fb0c f505 	mul.w	r5, ip, r5
 8008f58:	9503      	str	r5, [sp, #12]
 8008f5a:	68fd      	ldr	r5, [r7, #12]
 8008f5c:	9502      	str	r5, [sp, #8]
 8008f5e:	687d      	ldr	r5, [r7, #4]
 8008f60:	9501      	str	r5, [sp, #4]
 8008f62:	68e4      	ldr	r4, [r4, #12]
 8008f64:	68e4      	ldr	r4, [r4, #12]
 8008f66:	9400      	str	r4, [sp, #0]
 8008f68:	f002 f8f6 	bl	800b158 <forward_lite_pad_constant>
 8008f6c:	b008      	add	sp, #32
 8008f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	deff      	udf	#255	@ 0xff
 8008f76:	2300      	movs	r3, #0
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	deff      	udf	#255	@ 0xff

08008f7c <forward_pad_edge>:
 8008f7c:	6982      	ldr	r2, [r0, #24]
 8008f7e:	8813      	ldrh	r3, [r2, #0]
 8008f80:	b90b      	cbnz	r3, 8008f86 <forward_pad_edge+0xa>
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	deff      	udf	#255	@ 0xff
 8008f86:	6851      	ldr	r1, [r2, #4]
 8008f88:	684a      	ldr	r2, [r1, #4]
 8008f8a:	b102      	cbz	r2, 8008f8e <forward_pad_edge+0x12>
 8008f8c:	6812      	ldr	r2, [r2, #0]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d030      	beq.n	8008ff4 <forward_pad_edge+0x78>
 8008f92:	690b      	ldr	r3, [r1, #16]
 8008f94:	b363      	cbz	r3, 8008ff0 <forward_pad_edge+0x74>
 8008f96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	b089      	sub	sp, #36	@ 0x24
 8008f9c:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8008f9e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8008fa2:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8008fa6:	6990      	ldr	r0, [r2, #24]
 8008fa8:	6957      	ldr	r7, [r2, #20]
 8008faa:	6880      	ldr	r0, [r0, #8]
 8008fac:	f8de 200c 	ldr.w	r2, [lr, #12]
 8008fb0:	e9d3 c105 	ldrd	ip, r1, [r3, #20]
 8008fb4:	f9b5 3000 	ldrsh.w	r3, [r5]
 8008fb8:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8008fbc:	6889      	ldr	r1, [r1, #8]
 8008fbe:	fb04 f606 	mul.w	r6, r4, r6
 8008fc2:	9606      	str	r6, [sp, #24]
 8008fc4:	f8dc c008 	ldr.w	ip, [ip, #8]
 8008fc8:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8008fcc:	9403      	str	r4, [sp, #12]
 8008fce:	fb0c f606 	mul.w	r6, ip, r6
 8008fd2:	fb03 f404 	mul.w	r4, r3, r4
 8008fd6:	9605      	str	r6, [sp, #20]
 8008fd8:	9404      	str	r4, [sp, #16]
 8008fda:	68bc      	ldr	r4, [r7, #8]
 8008fdc:	9402      	str	r4, [sp, #8]
 8008fde:	68fc      	ldr	r4, [r7, #12]
 8008fe0:	9401      	str	r4, [sp, #4]
 8008fe2:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 8008fe6:	9400      	str	r4, [sp, #0]
 8008fe8:	f002 f952 	bl	800b290 <forward_lite_pad_edge>
 8008fec:	b009      	add	sp, #36	@ 0x24
 8008fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	deff      	udf	#255	@ 0xff
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	deff      	udf	#255	@ 0xff
 8008ffa:	bf00      	nop

08008ffc <forward_pad_reflect>:
 8008ffc:	6982      	ldr	r2, [r0, #24]
 8008ffe:	8813      	ldrh	r3, [r2, #0]
 8009000:	b90b      	cbnz	r3, 8009006 <forward_pad_reflect+0xa>
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	deff      	udf	#255	@ 0xff
 8009006:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900a:	6852      	ldr	r2, [r2, #4]
 800900c:	b08f      	sub	sp, #60	@ 0x3c
 800900e:	6857      	ldr	r7, [r2, #4]
 8009010:	b107      	cbz	r7, 8009014 <forward_pad_reflect+0x18>
 8009012:	683f      	ldr	r7, [r7, #0]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d03d      	beq.n	8009094 <forward_pad_reflect+0x98>
 8009018:	6913      	ldr	r3, [r2, #16]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d038      	beq.n	8009090 <forward_pad_reflect+0x94>
 800901e:	6819      	ldr	r1, [r3, #0]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	e9d2 8302 	ldrd	r8, r3, [r2, #8]
 8009026:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800902a:	f5b4 6fa0 	cmp.w	r4, #1280	@ 0x500
 800902e:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8009030:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 8009034:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8009038:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 800903c:	f9b4 b000 	ldrsh.w	fp, [r4]
 8009040:	6889      	ldr	r1, [r1, #8]
 8009042:	e9d0 5c02 	ldrd	r5, ip, [r0, #8]
 8009046:	e9d7 7005 	ldrd	r7, r0, [r7, #20]
 800904a:	fb05 f606 	mul.w	r6, r5, r6
 800904e:	6880      	ldr	r0, [r0, #8]
 8009050:	e9d2 a902 	ldrd	sl, r9, [r2, #8]
 8009054:	bf2c      	ite	cs
 8009056:	6912      	ldrcs	r2, [r2, #16]
 8009058:	2201      	movcc	r2, #1
 800905a:	960c      	str	r6, [sp, #48]	@ 0x30
 800905c:	fb05 f60e 	mul.w	r6, r5, lr
 8009060:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009062:	fb0c f60b 	mul.w	r6, ip, fp
 8009066:	960a      	str	r6, [sp, #40]	@ 0x28
 8009068:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 800906c:	9409      	str	r4, [sp, #36]	@ 0x24
 800906e:	e9cd eb07 	strd	lr, fp, [sp, #28]
 8009072:	e9cd c505 	strd	ip, r5, [sp, #20]
 8009076:	68bc      	ldr	r4, [r7, #8]
 8009078:	9404      	str	r4, [sp, #16]
 800907a:	68fc      	ldr	r4, [r7, #12]
 800907c:	f8cd 8000 	str.w	r8, [sp]
 8009080:	9403      	str	r4, [sp, #12]
 8009082:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8009086:	f002 f973 	bl	800b370 <forward_lite_pad_reflect>
 800908a:	b00f      	add	sp, #60	@ 0x3c
 800908c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	deff      	udf	#255	@ 0xff
 8009094:	2300      	movs	r3, #0
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	deff      	udf	#255	@ 0xff
 800909a:	bf00      	nop

0800909c <forward_lite_conv2d_if32of32wf32>:
 800909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a0:	ed2d 8b0e 	vpush	{d8-d14}
 80090a4:	b0a1      	sub	sp, #132	@ 0x84
 80090a6:	4681      	mov	r9, r0
 80090a8:	460c      	mov	r4, r1
 80090aa:	4690      	mov	r8, r2
 80090ac:	f8bd 5104 	ldrh.w	r5, [sp, #260]	@ 0x104
 80090b0:	f8bd 610c 	ldrh.w	r6, [sp, #268]	@ 0x10c
 80090b4:	9f3e      	ldr	r7, [sp, #248]	@ 0xf8
 80090b6:	9018      	str	r0, [sp, #96]	@ 0x60
 80090b8:	9211      	str	r2, [sp, #68]	@ 0x44
 80090ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80090bc:	f8bd 2108 	ldrh.w	r2, [sp, #264]	@ 0x108
 80090c0:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 80090c2:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 80090c4:	f8bd 1110 	ldrh.w	r1, [sp, #272]	@ 0x110
 80090c8:	9512      	str	r5, [sp, #72]	@ 0x48
 80090ca:	9605      	str	r6, [sp, #20]
 80090cc:	2f00      	cmp	r7, #0
 80090ce:	f000 817a 	beq.w	80093c6 <forward_lite_conv2d_if32of32wf32+0x32a>
 80090d2:	9f3f      	ldr	r7, [sp, #252]	@ 0xfc
 80090d4:	f1c2 0e00 	rsb	lr, r2, #0
 80090d8:	4694      	mov	ip, r2
 80090da:	426d      	negs	r5, r5
 80090dc:	fb07 f303 	mul.w	r3, r7, r3
 80090e0:	9f39      	ldr	r7, [sp, #228]	@ 0xe4
 80090e2:	9510      	str	r5, [sp, #64]	@ 0x40
 80090e4:	fb07 f303 	mul.w	r3, r7, r3
 80090e8:	ed9f 8ac0 	vldr	s16, [pc, #768]	@ 80093ec <forward_lite_conv2d_if32of32wf32+0x350>
 80090ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	930d      	str	r3, [sp, #52]	@ 0x34
 80090f2:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 80090f4:	fb07 f303 	mul.w	r3, r7, r3
 80090f8:	9f3d      	ldr	r7, [sp, #244]	@ 0xf4
 80090fa:	fb07 f200 	mul.w	r2, r7, r0
 80090fe:	0087      	lsls	r7, r0, #2
 8009100:	9702      	str	r7, [sp, #8]
 8009102:	0097      	lsls	r7, r2, #2
 8009104:	fb01 f203 	mul.w	r2, r1, r3
 8009108:	fb03 f30e 	mul.w	r3, r3, lr
 800910c:	9714      	str	r7, [sp, #80]	@ 0x50
 800910e:	0097      	lsls	r7, r2, #2
 8009110:	eb09 0083 	add.w	r0, r9, r3, lsl #2
 8009114:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8009116:	f108 4278 	add.w	r2, r8, #4160749568	@ 0xf8000000
 800911a:	9716      	str	r7, [sp, #88]	@ 0x58
 800911c:	fb06 f303 	mul.w	r3, r6, r3
 8009120:	4677      	mov	r7, lr
 8009122:	9213      	str	r2, [sp, #76]	@ 0x4c
 8009124:	4606      	mov	r6, r0
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	2200      	movs	r2, #0
 800912a:	9304      	str	r3, [sp, #16]
 800912c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800912e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	fb03 f905 	mul.w	r9, r3, r5
 8009136:	4665      	mov	r5, ip
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	2f00      	cmp	r7, #0
 800913c:	f2c0 8281 	blt.w	8009642 <forward_lite_conv2d_if32of32wf32+0x5a6>
 8009140:	2300      	movs	r3, #0
 8009142:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009144:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 8009146:	9945      	ldr	r1, [sp, #276]	@ 0x114
 8009148:	442a      	add	r2, r5
 800914a:	428a      	cmp	r2, r1
 800914c:	bf94      	ite	ls
 800914e:	ebc3 0202 	rsbls	r2, r3, r2
 8009152:	ebc3 0201 	rsbhi	r2, r3, r1
 8009156:	4610      	mov	r0, r2
 8009158:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 800915a:	2a00      	cmp	r2, #0
 800915c:	f000 8148 	beq.w	80093f0 <forward_lite_conv2d_if32of32wf32+0x354>
 8009160:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009162:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8009166:	f0c0 8143 	bcc.w	80093f0 <forward_lite_conv2d_if32of32wf32+0x354>
 800916a:	9a02      	ldr	r2, [sp, #8]
 800916c:	18a2      	adds	r2, r4, r2
 800916e:	4294      	cmp	r4, r2
 8009170:	9215      	str	r2, [sp, #84]	@ 0x54
 8009172:	f080 811a 	bcs.w	80093aa <forward_lite_conv2d_if32of32wf32+0x30e>
 8009176:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8009178:	46a2      	mov	sl, r4
 800917a:	4680      	mov	r8, r0
 800917c:	941e      	str	r4, [sp, #120]	@ 0x78
 800917e:	fb02 f303 	mul.w	r3, r2, r3
 8009182:	9309      	str	r3, [sp, #36]	@ 0x24
 8009184:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009186:	444b      	add	r3, r9
 8009188:	9317      	str	r3, [sp, #92]	@ 0x5c
 800918a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800918c:	930e      	str	r3, [sp, #56]	@ 0x38
 800918e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009190:	e9cd 761a 	strd	r7, r6, [sp, #104]	@ 0x68
 8009194:	930a      	str	r3, [sp, #40]	@ 0x28
 8009196:	e9cd 591c 	strd	r5, r9, [sp, #112]	@ 0x70
 800919a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800919c:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 800919e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80091a0:	f002 f98c 	bl	800b4bc <st_int8_copy>
 80091a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 811d 	beq.w	80093e6 <forward_lite_conv2d_if32of32wf32+0x34a>
 80091ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091ae:	ecf3 6a01 	vldmia	r3!, {s13}
 80091b2:	930e      	str	r3, [sp, #56]	@ 0x38
 80091b4:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 80e8 	beq.w	800938c <forward_lite_conv2d_if32of32wf32+0x2f0>
 80091bc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80091be:	2000      	movs	r0, #0
 80091c0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80091c2:	9201      	str	r2, [sp, #4]
 80091c4:	4602      	mov	r2, r0
 80091c6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80091c8:	4650      	mov	r0, sl
 80091ca:	4614      	mov	r4, r2
 80091cc:	f8cd a07c 	str.w	sl, [sp, #124]	@ 0x7c
 80091d0:	2d00      	cmp	r5, #0
 80091d2:	f2c0 80ff 	blt.w	80093d4 <forward_lite_conv2d_if32of32wf32+0x338>
 80091d6:	9a01      	ldr	r2, [sp, #4]
 80091d8:	2600      	movs	r6, #0
 80091da:	9203      	str	r2, [sp, #12]
 80091dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091de:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 80091e0:	9f00      	ldr	r7, [sp, #0]
 80091e2:	fb02 1207 	mla	r2, r2, r7, r1
 80091e6:	993b      	ldr	r1, [sp, #236]	@ 0xec
 80091e8:	18cf      	adds	r7, r1, r3
 80091ea:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 80091ec:	428f      	cmp	r7, r1
 80091ee:	bf94      	ite	ls
 80091f0:	ebc6 0607 	rsbls	r6, r6, r7
 80091f4:	ebc6 0601 	rsbhi	r6, r6, r1
 80091f8:	993b      	ldr	r1, [sp, #236]	@ 0xec
 80091fa:	f1b8 0f00 	cmp.w	r8, #0
 80091fe:	eba1 0b06 	sub.w	fp, r1, r6
 8009202:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 8009204:	eba1 0a06 	sub.w	sl, r1, r6
 8009208:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 800920a:	fb01 f606 	mul.w	r6, r1, r6
 800920e:	f340 80e7 	ble.w	80093e0 <forward_lite_conv2d_if32of32wf32+0x344>
 8009212:	9f00      	ldr	r7, [sp, #0]
 8009214:	eeb0 7a66 	vmov.f32	s14, s13
 8009218:	f04f 0c00 	mov.w	ip, #0
 800921c:	9903      	ldr	r1, [sp, #12]
 800921e:	fb07 fb0b 	mul.w	fp, r7, fp
 8009222:	fb07 fa0a 	mul.w	sl, r7, sl
 8009226:	f026 070f 	bic.w	r7, r6, #15
 800922a:	9408      	str	r4, [sp, #32]
 800922c:	f107 39ff 	add.w	r9, r7, #4294967295
 8009230:	9303      	str	r3, [sp, #12]
 8009232:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8009236:	f109 0901 	add.w	r9, r9, #1
 800923a:	ea4f 1e89 	mov.w	lr, r9, lsl #6
 800923e:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8009242:	e9cd 0506 	strd	r0, r5, [sp, #24]
 8009246:	2f00      	cmp	r7, #0
 8009248:	f340 80c2 	ble.w	80093d0 <forward_lite_conv2d_if32of32wf32+0x334>
 800924c:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 8009250:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8009254:	2400      	movs	r4, #0
 8009256:	ed10 6a0f 	vldr	s12, [r0, #-60]	@ 0xffffffc4
 800925a:	3410      	adds	r4, #16
 800925c:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 8009260:	3040      	adds	r0, #64	@ 0x40
 8009262:	ed53 4a10 	vldr	s9, [r3, #-64]	@ 0xffffffc0
 8009266:	42bc      	cmp	r4, r7
 8009268:	ee67 7a86 	vmul.f32	s15, s15, s12
 800926c:	ed10 5a20 	vldr	s10, [r0, #-128]	@ 0xffffff80
 8009270:	ed53 5a0e 	vldr	s11, [r3, #-56]	@ 0xffffffc8
 8009274:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009278:	ed10 6a1e 	vldr	s12, [r0, #-120]	@ 0xffffff88
 800927c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009280:	ed53 da1d 	vldr	s27, [r3, #-116]	@ 0xffffff8c
 8009284:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 8009288:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 800928c:	ed50 ca1c 	vldr	s25, [r0, #-112]	@ 0xffffff90
 8009290:	ed10 ca1b 	vldr	s24, [r0, #-108]	@ 0xffffff94
 8009294:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 8009298:	eee5 7a86 	vfma.f32	s15, s11, s12
 800929c:	ed10 ba1a 	vldr	s22, [r0, #-104]	@ 0xffffff98
 80092a0:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 80092a4:	ed10 aa19 	vldr	s20, [r0, #-100]	@ 0xffffff9c
 80092a8:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 80092ac:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 80092b0:	ed50 8a18 	vldr	s17, [r0, #-96]	@ 0xffffffa0
 80092b4:	eeed 7a8e 	vfma.f32	s15, s27, s28
 80092b8:	ed10 0a17 	vldr	s0, [r0, #-92]	@ 0xffffffa4
 80092bc:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 80092c0:	ed10 1a16 	vldr	s2, [r0, #-88]	@ 0xffffffa8
 80092c4:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 80092c8:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 80092cc:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 80092d0:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80092d4:	ed13 3a14 	vldr	s6, [r3, #-80]	@ 0xffffffb0
 80092d8:	ed50 3a14 	vldr	s7, [r0, #-80]	@ 0xffffffb0
 80092dc:	ed50 4a13 	vldr	s9, [r0, #-76]	@ 0xffffffb4
 80092e0:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 80092e4:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 80092e8:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80092ec:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80092f0:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 80092f4:	ed53 da11 	vldr	s27, [r3, #-68]	@ 0xffffffbc
 80092f8:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 80092fc:	eeea 7a29 	vfma.f32	s15, s20, s19
 8009300:	eee9 7a28 	vfma.f32	s15, s18, s17
 8009304:	eee0 7a20 	vfma.f32	s15, s0, s1
 8009308:	eee1 7a21 	vfma.f32	s15, s2, s3
 800930c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009310:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009314:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009318:	eee5 7a25 	vfma.f32	s15, s10, s11
 800931c:	eee6 7a2d 	vfma.f32	s15, s12, s27
 8009320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009324:	db97      	blt.n	8009256 <forward_lite_conv2d_if32of32wf32+0x1ba>
 8009326:	4471      	add	r1, lr
 8009328:	4472      	add	r2, lr
 800932a:	4648      	mov	r0, r9
 800932c:	4286      	cmp	r6, r0
 800932e:	dd10      	ble.n	8009352 <forward_lite_conv2d_if32of32wf32+0x2b6>
 8009330:	4603      	mov	r3, r0
 8009332:	460d      	mov	r5, r1
 8009334:	4614      	mov	r4, r2
 8009336:	3301      	adds	r3, #1
 8009338:	ecb4 6a01 	vldmia	r4!, {s12}
 800933c:	ecf5 7a01 	vldmia	r5!, {s15}
 8009340:	429e      	cmp	r6, r3
 8009342:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009346:	d1f6      	bne.n	8009336 <forward_lite_conv2d_if32of32wf32+0x29a>
 8009348:	1a30      	subs	r0, r6, r0
 800934a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800934e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8009352:	f10c 0c01 	add.w	ip, ip, #1
 8009356:	4459      	add	r1, fp
 8009358:	4452      	add	r2, sl
 800935a:	45e0      	cmp	r8, ip
 800935c:	f47f af73 	bne.w	8009246 <forward_lite_conv2d_if32of32wf32+0x1aa>
 8009360:	9c08      	ldr	r4, [sp, #32]
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	e9dd 0506 	ldrd	r0, r5, [sp, #24]
 8009368:	9a05      	ldr	r2, [sp, #20]
 800936a:	3401      	adds	r4, #1
 800936c:	9902      	ldr	r1, [sp, #8]
 800936e:	4415      	add	r5, r2
 8009370:	1a9b      	subs	r3, r3, r2
 8009372:	ed80 7a00 	vstr	s14, [r0]
 8009376:	4408      	add	r0, r1
 8009378:	9a01      	ldr	r2, [sp, #4]
 800937a:	9904      	ldr	r1, [sp, #16]
 800937c:	440a      	add	r2, r1
 800937e:	9201      	str	r2, [sp, #4]
 8009380:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8009382:	42a2      	cmp	r2, r4
 8009384:	f47f af24 	bne.w	80091d0 <forward_lite_conv2d_if32of32wf32+0x134>
 8009388:	f8dd a07c 	ldr.w	sl, [sp, #124]	@ 0x7c
 800938c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800938e:	f10a 0a04 	add.w	sl, sl, #4
 8009392:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009394:	4413      	add	r3, r2
 8009396:	930a      	str	r3, [sp, #40]	@ 0x28
 8009398:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800939a:	459a      	cmp	sl, r3
 800939c:	f4ff aefd 	bcc.w	800919a <forward_lite_conv2d_if32of32wf32+0xfe>
 80093a0:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 80093a2:	e9dd 761a 	ldrd	r7, r6, [sp, #104]	@ 0x68
 80093a6:	e9dd 591c 	ldrd	r5, r9, [sp, #112]	@ 0x70
 80093aa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80093ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093ae:	4414      	add	r4, r2
 80093b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093b2:	3301      	adds	r3, #1
 80093b4:	4417      	add	r7, r2
 80093b6:	1aad      	subs	r5, r5, r2
 80093b8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80093ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093bc:	4416      	add	r6, r2
 80093be:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 80093c0:	429a      	cmp	r2, r3
 80093c2:	f47f aeba 	bne.w	800913a <forward_lite_conv2d_if32of32wf32+0x9e>
 80093c6:	b021      	add	sp, #132	@ 0x84
 80093c8:	ecbd 8b0e 	vpop	{d8-d14}
 80093cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d0:	2000      	movs	r0, #0
 80093d2:	e7ab      	b.n	800932c <forward_lite_conv2d_if32of32wf32+0x290>
 80093d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093d6:	461e      	mov	r6, r3
 80093d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093da:	441a      	add	r2, r3
 80093dc:	9103      	str	r1, [sp, #12]
 80093de:	e6fe      	b.n	80091de <forward_lite_conv2d_if32of32wf32+0x142>
 80093e0:	eeb0 7a66 	vmov.f32	s14, s13
 80093e4:	e7c0      	b.n	8009368 <forward_lite_conv2d_if32of32wf32+0x2cc>
 80093e6:	eef0 6a48 	vmov.f32	s13, s16
 80093ea:	e6e3      	b.n	80091b4 <forward_lite_conv2d_if32of32wf32+0x118>
 80093ec:	00000000 	.word	0x00000000
 80093f0:	9a02      	ldr	r2, [sp, #8]
 80093f2:	eb04 0c02 	add.w	ip, r4, r2
 80093f6:	4564      	cmp	r4, ip
 80093f8:	d2d7      	bcs.n	80093aa <forward_lite_conv2d_if32of32wf32+0x30e>
 80093fa:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80093fc:	4683      	mov	fp, r0
 80093fe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009400:	fb02 f303 	mul.w	r3, r2, r3
 8009404:	4622      	mov	r2, r4
 8009406:	9109      	str	r1, [sp, #36]	@ 0x24
 8009408:	930a      	str	r3, [sp, #40]	@ 0x28
 800940a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800940c:	970e      	str	r7, [sp, #56]	@ 0x38
 800940e:	eb03 0e09 	add.w	lr, r3, r9
 8009412:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009414:	9615      	str	r6, [sp, #84]	@ 0x54
 8009416:	9517      	str	r5, [sp, #92]	@ 0x5c
 8009418:	941a      	str	r4, [sp, #104]	@ 0x68
 800941a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800941c:	2900      	cmp	r1, #0
 800941e:	f000 810d 	beq.w	800963c <forward_lite_conv2d_if32of32wf32+0x5a0>
 8009422:	ecf3 6a01 	vldmia	r3!, {s13}
 8009426:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8009428:	2900      	cmp	r1, #0
 800942a:	f000 80ef 	beq.w	800960c <forward_lite_conv2d_if32of32wf32+0x570>
 800942e:	2100      	movs	r1, #0
 8009430:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009432:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009434:	f8cd e004 	str.w	lr, [sp, #4]
 8009438:	f8cd e07c 	str.w	lr, [sp, #124]	@ 0x7c
 800943c:	e9cd 321b 	strd	r3, r2, [sp, #108]	@ 0x6c
 8009440:	460b      	mov	r3, r1
 8009442:	4611      	mov	r1, r2
 8009444:	461d      	mov	r5, r3
 8009446:	e9cd c91d 	strd	ip, r9, [sp, #116]	@ 0x74
 800944a:	2e00      	cmp	r6, #0
 800944c:	f2c0 80ed 	blt.w	800962a <forward_lite_conv2d_if32of32wf32+0x58e>
 8009450:	9b01      	ldr	r3, [sp, #4]
 8009452:	2400      	movs	r4, #0
 8009454:	9303      	str	r3, [sp, #12]
 8009456:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800945a:	9f00      	ldr	r7, [sp, #0]
 800945c:	fb03 2307 	mla	r3, r3, r7, r2
 8009460:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8009462:	1817      	adds	r7, r2, r0
 8009464:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8009466:	4297      	cmp	r7, r2
 8009468:	bf94      	ite	ls
 800946a:	ebc4 0407 	rsbls	r4, r4, r7
 800946e:	ebc4 0402 	rsbhi	r4, r4, r2
 8009472:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8009474:	f1bb 0f00 	cmp.w	fp, #0
 8009478:	eba2 0a04 	sub.w	sl, r2, r4
 800947c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800947e:	eba2 0904 	sub.w	r9, r2, r4
 8009482:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 8009484:	fb02 f404 	mul.w	r4, r2, r4
 8009488:	f340 80d5 	ble.w	8009636 <forward_lite_conv2d_if32of32wf32+0x59a>
 800948c:	f024 0c0f 	bic.w	ip, r4, #15
 8009490:	9f00      	ldr	r7, [sp, #0]
 8009492:	eeb0 7a66 	vmov.f32	s14, s13
 8009496:	9a03      	ldr	r2, [sp, #12]
 8009498:	f10c 38ff 	add.w	r8, ip, #4294967295
 800949c:	fb07 fa0a 	mul.w	sl, r7, sl
 80094a0:	fb07 f909 	mul.w	r9, r7, r9
 80094a4:	2700      	movs	r7, #0
 80094a6:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80094aa:	9508      	str	r5, [sp, #32]
 80094ac:	9003      	str	r0, [sp, #12]
 80094ae:	f108 0801 	add.w	r8, r8, #1
 80094b2:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 80094b6:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80094ba:	e9cd 1606 	strd	r1, r6, [sp, #24]
 80094be:	f1bc 0f00 	cmp.w	ip, #0
 80094c2:	f340 80b0 	ble.w	8009626 <forward_lite_conv2d_if32of32wf32+0x58a>
 80094c6:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 80094ca:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80094ce:	2500      	movs	r5, #0
 80094d0:	ed11 6a0f 	vldr	s12, [r1, #-60]	@ 0xffffffc4
 80094d4:	3510      	adds	r5, #16
 80094d6:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 80094da:	3140      	adds	r1, #64	@ 0x40
 80094dc:	ed10 5a10 	vldr	s10, [r0, #-64]	@ 0xffffffc0
 80094e0:	4565      	cmp	r5, ip
 80094e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80094e6:	ed51 4a20 	vldr	s9, [r1, #-128]	@ 0xffffff80
 80094ea:	ed10 6a0e 	vldr	s12, [r0, #-56]	@ 0xffffffc8
 80094ee:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 80094f2:	ed51 5a1e 	vldr	s11, [r1, #-120]	@ 0xffffff88
 80094f6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80094fa:	ed51 da1d 	vldr	s27, [r1, #-116]	@ 0xffffff8c
 80094fe:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 8009502:	ed10 da1c 	vldr	s26, [r0, #-112]	@ 0xffffff90
 8009506:	ed51 ca1c 	vldr	s25, [r1, #-112]	@ 0xffffff90
 800950a:	ed10 ca1b 	vldr	s24, [r0, #-108]	@ 0xffffff94
 800950e:	ed51 ba1b 	vldr	s23, [r1, #-108]	@ 0xffffff94
 8009512:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009516:	ed10 ba1a 	vldr	s22, [r0, #-104]	@ 0xffffff98
 800951a:	ed51 aa1a 	vldr	s21, [r1, #-104]	@ 0xffffff98
 800951e:	ed10 aa19 	vldr	s20, [r0, #-100]	@ 0xffffff9c
 8009522:	ed51 9a19 	vldr	s19, [r1, #-100]	@ 0xffffff9c
 8009526:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 800952a:	ed50 8a18 	vldr	s17, [r0, #-96]	@ 0xffffffa0
 800952e:	eeed 7a8e 	vfma.f32	s15, s27, s28
 8009532:	ed50 0a17 	vldr	s1, [r0, #-92]	@ 0xffffffa4
 8009536:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 800953a:	ed50 1a16 	vldr	s3, [r0, #-88]	@ 0xffffffa8
 800953e:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 8009542:	ed50 2a15 	vldr	s5, [r0, #-84]	@ 0xffffffac
 8009546:	ed11 2a15 	vldr	s4, [r1, #-84]	@ 0xffffffac
 800954a:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800954e:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8009552:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 8009556:	ed50 4a13 	vldr	s9, [r0, #-76]	@ 0xffffffb4
 800955a:	ed11 4a13 	vldr	s8, [r1, #-76]	@ 0xffffffb4
 800955e:	ed50 5a12 	vldr	s11, [r0, #-72]	@ 0xffffffb8
 8009562:	ed11 5a12 	vldr	s10, [r1, #-72]	@ 0xffffffb8
 8009566:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800956a:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800956e:	ed51 da11 	vldr	s27, [r1, #-68]	@ 0xffffffbc
 8009572:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8009576:	eeea 7a29 	vfma.f32	s15, s20, s19
 800957a:	eee9 7a28 	vfma.f32	s15, s18, s17
 800957e:	eee0 7a20 	vfma.f32	s15, s0, s1
 8009582:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009586:	eee2 7a22 	vfma.f32	s15, s4, s5
 800958a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800958e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009592:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009596:	eee6 7a2d 	vfma.f32	s15, s12, s27
 800959a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800959e:	db97      	blt.n	80094d0 <forward_lite_conv2d_if32of32wf32+0x434>
 80095a0:	4472      	add	r2, lr
 80095a2:	4473      	add	r3, lr
 80095a4:	4641      	mov	r1, r8
 80095a6:	428c      	cmp	r4, r1
 80095a8:	dd10      	ble.n	80095cc <forward_lite_conv2d_if32of32wf32+0x530>
 80095aa:	4608      	mov	r0, r1
 80095ac:	4616      	mov	r6, r2
 80095ae:	461d      	mov	r5, r3
 80095b0:	3001      	adds	r0, #1
 80095b2:	ecb5 6a01 	vldmia	r5!, {s12}
 80095b6:	ecf6 7a01 	vldmia	r6!, {s15}
 80095ba:	4284      	cmp	r4, r0
 80095bc:	eea6 7a27 	vfma.f32	s14, s12, s15
 80095c0:	d1f6      	bne.n	80095b0 <forward_lite_conv2d_if32of32wf32+0x514>
 80095c2:	1a61      	subs	r1, r4, r1
 80095c4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80095c8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80095cc:	3701      	adds	r7, #1
 80095ce:	4452      	add	r2, sl
 80095d0:	444b      	add	r3, r9
 80095d2:	45bb      	cmp	fp, r7
 80095d4:	f47f af73 	bne.w	80094be <forward_lite_conv2d_if32of32wf32+0x422>
 80095d8:	9d08      	ldr	r5, [sp, #32]
 80095da:	9803      	ldr	r0, [sp, #12]
 80095dc:	e9dd 1606 	ldrd	r1, r6, [sp, #24]
 80095e0:	9b05      	ldr	r3, [sp, #20]
 80095e2:	3501      	adds	r5, #1
 80095e4:	9a02      	ldr	r2, [sp, #8]
 80095e6:	441e      	add	r6, r3
 80095e8:	1ac0      	subs	r0, r0, r3
 80095ea:	ed81 7a00 	vstr	s14, [r1]
 80095ee:	4411      	add	r1, r2
 80095f0:	9b01      	ldr	r3, [sp, #4]
 80095f2:	9a04      	ldr	r2, [sp, #16]
 80095f4:	4413      	add	r3, r2
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 80095fa:	42ab      	cmp	r3, r5
 80095fc:	f47f af25 	bne.w	800944a <forward_lite_conv2d_if32of32wf32+0x3ae>
 8009600:	f8dd e07c 	ldr.w	lr, [sp, #124]	@ 0x7c
 8009604:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	@ 0x6c
 8009608:	e9dd c91d 	ldrd	ip, r9, [sp, #116]	@ 0x74
 800960c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800960e:	3204      	adds	r2, #4
 8009610:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009612:	4562      	cmp	r2, ip
 8009614:	4401      	add	r1, r0
 8009616:	9109      	str	r1, [sp, #36]	@ 0x24
 8009618:	f4ff aeff 	bcc.w	800941a <forward_lite_conv2d_if32of32wf32+0x37e>
 800961c:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800961e:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009620:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8009622:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8009624:	e6c1      	b.n	80093aa <forward_lite_conv2d_if32of32wf32+0x30e>
 8009626:	2100      	movs	r1, #0
 8009628:	e7bd      	b.n	80095a6 <forward_lite_conv2d_if32of32wf32+0x50a>
 800962a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800962c:	4604      	mov	r4, r0
 800962e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009630:	4403      	add	r3, r0
 8009632:	9203      	str	r2, [sp, #12]
 8009634:	e710      	b.n	8009458 <forward_lite_conv2d_if32of32wf32+0x3bc>
 8009636:	eeb0 7a66 	vmov.f32	s14, s13
 800963a:	e7d1      	b.n	80095e0 <forward_lite_conv2d_if32of32wf32+0x544>
 800963c:	eef0 6a48 	vmov.f32	s13, s16
 8009640:	e6f1      	b.n	8009426 <forward_lite_conv2d_if32of32wf32+0x38a>
 8009642:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009644:	462b      	mov	r3, r5
 8009646:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009648:	e57c      	b.n	8009144 <forward_lite_conv2d_if32of32wf32+0xa8>
 800964a:	bf00      	nop

0800964c <forward_lite_conv2d_if32of32wf32_pool>:
 800964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	ed2d 8b0e 	vpush	{d8-d14}
 8009654:	b0c5      	sub	sp, #276	@ 0x114
 8009656:	4694      	mov	ip, r2
 8009658:	4680      	mov	r8, r0
 800965a:	f9bd 4178 	ldrsh.w	r4, [sp, #376]	@ 0x178
 800965e:	f9bd 51bc 	ldrsh.w	r5, [sp, #444]	@ 0x1bc
 8009662:	931f      	str	r3, [sp, #124]	@ 0x7c
 8009664:	9410      	str	r4, [sp, #64]	@ 0x40
 8009666:	f9bd 31dc 	ldrsh.w	r3, [sp, #476]	@ 0x1dc
 800966a:	f8bd 41a0 	ldrh.w	r4, [sp, #416]	@ 0x1a0
 800966e:	912e      	str	r1, [sp, #184]	@ 0xb8
 8009670:	922f      	str	r2, [sp, #188]	@ 0xbc
 8009672:	fb05 f103 	mul.w	r1, r5, r3
 8009676:	f9bd 2190 	ldrsh.w	r2, [sp, #400]	@ 0x190
 800967a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800967c:	9411      	str	r4, [sp, #68]	@ 0x44
 800967e:	f9bd 3184 	ldrsh.w	r3, [sp, #388]	@ 0x184
 8009682:	f8bd 41a4 	ldrh.w	r4, [sp, #420]	@ 0x1a4
 8009686:	f9bd 718c 	ldrsh.w	r7, [sp, #396]	@ 0x18c
 800968a:	f9bd 6180 	ldrsh.w	r6, [sp, #384]	@ 0x180
 800968e:	9339      	str	r3, [sp, #228]	@ 0xe4
 8009690:	2f00      	cmp	r7, #0
 8009692:	f9bd 3188 	ldrsh.w	r3, [sp, #392]	@ 0x188
 8009696:	920a      	str	r2, [sp, #40]	@ 0x28
 8009698:	9426      	str	r4, [sp, #152]	@ 0x98
 800969a:	f8bd 2198 	ldrh.w	r2, [sp, #408]	@ 0x198
 800969e:	f9bd 41a8 	ldrsh.w	r4, [sp, #424]	@ 0x1a8
 80096a2:	f9bd e17c 	ldrsh.w	lr, [sp, #380]	@ 0x17c
 80096a6:	9038      	str	r0, [sp, #224]	@ 0xe0
 80096a8:	9330      	str	r3, [sp, #192]	@ 0xc0
 80096aa:	f8bd 019c 	ldrh.w	r0, [sp, #412]	@ 0x19c
 80096ae:	fb0e f101 	mul.w	r1, lr, r1
 80096b2:	9225      	str	r2, [sp, #148]	@ 0x94
 80096b4:	f9bd 3194 	ldrsh.w	r3, [sp, #404]	@ 0x194
 80096b8:	950d      	str	r5, [sp, #52]	@ 0x34
 80096ba:	9731      	str	r7, [sp, #196]	@ 0xc4
 80096bc:	960f      	str	r6, [sp, #60]	@ 0x3c
 80096be:	943a      	str	r4, [sp, #232]	@ 0xe8
 80096c0:	f9bd 41d8 	ldrsh.w	r4, [sp, #472]	@ 0x1d8
 80096c4:	f9bd 21c0 	ldrsh.w	r2, [sp, #448]	@ 0x1c0
 80096c8:	943b      	str	r4, [sp, #236]	@ 0xec
 80096ca:	f9bd 41e0 	ldrsh.w	r4, [sp, #480]	@ 0x1e0
 80096ce:	f8dd 91c8 	ldr.w	r9, [sp, #456]	@ 0x1c8
 80096d2:	943c      	str	r4, [sp, #240]	@ 0xf0
 80096d4:	f9bd 41e4 	ldrsh.w	r4, [sp, #484]	@ 0x1e4
 80096d8:	9420      	str	r4, [sp, #128]	@ 0x80
 80096da:	f9bd 41e8 	ldrsh.w	r4, [sp, #488]	@ 0x1e8
 80096de:	943d      	str	r4, [sp, #244]	@ 0xf4
 80096e0:	f9bd 41ec 	ldrsh.w	r4, [sp, #492]	@ 0x1ec
 80096e4:	940c      	str	r4, [sp, #48]	@ 0x30
 80096e6:	f1c0 0400 	rsb	r4, r0, #0
 80096ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80096ec:	f340 8270 	ble.w	8009bd0 <forward_lite_conv2d_if32of32wf32_pool+0x584>
 80096f0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80096f2:	2a00      	cmp	r2, #0
 80096f4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80096f6:	fb07 f303 	mul.w	r3, r7, r3
 80096fa:	ed9f 8a72 	vldr	s16, [pc, #456]	@ 80098c4 <forward_lite_conv2d_if32of32wf32_pool+0x278>
 80096fe:	901c      	str	r0, [sp, #112]	@ 0x70
 8009700:	fb04 f303 	mul.w	r3, r4, r3
 8009704:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8009706:	ea4f 0783 	mov.w	r7, r3, lsl #2
 800970a:	fb0e f300 	mul.w	r3, lr, r0
 800970e:	fb05 f303 	mul.w	r3, r5, r3
 8009712:	9721      	str	r7, [sp, #132]	@ 0x84
 8009714:	ea4f 0784 	mov.w	r7, r4, lsl #2
 8009718:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800971c:	fb0e f505 	mul.w	r5, lr, r5
 8009720:	9712      	str	r7, [sp, #72]	@ 0x48
 8009722:	9035      	str	r0, [sp, #212]	@ 0xd4
 8009724:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8009726:	9534      	str	r5, [sp, #208]	@ 0xd0
 8009728:	f10c 4578 	add.w	r5, ip, #4160749568	@ 0xf8000000
 800972c:	fb00 f306 	mul.w	r3, r0, r6
 8009730:	9532      	str	r5, [sp, #200]	@ 0xc8
 8009732:	ea4f 058e 	mov.w	r5, lr, lsl #2
 8009736:	fb04 f303 	mul.w	r3, r4, r3
 800973a:	950e      	str	r5, [sp, #56]	@ 0x38
 800973c:	ea4f 0083 	mov.w	r0, r3, lsl #2
 8009740:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8009742:	902c      	str	r0, [sp, #176]	@ 0xb0
 8009744:	ea4f 0081 	mov.w	r0, r1, lsl #2
 8009748:	fb0e f303 	mul.w	r3, lr, r3
 800974c:	902a      	str	r0, [sp, #168]	@ 0xa8
 800974e:	985c      	ldr	r0, [sp, #368]	@ 0x170
 8009750:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009754:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8009756:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009758:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800975c:	fb06 f307 	mul.w	r3, r6, r7
 8009760:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 8009764:	9133      	str	r1, [sp, #204]	@ 0xcc
 8009766:	4639      	mov	r1, r7
 8009768:	fb00 8603 	mla	r6, r0, r3, r8
 800976c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800976e:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8009770:	961d      	str	r6, [sp, #116]	@ 0x74
 8009772:	f1c3 0600 	rsb	r6, r3, #0
 8009776:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009778:	f1c0 0000 	rsb	r0, r0, #0
 800977c:	9629      	str	r6, [sp, #164]	@ 0xa4
 800977e:	fb03 f304 	mul.w	r3, r3, r4
 8009782:	f04f 0400 	mov.w	r4, #0
 8009786:	9023      	str	r0, [sp, #140]	@ 0x8c
 8009788:	ea4f 0783 	mov.w	r7, r3, lsl #2
 800978c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800978e:	fb06 f001 	mul.w	r0, r6, r1
 8009792:	9e5c      	ldr	r6, [sp, #368]	@ 0x170
 8009794:	932b      	str	r3, [sp, #172]	@ 0xac
 8009796:	4698      	mov	r8, r3
 8009798:	f102 33ff 	add.w	r3, r2, #4294967295
 800979c:	9713      	str	r7, [sp, #76]	@ 0x4c
 800979e:	9424      	str	r4, [sp, #144]	@ 0x90
 80097a0:	464f      	mov	r7, r9
 80097a2:	b21b      	sxth	r3, r3
 80097a4:	941e      	str	r4, [sp, #120]	@ 0x78
 80097a6:	902d      	str	r0, [sp, #180]	@ 0xb4
 80097a8:	4634      	mov	r4, r6
 80097aa:	9322      	str	r3, [sp, #136]	@ 0x88
 80097ac:	4676      	mov	r6, lr
 80097ae:	f300 808b 	bgt.w	80098c8 <forward_lite_conv2d_if32of32wf32_pool+0x27c>
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f280 822b 	bge.w	8009c0e <forward_lite_conv2d_if32of32wf32_pool+0x5c2>
 80097b8:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80097ba:	9a5c      	ldr	r2, [sp, #368]	@ 0x170
 80097bc:	fb03 f308 	mul.w	r3, r3, r8
 80097c0:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d901      	bls.n	80097cc <forward_lite_conv2d_if32of32wf32_pool+0x180>
 80097c8:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80097ca:	4413      	add	r3, r2
 80097cc:	9a5c      	ldr	r2, [sp, #368]	@ 0x170
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d213      	bcs.n	80097fa <forward_lite_conv2d_if32of32wf32_pool+0x1ae>
 80097d2:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80097d4:	4542      	cmp	r2, r8
 80097d6:	d010      	beq.n	80097fa <forward_lite_conv2d_if32of32wf32_pool+0x1ae>
 80097d8:	459b      	cmp	fp, r3
 80097da:	d90e      	bls.n	80097fa <forward_lite_conv2d_if32of32wf32_pool+0x1ae>
 80097dc:	4621      	mov	r1, r4
 80097de:	461a      	mov	r2, r3
 80097e0:	f852 0b04 	ldr.w	r0, [r2], #4
 80097e4:	4593      	cmp	fp, r2
 80097e6:	f841 0b04 	str.w	r0, [r1], #4
 80097ea:	d8f9      	bhi.n	80097e0 <forward_lite_conv2d_if32of32wf32_pool+0x194>
 80097ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	f023 0303 	bic.w	r3, r3, #3
 80097f6:	3304      	adds	r3, #4
 80097f8:	441c      	add	r4, r3
 80097fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80097fc:	fa1f f388 	uxth.w	r3, r8
 8009800:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8009802:	440a      	add	r2, r1
 8009804:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 8009806:	1ad2      	subs	r2, r2, r3
 8009808:	440c      	add	r4, r1
 800980a:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800980c:	b212      	sxth	r2, r2
 800980e:	45a3      	cmp	fp, r4
 8009810:	440b      	add	r3, r1
 8009812:	9224      	str	r2, [sp, #144]	@ 0x90
 8009814:	fa0f f883 	sxth.w	r8, r3
 8009818:	d803      	bhi.n	8009822 <forward_lite_conv2d_if32of32wf32_pool+0x1d6>
 800981a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800981c:	441c      	add	r4, r3
 800981e:	45a3      	cmp	fp, r4
 8009820:	d9fc      	bls.n	800981c <forward_lite_conv2d_if32of32wf32_pool+0x1d0>
 8009822:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8009824:	4542      	cmp	r2, r8
 8009826:	f300 81c3 	bgt.w	8009bb0 <forward_lite_conv2d_if32of32wf32_pool+0x564>
 800982a:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 800982c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800982e:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8009830:	4428      	add	r0, r5
 8009832:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009834:	9108      	str	r1, [sp, #32]
 8009836:	901b      	str	r0, [sp, #108]	@ 0x6c
 8009838:	3301      	adds	r3, #1
 800983a:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 800983c:	b21b      	sxth	r3, r3
 800983e:	f8dd a0ac 	ldr.w	sl, [sp, #172]	@ 0xac
 8009842:	4401      	add	r1, r0
 8009844:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8009846:	931e      	str	r3, [sp, #120]	@ 0x78
 8009848:	b293      	uxth	r3, r2
 800984a:	912e      	str	r1, [sp, #184]	@ 0xb8
 800984c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800984e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009850:	1b49      	subs	r1, r1, r5
 8009852:	9301      	str	r3, [sp, #4]
 8009854:	1a9b      	subs	r3, r3, r2
 8009856:	9d75      	ldr	r5, [sp, #468]	@ 0x1d4
 8009858:	911c      	str	r1, [sp, #112]	@ 0x70
 800985a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800985c:	b29a      	uxth	r2, r3
 800985e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 8009862:	4401      	add	r1, r0
 8009864:	985c      	ldr	r0, [sp, #368]	@ 0x170
 8009866:	9305      	str	r3, [sp, #20]
 8009868:	911d      	str	r1, [sp, #116]	@ 0x74
 800986a:	eba8 0103 	sub.w	r1, r8, r3
 800986e:	fa1f f38a 	uxth.w	r3, sl
 8009872:	fa0f f881 	sxth.w	r8, r1
 8009876:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800987a:	9303      	str	r3, [sp, #12]
 800987c:	2301      	movs	r3, #1
 800987e:	9307      	str	r3, [sp, #28]
 8009880:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	@ 0xc0
 8009884:	9306      	str	r3, [sp, #24]
 8009886:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 800988a:	9304      	str	r3, [sp, #16]
 800988c:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 8009890:	9302      	str	r3, [sp, #8]
 8009892:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	@ 0xec
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	b2b3      	uxth	r3, r6
 800989a:	47a8      	blx	r5
 800989c:	4652      	mov	r2, sl
 800989e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80098a0:	1a53      	subs	r3, r2, r1
 80098a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80098a6:	b21a      	sxth	r2, r3
 80098a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80098aa:	922b      	str	r2, [sp, #172]	@ 0xac
 80098ac:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 80098ae:	429a      	cmp	r2, r3
 80098b0:	f340 818e 	ble.w	8009bd0 <forward_lite_conv2d_if32of32wf32_pool+0x584>
 80098b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80098b6:	1e53      	subs	r3, r2, #1
 80098b8:	2a00      	cmp	r2, #0
 80098ba:	b21b      	sxth	r3, r3
 80098bc:	9322      	str	r3, [sp, #136]	@ 0x88
 80098be:	f77f af78 	ble.w	80097b2 <forward_lite_conv2d_if32of32wf32_pool+0x166>
 80098c2:	e001      	b.n	80098c8 <forward_lite_conv2d_if32of32wf32_pool+0x27c>
 80098c4:	00000000 	.word	0x00000000
 80098c8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f2c0 82d3 	blt.w	8009e76 <forward_lite_conv2d_if32of32wf32_pool+0x82a>
 80098d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80098d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80098d4:	2300      	movs	r3, #0
 80098d6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80098d8:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 80098da:	440a      	add	r2, r1
 80098dc:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 80098de:	428a      	cmp	r2, r1
 80098e0:	bfd4      	ite	le
 80098e2:	ebc3 0202 	rsble	r2, r3, r2
 80098e6:	ebc3 0201 	rsbgt	r2, r3, r1
 80098ea:	4615      	mov	r5, r2
 80098ec:	9a5d      	ldr	r2, [sp, #372]	@ 0x174
 80098ee:	2a00      	cmp	r2, #0
 80098f0:	f000 8191 	beq.w	8009c16 <forward_lite_conv2d_if32of32wf32_pool+0x5ca>
 80098f4:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80098f6:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80098fa:	f0c0 818c 	bcc.w	8009c16 <forward_lite_conv2d_if32of32wf32_pool+0x5ca>
 80098fe:	2e00      	cmp	r6, #0
 8009900:	f340 8127 	ble.w	8009b52 <forward_lite_conv2d_if32of32wf32_pool+0x506>
 8009904:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009906:	46a2      	mov	sl, r4
 8009908:	f8cd 8108 	str.w	r8, [sp, #264]	@ 0x108
 800990c:	46a8      	mov	r8, r5
 800990e:	fb02 f303 	mul.w	r3, r2, r3
 8009912:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8009914:	f8cd 91c8 	str.w	r9, [sp, #456]	@ 0x1c8
 8009918:	9318      	str	r3, [sp, #96]	@ 0x60
 800991a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800991c:	18e3      	adds	r3, r4, r3
 800991e:	9336      	str	r3, [sp, #216]	@ 0xd8
 8009920:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009922:	4413      	add	r3, r2
 8009924:	9337      	str	r3, [sp, #220]	@ 0xdc
 8009926:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009928:	9328      	str	r3, [sp, #160]	@ 0xa0
 800992a:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800992c:	e9cd 7b3e 	strd	r7, fp, [sp, #248]	@ 0xf8
 8009930:	9319      	str	r3, [sp, #100]	@ 0x64
 8009932:	e9cd 4640 	strd	r4, r6, [sp, #256]	@ 0x100
 8009936:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009938:	995d      	ldr	r1, [sp, #372]	@ 0x174
 800993a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800993c:	f001 fdbe 	bl	800b4bc <st_int8_copy>
 8009940:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 8160 	beq.w	8009c08 <forward_lite_conv2d_if32of32wf32_pool+0x5bc>
 8009948:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800994a:	ecf3 6a01 	vldmia	r3!, {s13}
 800994e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009950:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 80eb 	beq.w	8009b2e <forward_lite_conv2d_if32of32wf32_pool+0x4e2>
 8009958:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800995a:	2500      	movs	r5, #0
 800995c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800995e:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8009960:	4413      	add	r3, r2
 8009962:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8009964:	f8cd a10c 	str.w	sl, [sp, #268]	@ 0x10c
 8009968:	e9cd 120b 	strd	r1, r2, [sp, #44]	@ 0x2c
 800996c:	462a      	mov	r2, r5
 800996e:	4655      	mov	r5, sl
 8009970:	4610      	mov	r0, r2
 8009972:	2c00      	cmp	r4, #0
 8009974:	f2c0 813e 	blt.w	8009bf4 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 8009978:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800997a:	2600      	movs	r6, #0
 800997c:	9214      	str	r2, [sp, #80]	@ 0x50
 800997e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009980:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8009982:	995d      	ldr	r1, [sp, #372]	@ 0x174
 8009984:	429f      	cmp	r7, r3
 8009986:	bf94      	ite	ls
 8009988:	ebc6 0607 	rsbls	r6, r6, r7
 800998c:	ebc6 0603 	rsbhi	r6, r6, r3
 8009990:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8009992:	f1b8 0f00 	cmp.w	r8, #0
 8009996:	fb02 1207 	mla	r2, r2, r7, r1
 800999a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800999c:	eba1 0b06 	sub.w	fp, r1, r6
 80099a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099a2:	eba1 0a06 	sub.w	sl, r1, r6
 80099a6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80099a8:	fb01 f606 	mul.w	r6, r1, r6
 80099ac:	f340 8129 	ble.w	8009c02 <forward_lite_conv2d_if32of32wf32_pool+0x5b6>
 80099b0:	fb07 fb0b 	mul.w	fp, r7, fp
 80099b4:	eeb0 7a66 	vmov.f32	s14, s13
 80099b8:	fb07 fa0a 	mul.w	sl, r7, sl
 80099bc:	f026 070f 	bic.w	r7, r6, #15
 80099c0:	f04f 0c00 	mov.w	ip, #0
 80099c4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80099c6:	f107 39ff 	add.w	r9, r7, #4294967295
 80099ca:	ea4f 1919 	mov.w	r9, r9, lsr #4
 80099ce:	f109 0901 	add.w	r9, r9, #1
 80099d2:	ea4f 1e89 	mov.w	lr, r9, lsl #6
 80099d6:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80099da:	e9cd 5414 	strd	r5, r4, [sp, #80]	@ 0x50
 80099de:	e9cd 0316 	strd	r0, r3, [sp, #88]	@ 0x58
 80099e2:	2f00      	cmp	r7, #0
 80099e4:	f340 8104 	ble.w	8009bf0 <forward_lite_conv2d_if32of32wf32_pool+0x5a4>
 80099e8:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 80099ec:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 80099f0:	2400      	movs	r4, #0
 80099f2:	ed13 6a0f 	vldr	s12, [r3, #-60]	@ 0xffffffc4
 80099f6:	3410      	adds	r4, #16
 80099f8:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 80099fc:	3340      	adds	r3, #64	@ 0x40
 80099fe:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 8009a02:	42bc      	cmp	r4, r7
 8009a04:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009a08:	ed13 4a20 	vldr	s8, [r3, #-128]	@ 0xffffff80
 8009a0c:	ed10 5a0e 	vldr	s10, [r0, #-56]	@ 0xffffffc8
 8009a10:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 8009a14:	ed53 5a1e 	vldr	s11, [r3, #-120]	@ 0xffffff88
 8009a18:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009a1c:	ed13 6a1d 	vldr	s12, [r3, #-116]	@ 0xffffff8c
 8009a20:	ed50 da1d 	vldr	s27, [r0, #-116]	@ 0xffffff8c
 8009a24:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 8009a28:	ed50 ca1c 	vldr	s25, [r0, #-112]	@ 0xffffff90
 8009a2c:	ed10 ca1b 	vldr	s24, [r0, #-108]	@ 0xffffff94
 8009a30:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 8009a34:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009a38:	ed10 ba1a 	vldr	s22, [r0, #-104]	@ 0xffffff98
 8009a3c:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 8009a40:	ed10 aa19 	vldr	s20, [r0, #-100]	@ 0xffffff9c
 8009a44:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 8009a48:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 8009a4c:	ed50 8a18 	vldr	s17, [r0, #-96]	@ 0xffffffa0
 8009a50:	eeed 7a86 	vfma.f32	s15, s27, s12
 8009a54:	ed50 0a17 	vldr	s1, [r0, #-92]	@ 0xffffffa4
 8009a58:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 8009a5c:	ed50 1a16 	vldr	s3, [r0, #-88]	@ 0xffffffa8
 8009a60:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 8009a64:	ed50 2a15 	vldr	s5, [r0, #-84]	@ 0xffffffac
 8009a68:	ed13 2a15 	vldr	s4, [r3, #-84]	@ 0xffffffac
 8009a6c:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8009a70:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8009a74:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8009a78:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 8009a7c:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8009a80:	ed50 5a12 	vldr	s11, [r0, #-72]	@ 0xffffffb8
 8009a84:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 8009a88:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8009a8c:	ed10 ea11 	vldr	s28, [r0, #-68]	@ 0xffffffbc
 8009a90:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 8009a94:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8009a98:	eeea 7a29 	vfma.f32	s15, s20, s19
 8009a9c:	eee9 7a28 	vfma.f32	s15, s18, s17
 8009aa0:	eee0 7a20 	vfma.f32	s15, s0, s1
 8009aa4:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009aa8:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009aac:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009ab0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009ab4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009ab8:	eee6 7a0e 	vfma.f32	s15, s12, s28
 8009abc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ac0:	db97      	blt.n	80099f2 <forward_lite_conv2d_if32of32wf32_pool+0x3a6>
 8009ac2:	4471      	add	r1, lr
 8009ac4:	4472      	add	r2, lr
 8009ac6:	464d      	mov	r5, r9
 8009ac8:	42ae      	cmp	r6, r5
 8009aca:	dd10      	ble.n	8009aee <forward_lite_conv2d_if32of32wf32_pool+0x4a2>
 8009acc:	462b      	mov	r3, r5
 8009ace:	460c      	mov	r4, r1
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	ecb0 6a01 	vldmia	r0!, {s12}
 8009ad8:	ecf4 7a01 	vldmia	r4!, {s15}
 8009adc:	429e      	cmp	r6, r3
 8009ade:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009ae2:	d1f6      	bne.n	8009ad2 <forward_lite_conv2d_if32of32wf32_pool+0x486>
 8009ae4:	1b75      	subs	r5, r6, r5
 8009ae6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8009aea:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8009aee:	f10c 0c01 	add.w	ip, ip, #1
 8009af2:	4459      	add	r1, fp
 8009af4:	4452      	add	r2, sl
 8009af6:	45e0      	cmp	r8, ip
 8009af8:	f47f af73 	bne.w	80099e2 <forward_lite_conv2d_if32of32wf32_pool+0x396>
 8009afc:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	@ 0x50
 8009b00:	e9dd 0316 	ldrd	r0, r3, [sp, #88]	@ 0x58
 8009b04:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009b06:	3001      	adds	r0, #1
 8009b08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009b0a:	ed85 7a00 	vstr	s14, [r5]
 8009b0e:	440d      	add	r5, r1
 8009b10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009b12:	4414      	add	r4, r2
 8009b14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009b16:	1a9b      	subs	r3, r3, r2
 8009b18:	1a89      	subs	r1, r1, r2
 8009b1a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b1c:	910c      	str	r1, [sp, #48]	@ 0x30
 8009b1e:	4282      	cmp	r2, r0
 8009b20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b22:	4431      	add	r1, r6
 8009b24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009b26:	f47f af24 	bne.w	8009972 <forward_lite_conv2d_if32of32wf32_pool+0x326>
 8009b2a:	f8dd a10c 	ldr.w	sl, [sp, #268]	@ 0x10c
 8009b2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b30:	f10a 0a04 	add.w	sl, sl, #4
 8009b34:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009b36:	4413      	add	r3, r2
 8009b38:	9319      	str	r3, [sp, #100]	@ 0x64
 8009b3a:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8009b3c:	459a      	cmp	sl, r3
 8009b3e:	f47f aefa 	bne.w	8009936 <forward_lite_conv2d_if32of32wf32_pool+0x2ea>
 8009b42:	f8dd 91c8 	ldr.w	r9, [sp, #456]	@ 0x1c8
 8009b46:	f8dd 8108 	ldr.w	r8, [sp, #264]	@ 0x108
 8009b4a:	e9dd 7b3e 	ldrd	r7, fp, [sp, #248]	@ 0xf8
 8009b4e:	e9dd 4640 	ldrd	r4, r6, [sp, #256]	@ 0x100
 8009b52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	dd23      	ble.n	8009ba0 <forward_lite_conv2d_if32of32wf32_pool+0x554>
 8009b58:	9b71      	ldr	r3, [sp, #452]	@ 0x1c4
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d03d      	beq.n	8009bda <forward_lite_conv2d_if32of32wf32_pool+0x58e>
 8009b5e:	469a      	mov	sl, r3
 8009b60:	4643      	mov	r3, r8
 8009b62:	2500      	movs	r5, #0
 8009b64:	46b0      	mov	r8, r6
 8009b66:	4626      	mov	r6, r4
 8009b68:	461c      	mov	r4, r3
 8009b6a:	9a73      	ldr	r2, [sp, #460]	@ 0x1cc
 8009b6c:	463b      	mov	r3, r7
 8009b6e:	4631      	mov	r1, r6
 8009b70:	4630      	mov	r0, r6
 8009b72:	4417      	add	r7, r2
 8009b74:	4642      	mov	r2, r8
 8009b76:	47d0      	blx	sl
 8009b78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b7a:	9a74      	ldr	r2, [sp, #464]	@ 0x1d0
 8009b7c:	3501      	adds	r5, #1
 8009b7e:	441e      	add	r6, r3
 8009b80:	eba7 0309 	sub.w	r3, r7, r9
 8009b84:	4293      	cmp	r3, r2
 8009b86:	bfa8      	it	ge
 8009b88:	464f      	movge	r7, r9
 8009b8a:	455e      	cmp	r6, fp
 8009b8c:	d301      	bcc.n	8009b92 <forward_lite_conv2d_if32of32wf32_pool+0x546>
 8009b8e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b90:	441e      	add	r6, r3
 8009b92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b94:	42ab      	cmp	r3, r5
 8009b96:	d1e8      	bne.n	8009b6a <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 8009b98:	4623      	mov	r3, r4
 8009b9a:	4634      	mov	r4, r6
 8009b9c:	4646      	mov	r6, r8
 8009b9e:	4698      	mov	r8, r3
 8009ba0:	f108 0301 	add.w	r3, r8, #1
 8009ba4:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8009ba6:	fa0f f883 	sxth.w	r8, r3
 8009baa:	4542      	cmp	r2, r8
 8009bac:	f77f ae3d 	ble.w	800982a <forward_lite_conv2d_if32of32wf32_pool+0x1de>
 8009bb0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009bb2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009bb4:	4413      	add	r3, r2
 8009bb6:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009bb8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8009bba:	1a9b      	subs	r3, r3, r2
 8009bbc:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8009bbe:	931c      	str	r3, [sp, #112]	@ 0x70
 8009bc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009bc2:	4413      	add	r3, r2
 8009bc4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8009bc6:	931d      	str	r3, [sp, #116]	@ 0x74
 8009bc8:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	f73f ae72 	bgt.w	80098b4 <forward_lite_conv2d_if32of32wf32_pool+0x268>
 8009bd0:	b045      	add	sp, #276	@ 0x114
 8009bd2:	ecbd 8b0e 	vpop	{d8-d14}
 8009bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bdc:	3301      	adds	r3, #1
 8009bde:	4414      	add	r4, r2
 8009be0:	45a3      	cmp	fp, r4
 8009be2:	d801      	bhi.n	8009be8 <forward_lite_conv2d_if32of32wf32_pool+0x59c>
 8009be4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009be6:	4414      	add	r4, r2
 8009be8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d1f5      	bne.n	8009bda <forward_lite_conv2d_if32of32wf32_pool+0x58e>
 8009bee:	e7d7      	b.n	8009ba0 <forward_lite_conv2d_if32of32wf32_pool+0x554>
 8009bf0:	2500      	movs	r5, #0
 8009bf2:	e769      	b.n	8009ac8 <forward_lite_conv2d_if32of32wf32_pool+0x47c>
 8009bf4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009bf6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009bf8:	460e      	mov	r6, r1
 8009bfa:	440a      	add	r2, r1
 8009bfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bfe:	9114      	str	r1, [sp, #80]	@ 0x50
 8009c00:	e6be      	b.n	8009980 <forward_lite_conv2d_if32of32wf32_pool+0x334>
 8009c02:	eeb0 7a66 	vmov.f32	s14, s13
 8009c06:	e77d      	b.n	8009b04 <forward_lite_conv2d_if32of32wf32_pool+0x4b8>
 8009c08:	eef0 6a48 	vmov.f32	s13, s16
 8009c0c:	e6a0      	b.n	8009950 <forward_lite_conv2d_if32of32wf32_pool+0x304>
 8009c0e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8009c12:	9322      	str	r3, [sp, #136]	@ 0x88
 8009c14:	e605      	b.n	8009822 <forward_lite_conv2d_if32of32wf32_pool+0x1d6>
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	dd9b      	ble.n	8009b52 <forward_lite_conv2d_if32of32wf32_pool+0x506>
 8009c1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c1c:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8009c1e:	fb02 f303 	mul.w	r3, r2, r3
 8009c22:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8009c24:	f8cd b0d8 	str.w	fp, [sp, #216]	@ 0xd8
 8009c28:	46ab      	mov	fp, r5
 8009c2a:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c2e:	9118      	str	r1, [sp, #96]	@ 0x60
 8009c30:	18e0      	adds	r0, r4, r3
 8009c32:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009c34:	9728      	str	r7, [sp, #160]	@ 0xa0
 8009c36:	eb03 0a02 	add.w	sl, r3, r2
 8009c3a:	4623      	mov	r3, r4
 8009c3c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8009c3e:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8009c40:	2900      	cmp	r1, #0
 8009c42:	f000 8115 	beq.w	8009e70 <forward_lite_conv2d_if32of32wf32_pool+0x824>
 8009c46:	ecf2 6a01 	vldmia	r2!, {s13}
 8009c4a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009c4c:	2900      	cmp	r1, #0
 8009c4e:	f000 80f8 	beq.w	8009e42 <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 8009c52:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8009c54:	469c      	mov	ip, r3
 8009c56:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009c58:	933e      	str	r3, [sp, #248]	@ 0xf8
 8009c5a:	440d      	add	r5, r1
 8009c5c:	f8dd e0a4 	ldr.w	lr, [sp, #164]	@ 0xa4
 8009c60:	9237      	str	r2, [sp, #220]	@ 0xdc
 8009c62:	f8cd 91c8 	str.w	r9, [sp, #456]	@ 0x1c8
 8009c66:	f8cd 810c 	str.w	r8, [sp, #268]	@ 0x10c
 8009c6a:	e9cd a10b 	strd	sl, r1, [sp, #44]	@ 0x2c
 8009c6e:	2100      	movs	r1, #0
 8009c70:	460b      	mov	r3, r1
 8009c72:	4661      	mov	r1, ip
 8009c74:	469c      	mov	ip, r3
 8009c76:	e9cd 403f 	strd	r4, r0, [sp, #252]	@ 0xfc
 8009c7a:	e9cd a641 	strd	sl, r6, [sp, #260]	@ 0x104
 8009c7e:	f1be 0f00 	cmp.w	lr, #0
 8009c82:	f2c0 80ec 	blt.w	8009e5e <forward_lite_conv2d_if32of32wf32_pool+0x812>
 8009c86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009c88:	2000      	movs	r0, #0
 8009c8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c8c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009c8e:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8009c90:	42ae      	cmp	r6, r5
 8009c92:	bf94      	ite	ls
 8009c94:	ebc0 0006 	rsbls	r0, r0, r6
 8009c98:	ebc0 0005 	rsbhi	r0, r0, r5
 8009c9c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8009c9e:	f1bb 0f00 	cmp.w	fp, #0
 8009ca2:	eba6 0900 	sub.w	r9, r6, r0
 8009ca6:	fb03 7304 	mla	r3, r3, r4, r7
 8009caa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009cac:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8009cae:	eba7 0a00 	sub.w	sl, r7, r0
 8009cb2:	fb06 f000 	mul.w	r0, r6, r0
 8009cb6:	f340 80d8 	ble.w	8009e6a <forward_lite_conv2d_if32of32wf32_pool+0x81e>
 8009cba:	f020 080f 	bic.w	r8, r0, #15
 8009cbe:	eeb0 7a66 	vmov.f32	s14, s13
 8009cc2:	fb04 fa0a 	mul.w	sl, r4, sl
 8009cc6:	f108 37ff 	add.w	r7, r8, #4294967295
 8009cca:	fb04 f909 	mul.w	r9, r4, r9
 8009cce:	2400      	movs	r4, #0
 8009cd0:	093f      	lsrs	r7, r7, #4
 8009cd2:	3701      	adds	r7, #1
 8009cd4:	01be      	lsls	r6, r7, #6
 8009cd6:	013f      	lsls	r7, r7, #4
 8009cd8:	e9cd 1e14 	strd	r1, lr, [sp, #80]	@ 0x50
 8009cdc:	e9cd c516 	strd	ip, r5, [sp, #88]	@ 0x58
 8009ce0:	f1b8 0f00 	cmp.w	r8, #0
 8009ce4:	f340 80b9 	ble.w	8009e5a <forward_lite_conv2d_if32of32wf32_pool+0x80e>
 8009ce8:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 8009cec:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009cf0:	f04f 0c00 	mov.w	ip, #0
 8009cf4:	ed15 6a0f 	vldr	s12, [r5, #-60]	@ 0xffffffc4
 8009cf8:	f10c 0c10 	add.w	ip, ip, #16
 8009cfc:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 8009d00:	3540      	adds	r5, #64	@ 0x40
 8009d02:	ed51 4a10 	vldr	s9, [r1, #-64]	@ 0xffffffc0
 8009d06:	45c4      	cmp	ip, r8
 8009d08:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009d0c:	ed15 5a20 	vldr	s10, [r5, #-128]	@ 0xffffff80
 8009d10:	ed51 5a0e 	vldr	s11, [r1, #-56]	@ 0xffffffc8
 8009d14:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 8009d18:	ed15 6a1e 	vldr	s12, [r5, #-120]	@ 0xffffff88
 8009d1c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009d20:	ed51 da1d 	vldr	s27, [r1, #-116]	@ 0xffffff8c
 8009d24:	ed15 ea1d 	vldr	s28, [r5, #-116]	@ 0xffffff8c
 8009d28:	ed15 da1c 	vldr	s26, [r5, #-112]	@ 0xffffff90
 8009d2c:	ed51 ca1c 	vldr	s25, [r1, #-112]	@ 0xffffff90
 8009d30:	ed15 ca1b 	vldr	s24, [r5, #-108]	@ 0xffffff94
 8009d34:	ed51 ba1b 	vldr	s23, [r1, #-108]	@ 0xffffff94
 8009d38:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009d3c:	ed15 ba1a 	vldr	s22, [r5, #-104]	@ 0xffffff98
 8009d40:	ed51 aa1a 	vldr	s21, [r1, #-104]	@ 0xffffff98
 8009d44:	ed15 aa19 	vldr	s20, [r5, #-100]	@ 0xffffff9c
 8009d48:	ed51 9a19 	vldr	s19, [r1, #-100]	@ 0xffffff9c
 8009d4c:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 8009d50:	ed55 8a18 	vldr	s17, [r5, #-96]	@ 0xffffffa0
 8009d54:	eeed 7a8e 	vfma.f32	s15, s27, s28
 8009d58:	ed55 0a17 	vldr	s1, [r5, #-92]	@ 0xffffffa4
 8009d5c:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 8009d60:	ed55 1a16 	vldr	s3, [r5, #-88]	@ 0xffffffa8
 8009d64:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 8009d68:	ed55 2a15 	vldr	s5, [r5, #-84]	@ 0xffffffac
 8009d6c:	ed11 2a15 	vldr	s4, [r1, #-84]	@ 0xffffffac
 8009d70:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8009d74:	ed11 3a14 	vldr	s6, [r1, #-80]	@ 0xffffffb0
 8009d78:	ed55 3a14 	vldr	s7, [r5, #-80]	@ 0xffffffb0
 8009d7c:	ed55 4a13 	vldr	s9, [r5, #-76]	@ 0xffffffb4
 8009d80:	ed11 4a13 	vldr	s8, [r1, #-76]	@ 0xffffffb4
 8009d84:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 8009d88:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8009d8c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8009d90:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 8009d94:	ed51 da11 	vldr	s27, [r1, #-68]	@ 0xffffffbc
 8009d98:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8009d9c:	eeea 7a29 	vfma.f32	s15, s20, s19
 8009da0:	eee9 7a28 	vfma.f32	s15, s18, s17
 8009da4:	eee0 7a20 	vfma.f32	s15, s0, s1
 8009da8:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009dac:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009db0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009db4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009db8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009dbc:	eee6 7a2d 	vfma.f32	s15, s12, s27
 8009dc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009dc4:	db96      	blt.n	8009cf4 <forward_lite_conv2d_if32of32wf32_pool+0x6a8>
 8009dc6:	4432      	add	r2, r6
 8009dc8:	4433      	add	r3, r6
 8009dca:	4639      	mov	r1, r7
 8009dcc:	4288      	cmp	r0, r1
 8009dce:	dd10      	ble.n	8009df2 <forward_lite_conv2d_if32of32wf32_pool+0x7a6>
 8009dd0:	460d      	mov	r5, r1
 8009dd2:	4696      	mov	lr, r2
 8009dd4:	469c      	mov	ip, r3
 8009dd6:	3501      	adds	r5, #1
 8009dd8:	ecbc 6a01 	vldmia	ip!, {s12}
 8009ddc:	ecfe 7a01 	vldmia	lr!, {s15}
 8009de0:	42a8      	cmp	r0, r5
 8009de2:	eea6 7a27 	vfma.f32	s14, s12, s15
 8009de6:	d1f6      	bne.n	8009dd6 <forward_lite_conv2d_if32of32wf32_pool+0x78a>
 8009de8:	1a41      	subs	r1, r0, r1
 8009dea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8009dee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009df2:	3401      	adds	r4, #1
 8009df4:	4452      	add	r2, sl
 8009df6:	444b      	add	r3, r9
 8009df8:	45a3      	cmp	fp, r4
 8009dfa:	f47f af71 	bne.w	8009ce0 <forward_lite_conv2d_if32of32wf32_pool+0x694>
 8009dfe:	e9dd 1e14 	ldrd	r1, lr, [sp, #80]	@ 0x50
 8009e02:	e9dd c516 	ldrd	ip, r5, [sp, #88]	@ 0x58
 8009e06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e08:	f10c 0c01 	add.w	ip, ip, #1
 8009e0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009e0e:	ed81 7a00 	vstr	s14, [r1]
 8009e12:	4411      	add	r1, r2
 8009e14:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e16:	449e      	add	lr, r3
 8009e18:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8009e1a:	1aed      	subs	r5, r5, r3
 8009e1c:	1ad2      	subs	r2, r2, r3
 8009e1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e20:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e22:	4563      	cmp	r3, ip
 8009e24:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e26:	4402      	add	r2, r0
 8009e28:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e2a:	f47f af28 	bne.w	8009c7e <forward_lite_conv2d_if32of32wf32_pool+0x632>
 8009e2e:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 8009e30:	9e42      	ldr	r6, [sp, #264]	@ 0x108
 8009e32:	f8dd 91c8 	ldr.w	r9, [sp, #456]	@ 0x1c8
 8009e36:	f8dd 810c 	ldr.w	r8, [sp, #268]	@ 0x10c
 8009e3a:	e9dd 343e 	ldrd	r3, r4, [sp, #248]	@ 0xf8
 8009e3e:	e9dd 0a40 	ldrd	r0, sl, [sp, #256]	@ 0x100
 8009e42:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8009e44:	3304      	adds	r3, #4
 8009e46:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8009e48:	4283      	cmp	r3, r0
 8009e4a:	4429      	add	r1, r5
 8009e4c:	9118      	str	r1, [sp, #96]	@ 0x60
 8009e4e:	f47f aef6 	bne.w	8009c3e <forward_lite_conv2d_if32of32wf32_pool+0x5f2>
 8009e52:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8009e54:	f8dd b0d8 	ldr.w	fp, [sp, #216]	@ 0xd8
 8009e58:	e67b      	b.n	8009b52 <forward_lite_conv2d_if32of32wf32_pool+0x506>
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	e7b6      	b.n	8009dcc <forward_lite_conv2d_if32of32wf32_pool+0x780>
 8009e5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e62:	4610      	mov	r0, r2
 8009e64:	4413      	add	r3, r2
 8009e66:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e68:	e710      	b.n	8009c8c <forward_lite_conv2d_if32of32wf32_pool+0x640>
 8009e6a:	eeb0 7a66 	vmov.f32	s14, s13
 8009e6e:	e7ca      	b.n	8009e06 <forward_lite_conv2d_if32of32wf32_pool+0x7ba>
 8009e70:	eef0 6a48 	vmov.f32	s13, s16
 8009e74:	e6e9      	b.n	8009c4a <forward_lite_conv2d_if32of32wf32_pool+0x5fe>
 8009e76:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8009e78:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8009e7a:	921a      	str	r2, [sp, #104]	@ 0x68
 8009e7c:	e52b      	b.n	80098d6 <forward_lite_conv2d_if32of32wf32_pool+0x28a>
 8009e7e:	bf00      	nop

08009e80 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8009e80:	b500      	push	{lr}
 8009e82:	edd3 6a02 	vldr	s13, [r3, #8]
 8009e86:	f06f 4c40 	mvn.w	ip, #3221225472	@ 0xc0000000
 8009e8a:	ed93 7a00 	vldr	s14, [r3]
 8009e8e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8009e92:	4494      	add	ip, r2
 8009e94:	ed93 6a01 	vldr	s12, [r3, #4]
 8009e98:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 8009e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea0:	eb01 028c 	add.w	r2, r1, ip, lsl #2
 8009ea4:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8009ea8:	d422      	bmi.n	8009ef0 <forward_lite_nl_relu_generic_if32of32_kernel+0x70>
 8009eaa:	428a      	cmp	r2, r1
 8009eac:	d31e      	bcc.n	8009eec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8009eae:	1d13      	adds	r3, r2, #4
 8009eb0:	3004      	adds	r0, #4
 8009eb2:	eba2 020e 	sub.w	r2, r2, lr
 8009eb6:	e00c      	b.n	8009ed2 <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 8009eb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ebc:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8009ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec4:	db01      	blt.n	8009eca <forward_lite_nl_relu_generic_if32of32_kernel+0x4a>
 8009ec6:	ee65 7a86 	vmul.f32	s15, s11, s12
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	ed60 7a01 	vstmdb	r0!, {s15}
 8009ed0:	d00c      	beq.n	8009eec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8009ed2:	ed73 7a01 	vldmdb	r3!, {s15}
 8009ed6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ede:	daeb      	bge.n	8009eb8 <forward_lite_nl_relu_generic_if32of32_kernel+0x38>
 8009ee0:	eef0 7a66 	vmov.f32	s15, s13
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	ed60 7a01 	vstmdb	r0!, {s15}
 8009eea:	d1f2      	bne.n	8009ed2 <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 8009eec:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ef0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8009ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef8:	d015      	beq.n	8009f26 <forward_lite_nl_relu_generic_if32of32_kernel+0xa6>
 8009efa:	428a      	cmp	r2, r1
 8009efc:	d3f6      	bcc.n	8009eec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8009efe:	1d13      	adds	r3, r2, #4
 8009f00:	3004      	adds	r0, #4
 8009f02:	eba2 020e 	sub.w	r2, r2, lr
 8009f06:	ed73 7a01 	vldmdb	r3!, {s15}
 8009f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f0e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f16:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009f1a:	d822      	bhi.n	8009f62 <forward_lite_nl_relu_generic_if32of32_kernel+0xe2>
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	ed60 6a01 	vstmdb	r0!, {s13}
 8009f22:	d1f0      	bne.n	8009f06 <forward_lite_nl_relu_generic_if32of32_kernel+0x86>
 8009f24:	e7e2      	b.n	8009eec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8009f26:	428a      	cmp	r2, r1
 8009f28:	d3e0      	bcc.n	8009eec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8009f2a:	1d13      	adds	r3, r2, #4
 8009f2c:	3004      	adds	r0, #4
 8009f2e:	eba2 020e 	sub.w	r2, r2, lr
 8009f32:	2100      	movs	r1, #0
 8009f34:	ed73 7a01 	vldmdb	r3!, {s15}
 8009f38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f40:	dd0a      	ble.n	8009f58 <forward_lite_nl_relu_generic_if32of32_kernel+0xd8>
 8009f42:	429a      	cmp	r2, r3
 8009f44:	ed60 7a01 	vstmdb	r0!, {s15}
 8009f48:	d0d0      	beq.n	8009eec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8009f4a:	ed73 7a01 	vldmdb	r3!, {s15}
 8009f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f56:	dcf4      	bgt.n	8009f42 <forward_lite_nl_relu_generic_if32of32_kernel+0xc2>
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	f840 1d04 	str.w	r1, [r0, #-4]!
 8009f5e:	d1e9      	bne.n	8009f34 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 8009f60:	e7c4      	b.n	8009eec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8009f62:	4293      	cmp	r3, r2
 8009f64:	ed60 7a01 	vstmdb	r0!, {s15}
 8009f68:	d1cd      	bne.n	8009f06 <forward_lite_nl_relu_generic_if32of32_kernel+0x86>
 8009f6a:	e7bf      	b.n	8009eec <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>

08009f6c <pool_func_mp_array_f32>:
 8009f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	b091      	sub	sp, #68	@ 0x44
 8009f72:	4688      	mov	r8, r1
 8009f74:	469a      	mov	sl, r3
 8009f76:	4694      	mov	ip, r2
 8009f78:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 8009f7c:	4681      	mov	r9, r0
 8009f7e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8009f82:	9103      	str	r1, [sp, #12]
 8009f84:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8009f88:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 8009f8c:	9302      	str	r3, [sp, #8]
 8009f8e:	9105      	str	r1, [sp, #20]
 8009f90:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8009f94:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8009f98:	ea52 0503 	orrs.w	r5, r2, r3
 8009f9c:	f8bd 407c 	ldrh.w	r4, [sp, #124]	@ 0x7c
 8009fa0:	9101      	str	r1, [sp, #4]
 8009fa2:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8009fa6:	9104      	str	r1, [sp, #16]
 8009fa8:	d179      	bne.n	800a09e <pool_func_mp_array_f32+0x132>
 8009faa:	9902      	ldr	r1, [sp, #8]
 8009fac:	9e01      	ldr	r6, [sp, #4]
 8009fae:	eba1 0008 	sub.w	r0, r1, r8
 8009fb2:	9f05      	ldr	r7, [sp, #20]
 8009fb4:	1e71      	subs	r1, r6, #1
 8009fb6:	3801      	subs	r0, #1
 8009fb8:	fb11 0107 	smlabb	r1, r1, r7, r0
 8009fbc:	0408      	lsls	r0, r1, #16
 8009fbe:	d56e      	bpl.n	800a09e <pool_func_mp_array_f32+0x132>
 8009fc0:	9903      	ldr	r1, [sp, #12]
 8009fc2:	9f04      	ldr	r7, [sp, #16]
 8009fc4:	eba1 000c 	sub.w	r0, r1, ip
 8009fc8:	1e79      	subs	r1, r7, #1
 8009fca:	3801      	subs	r0, #1
 8009fcc:	fb11 0104 	smlabb	r1, r1, r4, r0
 8009fd0:	0409      	lsls	r1, r1, #16
 8009fd2:	d564      	bpl.n	800a09e <pool_func_mp_array_f32+0x132>
 8009fd4:	2f00      	cmp	r7, #0
 8009fd6:	d05f      	beq.n	800a098 <pool_func_mp_array_f32+0x12c>
 8009fd8:	2e00      	cmp	r6, #0
 8009fda:	d05d      	beq.n	800a098 <pool_func_mp_array_f32+0x12c>
 8009fdc:	4653      	mov	r3, sl
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d05a      	beq.n	800a098 <pool_func_mp_array_f32+0x12c>
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	f040 8164 	bne.w	800a2b0 <pool_func_mp_array_f32+0x344>
 8009fe8:	462b      	mov	r3, r5
 8009fea:	462a      	mov	r2, r5
 8009fec:	4629      	mov	r1, r5
 8009fee:	f8dd b014 	ldr.w	fp, [sp, #20]
 8009ff2:	9801      	ldr	r0, [sp, #4]
 8009ff4:	f04f 0c00 	mov.w	ip, #0
 8009ff8:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8009ffc:	fb00 f101 	mul.w	r1, r0, r1
 800a000:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a004:	4660      	mov	r0, ip
 800a006:	46e6      	mov	lr, ip
 800a008:	9107      	str	r1, [sp, #28]
 800a00a:	b219      	sxth	r1, r3
 800a00c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a010:	4622      	mov	r2, r4
 800a012:	9b07      	ldr	r3, [sp, #28]
 800a014:	42b9      	cmp	r1, r7
 800a016:	fa0f f58a 	sxth.w	r5, sl
 800a01a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800a2ac <pool_func_mp_array_f32+0x340>
 800a01e:	eb0e 0403 	add.w	r4, lr, r3
 800a022:	fa0f fe8c 	sxth.w	lr, ip
 800a026:	da17      	bge.n	800a058 <pool_func_mp_array_f32+0xec>
 800a028:	460e      	mov	r6, r1
 800a02a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 800a02e:	45ae      	cmp	lr, r5
 800a030:	da0c      	bge.n	800a04c <pool_func_mp_array_f32+0xe0>
 800a032:	fb06 e008 	mla	r0, r6, r8, lr
 800a036:	4673      	mov	r3, lr
 800a038:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800a03c:	3301      	adds	r3, #1
 800a03e:	ecb0 7a01 	vldmia	r0!, {s14}
 800a042:	b21c      	sxth	r4, r3
 800a044:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800a048:	42ac      	cmp	r4, r5
 800a04a:	dbf7      	blt.n	800a03c <pool_func_mp_array_f32+0xd0>
 800a04c:	3601      	adds	r6, #1
 800a04e:	b236      	sxth	r6, r6
 800a050:	42be      	cmp	r6, r7
 800a052:	dbec      	blt.n	800a02e <pool_func_mp_array_f32+0xc2>
 800a054:	e9dd 0405 	ldrd	r0, r4, [sp, #20]
 800a058:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a05a:	3001      	adds	r0, #1
 800a05c:	44da      	add	sl, fp
 800a05e:	44dc      	add	ip, fp
 800a060:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a064:	9b01      	ldr	r3, [sp, #4]
 800a066:	b200      	sxth	r0, r0
 800a068:	fa1f fa8a 	uxth.w	sl, sl
 800a06c:	edc4 7a00 	vstr	s15, [r4]
 800a070:	4283      	cmp	r3, r0
 800a072:	fa1f fc8c 	uxth.w	ip, ip
 800a076:	4686      	mov	lr, r0
 800a078:	dccb      	bgt.n	800a012 <pool_func_mp_array_f32+0xa6>
 800a07a:	4614      	mov	r4, r2
 800a07c:	9a08      	ldr	r2, [sp, #32]
 800a07e:	9903      	ldr	r1, [sp, #12]
 800a080:	3201      	adds	r2, #1
 800a082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a084:	4421      	add	r1, r4
 800a086:	9804      	ldr	r0, [sp, #16]
 800a088:	b212      	sxth	r2, r2
 800a08a:	4423      	add	r3, r4
 800a08c:	b289      	uxth	r1, r1
 800a08e:	4290      	cmp	r0, r2
 800a090:	b29b      	uxth	r3, r3
 800a092:	9103      	str	r1, [sp, #12]
 800a094:	4611      	mov	r1, r2
 800a096:	dcac      	bgt.n	8009ff2 <pool_func_mp_array_f32+0x86>
 800a098:	b011      	add	sp, #68	@ 0x44
 800a09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09e:	9904      	ldr	r1, [sp, #16]
 800a0a0:	2900      	cmp	r1, #0
 800a0a2:	d0f9      	beq.n	800a098 <pool_func_mp_array_f32+0x12c>
 800a0a4:	9901      	ldr	r1, [sp, #4]
 800a0a6:	2900      	cmp	r1, #0
 800a0a8:	d0f6      	beq.n	800a098 <pool_func_mp_array_f32+0x12c>
 800a0aa:	4651      	mov	r1, sl
 800a0ac:	2900      	cmp	r1, #0
 800a0ae:	d0f3      	beq.n	800a098 <pool_func_mp_array_f32+0x12c>
 800a0b0:	2901      	cmp	r1, #1
 800a0b2:	9903      	ldr	r1, [sp, #12]
 800a0b4:	d16e      	bne.n	800a194 <pool_func_mp_array_f32+0x228>
 800a0b6:	1a8a      	subs	r2, r1, r2
 800a0b8:	9902      	ldr	r1, [sp, #8]
 800a0ba:	9407      	str	r4, [sp, #28]
 800a0bc:	1ac9      	subs	r1, r1, r3
 800a0be:	425b      	negs	r3, r3
 800a0c0:	b292      	uxth	r2, r2
 800a0c2:	fa1f fb81 	uxth.w	fp, r1
 800a0c6:	9901      	ldr	r1, [sp, #4]
 800a0c8:	b29d      	uxth	r5, r3
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	461c      	mov	r4, r3
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	465a      	mov	r2, fp
 800a0d4:	f8dd b014 	ldr.w	fp, [sp, #20]
 800a0d8:	fb01 f000 	mul.w	r0, r1, r0
 800a0dc:	4692      	mov	sl, r2
 800a0de:	46ae      	mov	lr, r5
 800a0e0:	b21e      	sxth	r6, r3
 800a0e2:	9005      	str	r0, [sp, #20]
 800a0e4:	9803      	ldr	r0, [sp, #12]
 800a0e6:	1a18      	subs	r0, r3, r0
 800a0e8:	b200      	sxth	r0, r0
 800a0ea:	9006      	str	r0, [sp, #24]
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	e9cd 4308 	strd	r4, r3, [sp, #32]
 800a0f2:	4607      	mov	r7, r0
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	e9cd 250a 	strd	r2, r5, [sp, #40]	@ 0x28
 800a0fa:	9a06      	ldr	r2, [sp, #24]
 800a0fc:	fa0f f58a 	sxth.w	r5, sl
 800a100:	9b05      	ldr	r3, [sp, #20]
 800a102:	42b2      	cmp	r2, r6
 800a104:	eddf 7a69 	vldr	s15, [pc, #420]	@ 800a2ac <pool_func_mp_array_f32+0x340>
 800a108:	eb07 0103 	add.w	r1, r7, r3
 800a10c:	fa0f f78e 	sxth.w	r7, lr
 800a110:	da1f      	bge.n	800a152 <pool_func_mp_array_f32+0x1e6>
 800a112:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800a116:	42af      	cmp	r7, r5
 800a118:	da15      	bge.n	800a146 <pool_func_mp_array_f32+0x1da>
 800a11a:	4594      	cmp	ip, r2
 800a11c:	dd13      	ble.n	800a146 <pool_func_mp_array_f32+0x1da>
 800a11e:	fb02 7108 	mla	r1, r2, r8, r7
 800a122:	463b      	mov	r3, r7
 800a124:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a128:	ea42 0003 	orr.w	r0, r2, r3
 800a12c:	0400      	lsls	r0, r0, #16
 800a12e:	d405      	bmi.n	800a13c <pool_func_mp_array_f32+0x1d0>
 800a130:	4598      	cmp	r8, r3
 800a132:	dd03      	ble.n	800a13c <pool_func_mp_array_f32+0x1d0>
 800a134:	ed91 7a00 	vldr	s14, [r1]
 800a138:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800a13c:	3301      	adds	r3, #1
 800a13e:	3104      	adds	r1, #4
 800a140:	b218      	sxth	r0, r3
 800a142:	42a8      	cmp	r0, r5
 800a144:	dbf0      	blt.n	800a128 <pool_func_mp_array_f32+0x1bc>
 800a146:	3201      	adds	r2, #1
 800a148:	b212      	sxth	r2, r2
 800a14a:	42b2      	cmp	r2, r6
 800a14c:	dbe3      	blt.n	800a116 <pool_func_mp_array_f32+0x1aa>
 800a14e:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 800a152:	3001      	adds	r0, #1
 800a154:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a156:	44da      	add	sl, fp
 800a158:	44de      	add	lr, fp
 800a15a:	b200      	sxth	r0, r0
 800a15c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a160:	4284      	cmp	r4, r0
 800a162:	fa1f fa8a 	uxth.w	sl, sl
 800a166:	fa1f fe8e 	uxth.w	lr, lr
 800a16a:	4607      	mov	r7, r0
 800a16c:	edc1 7a00 	vstr	s15, [r1]
 800a170:	dcc3      	bgt.n	800a0fa <pool_func_mp_array_f32+0x18e>
 800a172:	4621      	mov	r1, r4
 800a174:	9c08      	ldr	r4, [sp, #32]
 800a176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a178:	1c60      	adds	r0, r4, #1
 800a17a:	9c07      	ldr	r4, [sp, #28]
 800a17c:	9e04      	ldr	r6, [sp, #16]
 800a17e:	4423      	add	r3, r4
 800a180:	b204      	sxth	r4, r0
 800a182:	42a6      	cmp	r6, r4
 800a184:	b29b      	uxth	r3, r3
 800a186:	4620      	mov	r0, r4
 800a188:	e9dd 250a 	ldrd	r2, r5, [sp, #40]	@ 0x28
 800a18c:	dca4      	bgt.n	800a0d8 <pool_func_mp_array_f32+0x16c>
 800a18e:	b011      	add	sp, #68	@ 0x44
 800a190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a194:	1a88      	subs	r0, r1, r2
 800a196:	9902      	ldr	r1, [sp, #8]
 800a198:	4252      	negs	r2, r2
 800a19a:	4656      	mov	r6, sl
 800a19c:	1ac9      	subs	r1, r1, r3
 800a19e:	425b      	negs	r3, r3
 800a1a0:	b280      	uxth	r0, r0
 800a1a2:	fa1f fe81 	uxth.w	lr, r1
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	b29f      	uxth	r7, r3
 800a1aa:	b295      	uxth	r5, r2
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	468a      	mov	sl, r1
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	4677      	mov	r7, lr
 800a1ba:	46b6      	mov	lr, r6
 800a1bc:	9801      	ldr	r0, [sp, #4]
 800a1be:	b216      	sxth	r6, r2
 800a1c0:	970e      	str	r7, [sp, #56]	@ 0x38
 800a1c2:	fb00 f00a 	mul.w	r0, r0, sl
 800a1c6:	f04f 0a00 	mov.w	sl, #0
 800a1ca:	9009      	str	r0, [sp, #36]	@ 0x24
 800a1cc:	b228      	sxth	r0, r5
 800a1ce:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
 800a1d2:	9008      	str	r0, [sp, #32]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	4650      	mov	r0, sl
 800a1d8:	e9cd 7102 	strd	r7, r1, [sp, #8]
 800a1dc:	e9cd 540c 	strd	r5, r4, [sp, #48]	@ 0x30
 800a1e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1e2:	f8cd a03c 	str.w	sl, [sp, #60]	@ 0x3c
 800a1e6:	469a      	mov	sl, r3
 800a1e8:	4410      	add	r0, r2
 800a1ea:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 800a1ee:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 800a1f2:	fb0e f200 	mul.w	r2, lr, r0
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	4607      	mov	r7, r0
 800a1fa:	9207      	str	r2, [sp, #28]
 800a1fc:	9908      	ldr	r1, [sp, #32]
 800a1fe:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800a2ac <pool_func_mp_array_f32+0x340>
 800a202:	42b1      	cmp	r1, r6
 800a204:	da1f      	bge.n	800a246 <pool_func_mp_array_f32+0x2da>
 800a206:	9006      	str	r0, [sp, #24]
 800a208:	42a5      	cmp	r5, r4
 800a20a:	da17      	bge.n	800a23c <pool_func_mp_array_f32+0x2d0>
 800a20c:	4561      	cmp	r1, ip
 800a20e:	da15      	bge.n	800a23c <pool_func_mp_array_f32+0x2d0>
 800a210:	fb01 5208 	mla	r2, r1, r8, r5
 800a214:	462b      	mov	r3, r5
 800a216:	fb0e 7202 	mla	r2, lr, r2, r7
 800a21a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800a21e:	ea41 0003 	orr.w	r0, r1, r3
 800a222:	0400      	lsls	r0, r0, #16
 800a224:	d405      	bmi.n	800a232 <pool_func_mp_array_f32+0x2c6>
 800a226:	4598      	cmp	r8, r3
 800a228:	dd03      	ble.n	800a232 <pool_func_mp_array_f32+0x2c6>
 800a22a:	ed92 7a00 	vldr	s14, [r2]
 800a22e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800a232:	3301      	adds	r3, #1
 800a234:	445a      	add	r2, fp
 800a236:	b218      	sxth	r0, r3
 800a238:	42a0      	cmp	r0, r4
 800a23a:	dbf0      	blt.n	800a21e <pool_func_mp_array_f32+0x2b2>
 800a23c:	3101      	adds	r1, #1
 800a23e:	b209      	sxth	r1, r1
 800a240:	42b1      	cmp	r1, r6
 800a242:	dbe1      	blt.n	800a208 <pool_func_mp_array_f32+0x29c>
 800a244:	9806      	ldr	r0, [sp, #24]
 800a246:	9b07      	ldr	r3, [sp, #28]
 800a248:	3001      	adds	r0, #1
 800a24a:	441f      	add	r7, r3
 800a24c:	b200      	sxth	r0, r0
 800a24e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a250:	4570      	cmp	r0, lr
 800a252:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a256:	edc7 7a00 	vstr	s15, [r7]
 800a25a:	4607      	mov	r7, r0
 800a25c:	dbce      	blt.n	800a1fc <pool_func_mp_array_f32+0x290>
 800a25e:	9a05      	ldr	r2, [sp, #20]
 800a260:	4653      	mov	r3, sl
 800a262:	9c02      	ldr	r4, [sp, #8]
 800a264:	9803      	ldr	r0, [sp, #12]
 800a266:	4414      	add	r4, r2
 800a268:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 800a26c:	4410      	add	r0, r2
 800a26e:	b2a2      	uxth	r2, r4
 800a270:	f10a 0501 	add.w	r5, sl, #1
 800a274:	9202      	str	r2, [sp, #8]
 800a276:	b282      	uxth	r2, r0
 800a278:	fa0f fa85 	sxth.w	sl, r5
 800a27c:	9203      	str	r2, [sp, #12]
 800a27e:	9a01      	ldr	r2, [sp, #4]
 800a280:	4650      	mov	r0, sl
 800a282:	4552      	cmp	r2, sl
 800a284:	dcac      	bgt.n	800a1e0 <pool_func_mp_array_f32+0x274>
 800a286:	4619      	mov	r1, r3
 800a288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a28a:	e9dd 250b 	ldrd	r2, r5, [sp, #44]	@ 0x2c
 800a28e:	e9dd 470d 	ldrd	r4, r7, [sp, #52]	@ 0x34
 800a292:	3301      	adds	r3, #1
 800a294:	1960      	adds	r0, r4, r5
 800a296:	4422      	add	r2, r4
 800a298:	b21b      	sxth	r3, r3
 800a29a:	b285      	uxth	r5, r0
 800a29c:	9804      	ldr	r0, [sp, #16]
 800a29e:	b292      	uxth	r2, r2
 800a2a0:	469a      	mov	sl, r3
 800a2a2:	4298      	cmp	r0, r3
 800a2a4:	dc8a      	bgt.n	800a1bc <pool_func_mp_array_f32+0x250>
 800a2a6:	b011      	add	sp, #68	@ 0x44
 800a2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ac:	cf000000 	.word	0xcf000000
 800a2b0:	4652      	mov	r2, sl
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	462e      	mov	r6, r5
 800a2b6:	462b      	mov	r3, r5
 800a2b8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800a2bc:	4696      	mov	lr, r2
 800a2be:	9d03      	ldr	r5, [sp, #12]
 800a2c0:	9a01      	ldr	r2, [sp, #4]
 800a2c2:	fa0f fc85 	sxth.w	ip, r5
 800a2c6:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a2ca:	fb03 f302 	mul.w	r3, r3, r2
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	e9cd 6008 	strd	r6, r0, [sp, #32]
 800a2d4:	9303      	str	r3, [sp, #12]
 800a2d6:	462e      	mov	r6, r5
 800a2d8:	b203      	sxth	r3, r0
 800a2da:	4625      	mov	r5, r4
 800a2dc:	4658      	mov	r0, fp
 800a2de:	4614      	mov	r4, r2
 800a2e0:	9307      	str	r3, [sp, #28]
 800a2e2:	4629      	mov	r1, r5
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	9d03      	ldr	r5, [sp, #12]
 800a2e8:	b217      	sxth	r7, r2
 800a2ea:	920c      	str	r2, [sp, #48]	@ 0x30
 800a2ec:	442c      	add	r4, r5
 800a2ee:	b205      	sxth	r5, r0
 800a2f0:	fb0e f404 	mul.w	r4, lr, r4
 800a2f4:	9406      	str	r4, [sp, #24]
 800a2f6:	2400      	movs	r4, #0
 800a2f8:	e9cd 300a 	strd	r3, r0, [sp, #40]	@ 0x28
 800a2fc:	46a3      	mov	fp, r4
 800a2fe:	4630      	mov	r0, r6
 800a300:	9e07      	ldr	r6, [sp, #28]
 800a302:	ed5f 7a16 	vldr	s15, [pc, #-88]	@ 800a2ac <pool_func_mp_array_f32+0x340>
 800a306:	4566      	cmp	r6, ip
 800a308:	da17      	bge.n	800a33a <pool_func_mp_array_f32+0x3ce>
 800a30a:	940d      	str	r4, [sp, #52]	@ 0x34
 800a30c:	42af      	cmp	r7, r5
 800a30e:	da0f      	bge.n	800a330 <pool_func_mp_array_f32+0x3c4>
 800a310:	fb08 7306 	mla	r3, r8, r6, r7
 800a314:	463a      	mov	r2, r7
 800a316:	fb0e b303 	mla	r3, lr, r3, fp
 800a31a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800a31e:	3201      	adds	r2, #1
 800a320:	ed93 7a00 	vldr	s14, [r3]
 800a324:	4453      	add	r3, sl
 800a326:	b214      	sxth	r4, r2
 800a328:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800a32c:	42ac      	cmp	r4, r5
 800a32e:	dbf6      	blt.n	800a31e <pool_func_mp_array_f32+0x3b2>
 800a330:	3601      	adds	r6, #1
 800a332:	b236      	sxth	r6, r6
 800a334:	4566      	cmp	r6, ip
 800a336:	dbe9      	blt.n	800a30c <pool_func_mp_array_f32+0x3a0>
 800a338:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800a33a:	9b06      	ldr	r3, [sp, #24]
 800a33c:	3401      	adds	r4, #1
 800a33e:	449b      	add	fp, r3
 800a340:	b224      	sxth	r4, r4
 800a342:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a344:	4574      	cmp	r4, lr
 800a346:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800a34a:	edcb 7a00 	vstr	s15, [fp]
 800a34e:	46a3      	mov	fp, r4
 800a350:	dbd6      	blt.n	800a300 <pool_func_mp_array_f32+0x394>
 800a352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a354:	4606      	mov	r6, r0
 800a356:	9c05      	ldr	r4, [sp, #20]
 800a358:	3301      	adds	r3, #1
 800a35a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a35c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a35e:	b21b      	sxth	r3, r3
 800a360:	9d01      	ldr	r5, [sp, #4]
 800a362:	4420      	add	r0, r4
 800a364:	4422      	add	r2, r4
 800a366:	429d      	cmp	r5, r3
 800a368:	461c      	mov	r4, r3
 800a36a:	b280      	uxth	r0, r0
 800a36c:	b292      	uxth	r2, r2
 800a36e:	dcba      	bgt.n	800a2e6 <pool_func_mp_array_f32+0x37a>
 800a370:	4635      	mov	r5, r6
 800a372:	9e08      	ldr	r6, [sp, #32]
 800a374:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a376:	460c      	mov	r4, r1
 800a378:	194a      	adds	r2, r1, r5
 800a37a:	3601      	adds	r6, #1
 800a37c:	180b      	adds	r3, r1, r0
 800a37e:	b236      	sxth	r6, r6
 800a380:	b295      	uxth	r5, r2
 800a382:	9a04      	ldr	r2, [sp, #16]
 800a384:	b298      	uxth	r0, r3
 800a386:	4633      	mov	r3, r6
 800a388:	42b2      	cmp	r2, r6
 800a38a:	dc99      	bgt.n	800a2c0 <pool_func_mp_array_f32+0x354>
 800a38c:	e684      	b.n	800a098 <pool_func_mp_array_f32+0x12c>
 800a38e:	bf00      	nop

0800a390 <forward_lite_bn_if32of32wf32>:
 800a390:	b410      	push	{r4}
 800a392:	4684      	mov	ip, r0
 800a394:	461c      	mov	r4, r3
 800a396:	4608      	mov	r0, r1
 800a398:	9b01      	ldr	r3, [sp, #4]
 800a39a:	4661      	mov	r1, ip
 800a39c:	9201      	str	r2, [sp, #4]
 800a39e:	9a02      	ldr	r2, [sp, #8]
 800a3a0:	9402      	str	r4, [sp, #8]
 800a3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3a6:	f001 bac7 	b.w	800b938 <bnl_kernel_if32of32>
 800a3aa:	bf00      	nop

0800a3ac <lite_decompress_ilutof32>:
 800a3ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3b0:	9d08      	ldr	r5, [sp, #32]
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	4608      	mov	r0, r1
 800a3b8:	ea4f 0685 	mov.w	r6, r5, lsl #2
 800a3bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a3c0:	d012      	beq.n	800a3e8 <lite_decompress_ilutof32+0x3c>
 800a3c2:	2b08      	cmp	r3, #8
 800a3c4:	d10e      	bne.n	800a3e4 <lite_decompress_ilutof32+0x38>
 800a3c6:	42ac      	cmp	r4, r5
 800a3c8:	d20c      	bcs.n	800a3e4 <lite_decompress_ilutof32+0x38>
 800a3ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f844 3b04 	str.w	r3, [r4], #4
 800a3d8:	42a5      	cmp	r5, r4
 800a3da:	d8f6      	bhi.n	800a3ca <lite_decompress_ilutof32+0x1e>
 800a3dc:	3e01      	subs	r6, #1
 800a3de:	eb00 0696 	add.w	r6, r0, r6, lsr #2
 800a3e2:	1c70      	adds	r0, r6, #1
 800a3e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3e8:	9b07      	ldr	r3, [sp, #28]
 800a3ea:	085f      	lsrs	r7, r3, #1
 800a3ec:	f003 0601 	and.w	r6, r3, #1
 800a3f0:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800a3f4:	f107 38ff 	add.w	r8, r7, #4294967295
 800a3f8:	42ac      	cmp	r4, r5
 800a3fa:	d2f3      	bcs.n	800a3e4 <lite_decompress_ilutof32+0x38>
 800a3fc:	b30f      	cbz	r7, 800a442 <lite_decompress_ilutof32+0x96>
 800a3fe:	f104 0e08 	add.w	lr, r4, #8
 800a402:	f100 3cff 	add.w	ip, r0, #4294967295
 800a406:	eb00 0108 	add.w	r1, r0, r8
 800a40a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800a40e:	f10e 0e08 	add.w	lr, lr, #8
 800a412:	091b      	lsrs	r3, r3, #4
 800a414:	4561      	cmp	r1, ip
 800a416:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f84e 3c10 	str.w	r3, [lr, #-16]
 800a420:	f89c 3000 	ldrb.w	r3, [ip]
 800a424:	f003 030f 	and.w	r3, r3, #15
 800a428:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800a432:	d1ea      	bne.n	800a40a <lite_decompress_ilutof32+0x5e>
 800a434:	4438      	add	r0, r7
 800a436:	444c      	add	r4, r9
 800a438:	b92e      	cbnz	r6, 800a446 <lite_decompress_ilutof32+0x9a>
 800a43a:	42a5      	cmp	r5, r4
 800a43c:	d8df      	bhi.n	800a3fe <lite_decompress_ilutof32+0x52>
 800a43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a442:	b906      	cbnz	r6, 800a446 <lite_decompress_ilutof32+0x9a>
 800a444:	e7fe      	b.n	800a444 <lite_decompress_ilutof32+0x98>
 800a446:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a44a:	091b      	lsrs	r3, r3, #4
 800a44c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f844 3b04 	str.w	r3, [r4], #4
 800a456:	e7cf      	b.n	800a3f8 <lite_decompress_ilutof32+0x4c>

0800a458 <forward_lite_dense_if32of32wf32>:
 800a458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45c:	ed2d 8b0c 	vpush	{d8-d13}
 800a460:	e9d0 c305 	ldrd	ip, r3, [r0, #20]
 800a464:	e9d0 1700 	ldrd	r1, r7, [r0]
 800a468:	fb03 f30c 	mul.w	r3, r3, ip
 800a46c:	4602      	mov	r2, r0
 800a46e:	b083      	sub	sp, #12
 800a470:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800a474:	4281      	cmp	r1, r0
 800a476:	f080 811d 	bcs.w	800a6b4 <forward_lite_dense_if32of32wf32+0x25c>
 800a47a:	6915      	ldr	r5, [r2, #16]
 800a47c:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800a480:	4664      	mov	r4, ip
 800a482:	eb01 0806 	add.w	r8, r1, r6
 800a486:	6896      	ldr	r6, [r2, #8]
 800a488:	4588      	cmp	r8, r1
 800a48a:	f240 8108 	bls.w	800a69e <forward_lite_dense_if32of32wf32+0x246>
 800a48e:	f1a5 0e10 	sub.w	lr, r5, #16
 800a492:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800a496:	468c      	mov	ip, r1
 800a498:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800a49c:	f10e 0e01 	add.w	lr, lr, #1
 800a4a0:	ea4f 1b8e 	mov.w	fp, lr, lsl #6
 800a4a4:	eb07 1e8e 	add.w	lr, r7, lr, lsl #6
 800a4a8:	e9cd 0100 	strd	r0, r1, [sp]
 800a4ac:	2d0f      	cmp	r5, #15
 800a4ae:	f240 8106 	bls.w	800a6be <forward_lite_dense_if32of32wf32+0x266>
 800a4b2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800a4b6:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 800a4ba:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800a708 <forward_lite_dense_if32of32wf32+0x2b0>
 800a4be:	4628      	mov	r0, r5
 800a4c0:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 800a4c4:	3810      	subs	r0, #16
 800a4c6:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 800a4ca:	3340      	adds	r3, #64	@ 0x40
 800a4cc:	ed51 4a10 	vldr	s9, [r1, #-64]	@ 0xffffffc0
 800a4d0:	280f      	cmp	r0, #15
 800a4d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a4d6:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 800a4da:	ed51 5a0e 	vldr	s11, [r1, #-56]	@ 0xffffffc8
 800a4de:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800a4e2:	ed53 6a1e 	vldr	s13, [r3, #-120]	@ 0xffffff88
 800a4e6:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a4ea:	ed11 6a1d 	vldr	s12, [r1, #-116]	@ 0xffffff8c
 800a4ee:	ed13 da1d 	vldr	s26, [r3, #-116]	@ 0xffffff8c
 800a4f2:	ed53 ca1c 	vldr	s25, [r3, #-112]	@ 0xffffff90
 800a4f6:	ed11 ca1c 	vldr	s24, [r1, #-112]	@ 0xffffff90
 800a4fa:	ed11 ba1b 	vldr	s22, [r1, #-108]	@ 0xffffff94
 800a4fe:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 800a502:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800a506:	ed11 aa1a 	vldr	s20, [r1, #-104]	@ 0xffffff98
 800a50a:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 800a50e:	ed11 9a19 	vldr	s18, [r1, #-100]	@ 0xffffff9c
 800a512:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 800a516:	ed51 8a18 	vldr	s17, [r1, #-96]	@ 0xffffffa0
 800a51a:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 800a51e:	eeed 7a06 	vfma.f32	s15, s26, s12
 800a522:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 800a526:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 800a52a:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 800a52e:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 800a532:	ed11 2a15 	vldr	s4, [r1, #-84]	@ 0xffffffac
 800a536:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 800a53a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800a53e:	ed11 3a14 	vldr	s6, [r1, #-80]	@ 0xffffffb0
 800a542:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800a546:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 800a54a:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 800a54e:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 800a552:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 800a556:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a55a:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 800a55e:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 800a562:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a566:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a56a:	eee8 7a88 	vfma.f32	s15, s17, s16
 800a56e:	eee0 7a20 	vfma.f32	s15, s0, s1
 800a572:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a576:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a57a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a57e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a582:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a586:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a58a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a58e:	d897      	bhi.n	800a4c0 <forward_lite_dense_if32of32wf32+0x68>
 800a590:	eb06 010b 	add.w	r1, r6, fp
 800a594:	f005 000f 	and.w	r0, r5, #15
 800a598:	4673      	mov	r3, lr
 800a59a:	2803      	cmp	r0, #3
 800a59c:	d95f      	bls.n	800a65e <forward_lite_dense_if32of32wf32+0x206>
 800a59e:	edd1 6a01 	vldr	s13, [r1, #4]
 800a5a2:	1f04      	subs	r4, r0, #4
 800a5a4:	edd3 7a01 	vldr	s15, [r3, #4]
 800a5a8:	ed93 4a00 	vldr	s8, [r3]
 800a5ac:	2c03      	cmp	r4, #3
 800a5ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a5b2:	edd1 4a00 	vldr	s9, [r1]
 800a5b6:	ed93 5a02 	vldr	s10, [r3, #8]
 800a5ba:	edd1 5a02 	vldr	s11, [r1, #8]
 800a5be:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a5c2:	ed93 6a03 	vldr	s12, [r3, #12]
 800a5c6:	edd1 6a03 	vldr	s13, [r1, #12]
 800a5ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5ce:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a5d2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a5d6:	eeb0 7a67 	vmov.f32	s14, s15
 800a5da:	d938      	bls.n	800a64e <forward_lite_dense_if32of32wf32+0x1f6>
 800a5dc:	edd1 6a05 	vldr	s13, [r1, #20]
 800a5e0:	f1a0 0a08 	sub.w	sl, r0, #8
 800a5e4:	edd3 7a05 	vldr	s15, [r3, #20]
 800a5e8:	ed93 4a04 	vldr	s8, [r3, #16]
 800a5ec:	f1ba 0f03 	cmp.w	sl, #3
 800a5f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a5f4:	edd1 4a04 	vldr	s9, [r1, #16]
 800a5f8:	ed93 5a06 	vldr	s10, [r3, #24]
 800a5fc:	edd1 5a06 	vldr	s11, [r1, #24]
 800a600:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a604:	ed93 6a07 	vldr	s12, [r3, #28]
 800a608:	edd1 6a07 	vldr	s13, [r1, #28]
 800a60c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a610:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a614:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a618:	d919      	bls.n	800a64e <forward_lite_dense_if32of32wf32+0x1f6>
 800a61a:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800a61e:	edd1 7a09 	vldr	s15, [r1, #36]	@ 0x24
 800a622:	ed91 4a08 	vldr	s8, [r1, #32]
 800a626:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a62a:	edd3 4a08 	vldr	s9, [r3, #32]
 800a62e:	ed91 5a0a 	vldr	s10, [r1, #40]	@ 0x28
 800a632:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 800a636:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a63a:	ed91 6a0b 	vldr	s12, [r1, #44]	@ 0x2c
 800a63e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800a642:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a646:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a64a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a64e:	08a4      	lsrs	r4, r4, #2
 800a650:	f000 0003 	and.w	r0, r0, #3
 800a654:	3401      	adds	r4, #1
 800a656:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800a65a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800a65e:	b1a8      	cbz	r0, 800a68c <forward_lite_dense_if32of32wf32+0x234>
 800a660:	edd3 6a00 	vldr	s13, [r3]
 800a664:	2801      	cmp	r0, #1
 800a666:	edd1 7a00 	vldr	s15, [r1]
 800a66a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a66e:	d00d      	beq.n	800a68c <forward_lite_dense_if32of32wf32+0x234>
 800a670:	edd3 6a01 	vldr	s13, [r3, #4]
 800a674:	2802      	cmp	r0, #2
 800a676:	edd1 7a01 	vldr	s15, [r1, #4]
 800a67a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a67e:	d005      	beq.n	800a68c <forward_lite_dense_if32of32wf32+0x234>
 800a680:	edd1 6a02 	vldr	s13, [r1, #8]
 800a684:	edd3 7a02 	vldr	s15, [r3, #8]
 800a688:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a68c:	ecac 7a01 	vstmia	ip!, {s14}
 800a690:	45e0      	cmp	r8, ip
 800a692:	444e      	add	r6, r9
 800a694:	f63f af0a 	bhi.w	800a4ac <forward_lite_dense_if32of32wf32+0x54>
 800a698:	6954      	ldr	r4, [r2, #20]
 800a69a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a69e:	68d3      	ldr	r3, [r2, #12]
 800a6a0:	b99b      	cbnz	r3, 800a6ca <forward_lite_dense_if32of32wf32+0x272>
 800a6a2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6a6:	6915      	ldr	r5, [r2, #16]
 800a6a8:	00a6      	lsls	r6, r4, #2
 800a6aa:	4288      	cmp	r0, r1
 800a6ac:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 800a6b0:	f63f aee7 	bhi.w	800a482 <forward_lite_dense_if32of32wf32+0x2a>
 800a6b4:	b003      	add	sp, #12
 800a6b6:	ecbd 8b0c 	vpop	{d8-d13}
 800a6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6be:	4628      	mov	r0, r5
 800a6c0:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800a708 <forward_lite_dense_if32of32wf32+0x2b0>
 800a6c4:	4631      	mov	r1, r6
 800a6c6:	463b      	mov	r3, r7
 800a6c8:	e767      	b.n	800a59a <forward_lite_dense_if32of32wf32+0x142>
 800a6ca:	2c00      	cmp	r4, #0
 800a6cc:	d0e9      	beq.n	800a6a2 <forward_lite_dense_if32of32wf32+0x24a>
 800a6ce:	edd1 7a00 	vldr	s15, [r1]
 800a6d2:	ed93 7a00 	vldr	s14, [r3]
 800a6d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6da:	edc1 7a00 	vstr	s15, [r1]
 800a6de:	6954      	ldr	r4, [r2, #20]
 800a6e0:	2c01      	cmp	r4, #1
 800a6e2:	d9de      	bls.n	800a6a2 <forward_lite_dense_if32of32wf32+0x24a>
 800a6e4:	1d0d      	adds	r5, r1, #4
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	68d4      	ldr	r4, [r2, #12]
 800a6ea:	ed95 7a00 	vldr	s14, [r5]
 800a6ee:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	edd4 7a00 	vldr	s15, [r4]
 800a6f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6fc:	ece5 7a01 	vstmia	r5!, {s15}
 800a700:	6954      	ldr	r4, [r2, #20]
 800a702:	429c      	cmp	r4, r3
 800a704:	d8f0      	bhi.n	800a6e8 <forward_lite_dense_if32of32wf32+0x290>
 800a706:	e7cc      	b.n	800a6a2 <forward_lite_dense_if32of32wf32+0x24a>
 800a708:	00000000 	.word	0x00000000

0800a70c <forward_lite_dense_if32of32wf32_lut4>:
 800a70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a710:	b08d      	sub	sp, #52	@ 0x34
 800a712:	4604      	mov	r4, r0
 800a714:	4618      	mov	r0, r3
 800a716:	460d      	mov	r5, r1
 800a718:	920a      	str	r2, [sp, #40]	@ 0x28
 800a71a:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a71e:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 800a722:	e9dd 6717 	ldrd	r6, r7, [sp, #92]	@ 0x5c
 800a726:	fb02 f303 	mul.w	r3, r2, r3
 800a72a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a72e:	9308      	str	r3, [sp, #32]
 800a730:	f1b8 0f00 	cmp.w	r8, #0
 800a734:	d004      	beq.n	800a740 <forward_lite_dense_if32of32wf32_lut4+0x34>
 800a736:	2240      	movs	r2, #64	@ 0x40
 800a738:	4641      	mov	r1, r8
 800a73a:	f000 febf 	bl	800b4bc <st_int8_copy>
 800a73e:	4640      	mov	r0, r8
 800a740:	9b08      	ldr	r3, [sp, #32]
 800a742:	429c      	cmp	r4, r3
 800a744:	f080 810c 	bcs.w	800a960 <forward_lite_dense_if32of32wf32_lut4+0x254>
 800a748:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a74a:	08fa      	lsrs	r2, r7, #3
 800a74c:	f027 0901 	bic.w	r9, r7, #1
 800a750:	9405      	str	r4, [sp, #20]
 800a752:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800a756:	f007 0301 	and.w	r3, r7, #1
 800a75a:	eb05 1b42 	add.w	fp, r5, r2, lsl #5
 800a75e:	9202      	str	r2, [sp, #8]
 800a760:	9303      	str	r3, [sp, #12]
 800a762:	00bb      	lsls	r3, r7, #2
 800a764:	0092      	lsls	r2, r2, #2
 800a766:	f105 0120 	add.w	r1, r5, #32
 800a76a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a76c:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 800a770:	46e6      	mov	lr, ip
 800a772:	465c      	mov	r4, fp
 800a774:	9b05      	ldr	r3, [sp, #20]
 800a776:	9204      	str	r2, [sp, #16]
 800a778:	f8cd c01c 	str.w	ip, [sp, #28]
 800a77c:	9617      	str	r6, [sp, #92]	@ 0x5c
 800a77e:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800a782:	9a07      	ldr	r2, [sp, #28]
 800a784:	eb03 0a02 	add.w	sl, r3, r2
 800a788:	f1a1 0220 	sub.w	r2, r1, #32
 800a78c:	459a      	cmp	sl, r3
 800a78e:	9206      	str	r2, [sp, #24]
 800a790:	f240 80e9 	bls.w	800a966 <forward_lite_dense_if32of32wf32_lut4+0x25a>
 800a794:	f109 3bff 	add.w	fp, r9, #4294967295
 800a798:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a79a:	4698      	mov	r8, r3
 800a79c:	465d      	mov	r5, fp
 800a79e:	9b02      	ldr	r3, [sp, #8]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 80c0 	beq.w	800a926 <forward_lite_dense_if32of32wf32_lut4+0x21a>
 800a7a6:	9b04      	ldr	r3, [sp, #16]
 800a7a8:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800a998 <forward_lite_dense_if32of32wf32_lut4+0x28c>
 800a7ac:	eb02 0c03 	add.w	ip, r2, r3
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	f892 e000 	ldrb.w	lr, [r2]
 800a7b6:	3204      	adds	r2, #4
 800a7b8:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 800a7bc:	3320      	adds	r3, #32
 800a7be:	f00e 0b0f 	and.w	fp, lr, #15
 800a7c2:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800a7c6:	f812 7c03 	ldrb.w	r7, [r2, #-3]
 800a7ca:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 800a7ce:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 800a7d2:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800a7d6:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 800a7da:	eddb 7a00 	vldr	s15, [fp]
 800a7de:	ed9e 3a00 	vldr	s6, [lr]
 800a7e2:	ea4f 1e17 	mov.w	lr, r7, lsr #4
 800a7e6:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800a7ea:	f007 070f 	and.w	r7, r7, #15
 800a7ee:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800a7f2:	f812 6c02 	ldrb.w	r6, [r2, #-2]
 800a7f6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800a7fa:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 800a7fe:	eee3 7a04 	vfma.f32	s15, s6, s8
 800a802:	ed9e 3a00 	vldr	s6, [lr]
 800a806:	ed97 4a00 	vldr	s8, [r7]
 800a80a:	0937      	lsrs	r7, r6, #4
 800a80c:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 800a810:	f006 060f 	and.w	r6, r6, #15
 800a814:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800a818:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 800a81c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800a820:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 800a824:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 800a828:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a82c:	eee4 7a05 	vfma.f32	s15, s8, s10
 800a830:	ed97 4a00 	vldr	s8, [r7]
 800a834:	ed96 5a00 	vldr	s10, [r6]
 800a838:	f812 6c01 	ldrb.w	r6, [r2, #-1]
 800a83c:	4562      	cmp	r2, ip
 800a83e:	ea4f 1716 	mov.w	r7, r6, lsr #4
 800a842:	f006 060f 	and.w	r6, r6, #15
 800a846:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a84a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800a84e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800a852:	eee5 7a06 	vfma.f32	s15, s10, s12
 800a856:	ed97 5a00 	vldr	s10, [r7]
 800a85a:	ed96 6a00 	vldr	s12, [r6]
 800a85e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a862:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a866:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a86a:	d1a2      	bne.n	800a7b2 <forward_lite_dense_if32of32wf32_lut4+0xa6>
 800a86c:	46a6      	mov	lr, r4
 800a86e:	45ce      	cmp	lr, r9
 800a870:	d260      	bcs.n	800a934 <forward_lite_dense_if32of32wf32_lut4+0x228>
 800a872:	eba5 070e 	sub.w	r7, r5, lr
 800a876:	f10e 0208 	add.w	r2, lr, #8
 800a87a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800a87e:	f8cd a004 	str.w	sl, [sp, #4]
 800a882:	ea4f 0bd7 	mov.w	fp, r7, lsr #3
 800a886:	eb0c 07d7 	add.w	r7, ip, r7, lsr #3
 800a88a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800a88e:	3208      	adds	r2, #8
 800a890:	ed52 5a03 	vldr	s11, [r2, #-12]
 800a894:	f003 0a0f 	and.w	sl, r3, #15
 800a898:	091b      	lsrs	r3, r3, #4
 800a89a:	ed52 6a04 	vldr	s13, [r2, #-16]
 800a89e:	42b7      	cmp	r7, r6
 800a8a0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800a8a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a8a8:	edda 7a00 	vldr	s15, [sl]
 800a8ac:	ed93 6a00 	vldr	s12, [r3]
 800a8b0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a8b4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a8b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8bc:	d1e5      	bne.n	800a88a <forward_lite_dense_if32of32wf32_lut4+0x17e>
 800a8be:	f10b 0b01 	add.w	fp, fp, #1
 800a8c2:	f8dd a004 	ldr.w	sl, [sp, #4]
 800a8c6:	eb0c 020b 	add.w	r2, ip, fp
 800a8ca:	eb0e 0ecb 	add.w	lr, lr, fp, lsl #3
 800a8ce:	9b03      	ldr	r3, [sp, #12]
 800a8d0:	b30b      	cbz	r3, 800a916 <forward_lite_dense_if32of32wf32_lut4+0x20a>
 800a8d2:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a8d6:	edde 7a00 	vldr	s15, [lr]
 800a8da:	091b      	lsrs	r3, r3, #4
 800a8dc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a8e0:	edd3 6a00 	vldr	s13, [r3]
 800a8e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8e8:	eca8 7a01 	vstmia	r8!, {s14}
 800a8ec:	45c2      	cmp	sl, r8
 800a8ee:	f63f af56 	bhi.w	800a79e <forward_lite_dense_if32of32wf32_lut4+0x92>
 800a8f2:	9b05      	ldr	r3, [sp, #20]
 800a8f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8f6:	189d      	adds	r5, r3, r2
 800a8f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8fa:	b9eb      	cbnz	r3, 800a938 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800a8fc:	9b08      	ldr	r3, [sp, #32]
 800a8fe:	42ab      	cmp	r3, r5
 800a900:	d92e      	bls.n	800a960 <forward_lite_dense_if32of32wf32_lut4+0x254>
 800a902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a904:	4499      	add	r9, r3
 800a906:	441c      	add	r4, r3
 800a908:	4419      	add	r1, r3
 800a90a:	9b05      	ldr	r3, [sp, #20]
 800a90c:	459a      	cmp	sl, r3
 800a90e:	d92c      	bls.n	800a96a <forward_lite_dense_if32of32wf32_lut4+0x25e>
 800a910:	462b      	mov	r3, r5
 800a912:	9505      	str	r5, [sp, #20]
 800a914:	e735      	b.n	800a782 <forward_lite_dense_if32of32wf32_lut4+0x76>
 800a916:	eca8 7a01 	vstmia	r8!, {s14}
 800a91a:	45c2      	cmp	sl, r8
 800a91c:	d9e9      	bls.n	800a8f2 <forward_lite_dense_if32of32wf32_lut4+0x1e6>
 800a91e:	9b02      	ldr	r3, [sp, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	f47f af40 	bne.w	800a7a6 <forward_lite_dense_if32of32wf32_lut4+0x9a>
 800a926:	f8dd e018 	ldr.w	lr, [sp, #24]
 800a92a:	4694      	mov	ip, r2
 800a92c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800a998 <forward_lite_dense_if32of32wf32_lut4+0x28c>
 800a930:	45ce      	cmp	lr, r9
 800a932:	d39e      	bcc.n	800a872 <forward_lite_dense_if32of32wf32_lut4+0x166>
 800a934:	4662      	mov	r2, ip
 800a936:	e7ca      	b.n	800a8ce <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800a938:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d0de      	beq.n	800a8fc <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 800a93e:	9b07      	ldr	r3, [sp, #28]
 800a940:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 800a944:	1aea      	subs	r2, r5, r3
 800a946:	edd2 7a00 	vldr	s15, [r2]
 800a94a:	ecbc 7a01 	vldmia	ip!, {s14}
 800a94e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a952:	ece2 7a01 	vstmia	r2!, {s15}
 800a956:	42aa      	cmp	r2, r5
 800a958:	d1f5      	bne.n	800a946 <forward_lite_dense_if32of32wf32_lut4+0x23a>
 800a95a:	9b08      	ldr	r3, [sp, #32]
 800a95c:	42ab      	cmp	r3, r5
 800a95e:	d8d0      	bhi.n	800a902 <forward_lite_dense_if32of32wf32_lut4+0x1f6>
 800a960:	b00d      	add	sp, #52	@ 0x34
 800a962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a966:	461d      	mov	r5, r3
 800a968:	e7c6      	b.n	800a8f8 <forward_lite_dense_if32of32wf32_lut4+0x1ec>
 800a96a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800a96e:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800a970:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800a972:	eba5 0c0c 	sub.w	ip, r5, ip
 800a976:	b169      	cbz	r1, 800a994 <forward_lite_dense_if32of32wf32_lut4+0x288>
 800a978:	4663      	mov	r3, ip
 800a97a:	4632      	mov	r2, r6
 800a97c:	ed93 7a00 	vldr	s14, [r3]
 800a980:	ecf2 7a01 	vldmia	r2!, {s15}
 800a984:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a988:	ece3 7a01 	vstmia	r3!, {s15}
 800a98c:	429d      	cmp	r5, r3
 800a98e:	d1f5      	bne.n	800a97c <forward_lite_dense_if32of32wf32_lut4+0x270>
 800a990:	2900      	cmp	r1, #0
 800a992:	d1f1      	bne.n	800a978 <forward_lite_dense_if32of32wf32_lut4+0x26c>
 800a994:	e7fe      	b.n	800a994 <forward_lite_dense_if32of32wf32_lut4+0x288>
 800a996:	bf00      	nop
 800a998:	00000000 	.word	0x00000000

0800a99c <forward_lite_dense_if32of32wf32_lut8>:
 800a99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a0:	b093      	sub	sp, #76	@ 0x4c
 800a9a2:	469a      	mov	sl, r3
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	468b      	mov	fp, r1
 800a9a8:	920d      	str	r2, [sp, #52]	@ 0x34
 800a9aa:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a9ac:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 800a9b0:	e9dd 591d 	ldrd	r5, r9, [sp, #116]	@ 0x74
 800a9b4:	fb02 f303 	mul.w	r3, r2, r3
 800a9b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a9bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a9be:	b136      	cbz	r6, 800a9ce <forward_lite_dense_if32of32wf32_lut8+0x32>
 800a9c0:	4650      	mov	r0, sl
 800a9c2:	46b2      	mov	sl, r6
 800a9c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a9c8:	4631      	mov	r1, r6
 800a9ca:	f000 fd77 	bl	800b4bc <st_int8_copy>
 800a9ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9d0:	429c      	cmp	r4, r3
 800a9d2:	f080 8290 	bcs.w	800aef6 <forward_lite_dense_if32of32wf32_lut8+0x55a>
 800a9d6:	4ab5      	ldr	r2, [pc, #724]	@ (800acac <forward_lite_dense_if32of32wf32_lut8+0x310>)
 800a9d8:	462f      	mov	r7, r5
 800a9da:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a9dc:	444a      	add	r2, r9
 800a9de:	eddf 3ab4 	vldr	s7, [pc, #720]	@ 800acb0 <forward_lite_dense_if32of32wf32_lut8+0x314>
 800a9e2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800a9e6:	0092      	lsls	r2, r2, #2
 800a9e8:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 800a9ec:	0953      	lsrs	r3, r2, #5
 800a9ee:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 800a9f2:	f102 0020 	add.w	r0, r2, #32
 800a9f6:	4616      	mov	r6, r2
 800a9f8:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	eb0b 0800 	add.w	r8, fp, r0
 800aa00:	4602      	mov	r2, r0
 800aa02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa04:	00db      	lsls	r3, r3, #3
 800aa06:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa0a:	eb04 0c03 	add.w	ip, r4, r3
 800aa0e:	45a4      	cmp	ip, r4
 800aa10:	d952      	bls.n	800aab8 <forward_lite_dense_if32of32wf32_lut8+0x11c>
 800aa12:	f106 031f 	add.w	r3, r6, #31
 800aa16:	eb06 000b 	add.w	r0, r6, fp
 800aa1a:	4625      	mov	r5, r4
 800aa1c:	eb0b 0e02 	add.w	lr, fp, r2
 800aa20:	089b      	lsrs	r3, r3, #2
 800aa22:	f100 011f 	add.w	r1, r0, #31
 800aa26:	9001      	str	r0, [sp, #4]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	9103      	str	r1, [sp, #12]
 800aa2c:	1f01      	subs	r1, r0, #4
 800aa2e:	940a      	str	r4, [sp, #40]	@ 0x28
 800aa30:	9302      	str	r3, [sp, #8]
 800aa32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa34:	9104      	str	r1, [sp, #16]
 800aa36:	f10b 0104 	add.w	r1, fp, #4
 800aa3a:	00db      	lsls	r3, r3, #3
 800aa3c:	971d      	str	r7, [sp, #116]	@ 0x74
 800aa3e:	9105      	str	r1, [sp, #20]
 800aa40:	3310      	adds	r3, #16
 800aa42:	9307      	str	r3, [sp, #28]
 800aa44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa46:	eb0b 1343 	add.w	r3, fp, r3, lsl #5
 800aa4a:	9306      	str	r3, [sp, #24]
 800aa4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa4e:	e9cd 2608 	strd	r2, r6, [sp, #32]
 800aa52:	f1b9 0f07 	cmp.w	r9, #7
 800aa56:	d83f      	bhi.n	800aad8 <forward_lite_dense_if32of32wf32_lut8+0x13c>
 800aa58:	45c3      	cmp	fp, r8
 800aa5a:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 800acb0 <forward_lite_dense_if32of32wf32_lut8+0x314>
 800aa5e:	d20f      	bcs.n	800aa80 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 800aa60:	4659      	mov	r1, fp
 800aa62:	4618      	mov	r0, r3
 800aa64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa68:	ecf1 7a01 	vldmia	r1!, {s15}
 800aa6c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800aa70:	4541      	cmp	r1, r8
 800aa72:	edd2 6a00 	vldr	s13, [r2]
 800aa76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aa7a:	d3f3      	bcc.n	800aa64 <forward_lite_dense_if32of32wf32_lut8+0xc8>
 800aa7c:	9a02      	ldr	r2, [sp, #8]
 800aa7e:	4413      	add	r3, r2
 800aa80:	eca5 7a01 	vstmia	r5!, {s14}
 800aa84:	45ac      	cmp	ip, r5
 800aa86:	d8e4      	bhi.n	800aa52 <forward_lite_dense_if32of32wf32_lut8+0xb6>
 800aa88:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa8a:	46f3      	mov	fp, lr
 800aa8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa8e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 800aa90:	18e0      	adds	r0, r4, r3
 800aa92:	e9dd 2608 	ldrd	r2, r6, [sp, #32]
 800aa96:	2f00      	cmp	r7, #0
 800aa98:	f040 8218 	bne.w	800aecc <forward_lite_dense_if32of32wf32_lut8+0x530>
 800aa9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa9e:	4283      	cmp	r3, r0
 800aaa0:	f240 8229 	bls.w	800aef6 <forward_lite_dense_if32of32wf32_lut8+0x55a>
 800aaa4:	45a4      	cmp	ip, r4
 800aaa6:	4490      	add	r8, r2
 800aaa8:	f240 823d 	bls.w	800af26 <forward_lite_dense_if32of32wf32_lut8+0x58a>
 800aaac:	4604      	mov	r4, r0
 800aaae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aab0:	eb04 0c03 	add.w	ip, r4, r3
 800aab4:	45a4      	cmp	ip, r4
 800aab6:	d8ac      	bhi.n	800aa12 <forward_lite_dense_if32of32wf32_lut8+0x76>
 800aab8:	2f00      	cmp	r7, #0
 800aaba:	f040 8205 	bne.w	800aec8 <forward_lite_dense_if32of32wf32_lut8+0x52c>
 800aabe:	469c      	mov	ip, r3
 800aac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aac2:	463d      	mov	r5, r7
 800aac4:	42a3      	cmp	r3, r4
 800aac6:	f240 8216 	bls.w	800aef6 <forward_lite_dense_if32of32wf32_lut8+0x55a>
 800aaca:	f1cc 0100 	rsb	r1, ip, #0
 800aace:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800aad0:	2d00      	cmp	r5, #0
 800aad2:	f040 8217 	bne.w	800af04 <forward_lite_dense_if32of32wf32_lut8+0x568>
 800aad6:	e7fe      	b.n	800aad6 <forward_lite_dense_if32of32wf32_lut8+0x13a>
 800aad8:	f003 0203 	and.w	r2, r3, #3
 800aadc:	2a02      	cmp	r2, #2
 800aade:	f000 81ef 	beq.w	800aec0 <forward_lite_dense_if32of32wf32_lut8+0x524>
 800aae2:	2a03      	cmp	r2, #3
 800aae4:	f000 80e6 	beq.w	800acb4 <forward_lite_dense_if32of32wf32_lut8+0x318>
 800aae8:	2a01      	cmp	r2, #1
 800aaea:	f000 81d3 	beq.w	800ae94 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800aaee:	9a01      	ldr	r2, [sp, #4]
 800aaf0:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800acb0 <forward_lite_dense_if32of32wf32_lut8+0x314>
 800aaf4:	4593      	cmp	fp, r2
 800aaf6:	f200 8203 	bhi.w	800af00 <forward_lite_dense_if32of32wf32_lut8+0x564>
 800aafa:	9807      	ldr	r0, [sp, #28]
 800aafc:	f103 0208 	add.w	r2, r3, #8
 800ab00:	f10b 0120 	add.w	r1, fp, #32
 800ab04:	18c4      	adds	r4, r0, r3
 800ab06:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 800ab0a:	3208      	adds	r2, #8
 800ab0c:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 800ab10:	3120      	adds	r1, #32
 800ab12:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800ab16:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 800ab1a:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 800ab1e:	edd0 7a00 	vldr	s15, [r0]
 800ab22:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 800ab26:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800ab2a:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 800ab2e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800ab32:	ed51 6a0c 	vldr	s13, [r1, #-48]	@ 0xffffffd0
 800ab36:	ed11 5a0b 	vldr	s10, [r1, #-44]	@ 0xffffffd4
 800ab3a:	edd0 2a00 	vldr	s5, [r0]
 800ab3e:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 800ab42:	eee2 7a83 	vfma.f32	s15, s5, s6
 800ab46:	ed51 5a0a 	vldr	s11, [r1, #-40]	@ 0xffffffd8
 800ab4a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800ab4e:	ed11 6a09 	vldr	s12, [r1, #-36]	@ 0xffffffdc
 800ab52:	ed90 3a00 	vldr	s6, [r0]
 800ab56:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800ab5a:	eee3 7a04 	vfma.f32	s15, s6, s8
 800ab5e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800ab62:	ed90 4a00 	vldr	s8, [r0]
 800ab66:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 800ab6a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800ab6e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ab72:	edd0 4a00 	vldr	s9, [r0]
 800ab76:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800ab7a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800ab7e:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800ab82:	edd0 6a00 	vldr	s13, [r0]
 800ab86:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 800ab8a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800ab8e:	eee5 7a26 	vfma.f32	s15, s10, s13
 800ab92:	edd0 6a00 	vldr	s13, [r0]
 800ab96:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 800ab9a:	4294      	cmp	r4, r2
 800ab9c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 800aba0:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800aba4:	edd0 6a00 	vldr	s13, [r0]
 800aba8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800abac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800abb0:	d1a9      	bne.n	800ab06 <forward_lite_dense_if32of32wf32_lut8+0x16a>
 800abb2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800abb4:	4413      	add	r3, r2
 800abb6:	9a06      	ldr	r2, [sp, #24]
 800abb8:	4572      	cmp	r2, lr
 800abba:	f4bf af61 	bcs.w	800aa80 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 800abbe:	7819      	ldrb	r1, [r3, #0]
 800abc0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800abc4:	edd1 7a00 	vldr	s15, [r1]
 800abc8:	4611      	mov	r1, r2
 800abca:	ecf1 6a01 	vldmia	r1!, {s13}
 800abce:	458e      	cmp	lr, r1
 800abd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800abd4:	d963      	bls.n	800ac9e <forward_lite_dense_if32of32wf32_lut8+0x302>
 800abd6:	7859      	ldrb	r1, [r3, #1]
 800abd8:	edd2 6a01 	vldr	s13, [r2, #4]
 800abdc:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800abe0:	edd1 7a00 	vldr	s15, [r1]
 800abe4:	f102 0108 	add.w	r1, r2, #8
 800abe8:	4588      	cmp	r8, r1
 800abea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800abee:	d956      	bls.n	800ac9e <forward_lite_dense_if32of32wf32_lut8+0x302>
 800abf0:	7899      	ldrb	r1, [r3, #2]
 800abf2:	edd2 7a02 	vldr	s15, [r2, #8]
 800abf6:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800abfa:	edd1 6a00 	vldr	s13, [r1]
 800abfe:	f102 010c 	add.w	r1, r2, #12
 800ac02:	4588      	cmp	r8, r1
 800ac04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ac08:	d949      	bls.n	800ac9e <forward_lite_dense_if32of32wf32_lut8+0x302>
 800ac0a:	78d9      	ldrb	r1, [r3, #3]
 800ac0c:	edd2 6a03 	vldr	s13, [r2, #12]
 800ac10:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800ac14:	edd1 7a00 	vldr	s15, [r1]
 800ac18:	f102 0110 	add.w	r1, r2, #16
 800ac1c:	4588      	cmp	r8, r1
 800ac1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ac22:	d93c      	bls.n	800ac9e <forward_lite_dense_if32of32wf32_lut8+0x302>
 800ac24:	7919      	ldrb	r1, [r3, #4]
 800ac26:	edd2 6a04 	vldr	s13, [r2, #16]
 800ac2a:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800ac2e:	edd1 7a00 	vldr	s15, [r1]
 800ac32:	f102 0114 	add.w	r1, r2, #20
 800ac36:	4588      	cmp	r8, r1
 800ac38:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ac3c:	d92f      	bls.n	800ac9e <forward_lite_dense_if32of32wf32_lut8+0x302>
 800ac3e:	7959      	ldrb	r1, [r3, #5]
 800ac40:	edd2 6a05 	vldr	s13, [r2, #20]
 800ac44:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800ac48:	edd1 7a00 	vldr	s15, [r1]
 800ac4c:	f102 0118 	add.w	r1, r2, #24
 800ac50:	4588      	cmp	r8, r1
 800ac52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ac56:	d922      	bls.n	800ac9e <forward_lite_dense_if32of32wf32_lut8+0x302>
 800ac58:	7999      	ldrb	r1, [r3, #6]
 800ac5a:	edd2 6a06 	vldr	s13, [r2, #24]
 800ac5e:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800ac62:	edd1 7a00 	vldr	s15, [r1]
 800ac66:	f102 011c 	add.w	r1, r2, #28
 800ac6a:	4588      	cmp	r8, r1
 800ac6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ac70:	d915      	bls.n	800ac9e <forward_lite_dense_if32of32wf32_lut8+0x302>
 800ac72:	79d9      	ldrb	r1, [r3, #7]
 800ac74:	edd2 7a07 	vldr	s15, [r2, #28]
 800ac78:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800ac7c:	edd1 6a00 	vldr	s13, [r1]
 800ac80:	f102 0120 	add.w	r1, r2, #32
 800ac84:	4588      	cmp	r8, r1
 800ac86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ac8a:	d908      	bls.n	800ac9e <forward_lite_dense_if32of32wf32_lut8+0x302>
 800ac8c:	7a19      	ldrb	r1, [r3, #8]
 800ac8e:	edd2 7a08 	vldr	s15, [r2, #32]
 800ac92:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800ac96:	edd1 6a00 	vldr	s13, [r1]
 800ac9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ac9e:	9903      	ldr	r1, [sp, #12]
 800aca0:	1a8a      	subs	r2, r1, r2
 800aca2:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 800aca6:	1c53      	adds	r3, r2, #1
 800aca8:	e6ea      	b.n	800aa80 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 800acaa:	bf00      	nop
 800acac:	3ffffff8 	.word	0x3ffffff8
 800acb0:	00000000 	.word	0x00000000
 800acb4:	eeb0 7a63 	vmov.f32	s14, s7
 800acb8:	465a      	mov	r2, fp
 800acba:	461f      	mov	r7, r3
 800acbc:	4610      	mov	r0, r2
 800acbe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800acc2:	ecf0 7a01 	vldmia	r0!, {s15}
 800acc6:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800acca:	edd1 6a00 	vldr	s13, [r1]
 800acce:	9901      	ldr	r1, [sp, #4]
 800acd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800acd4:	4288      	cmp	r0, r1
 800acd6:	f200 8111 	bhi.w	800aefc <forward_lite_dense_if32of32wf32_lut8+0x560>
 800acda:	9904      	ldr	r1, [sp, #16]
 800acdc:	f103 0411 	add.w	r4, r3, #17
 800ace0:	3309      	adds	r3, #9
 800ace2:	1a8e      	subs	r6, r1, r2
 800ace4:	3224      	adds	r2, #36	@ 0x24
 800ace6:	0976      	lsrs	r6, r6, #5
 800ace8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800acec:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 800acf0:	3308      	adds	r3, #8
 800acf2:	ed12 6a07 	vldr	s12, [r2, #-28]	@ 0xffffffe4
 800acf6:	3220      	adds	r2, #32
 800acf8:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800acfc:	ed52 2a10 	vldr	s5, [r2, #-64]	@ 0xffffffc0
 800ad00:	ed12 3a0e 	vldr	s6, [r2, #-56]	@ 0xffffffc8
 800ad04:	edd1 7a00 	vldr	s15, [r1]
 800ad08:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 800ad0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ad10:	ed12 4a0d 	vldr	s8, [r2, #-52]	@ 0xffffffcc
 800ad14:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800ad18:	ed52 4a0c 	vldr	s9, [r2, #-48]	@ 0xffffffd0
 800ad1c:	ed12 5a0b 	vldr	s10, [r2, #-44]	@ 0xffffffd4
 800ad20:	ed91 6a00 	vldr	s12, [r1]
 800ad24:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 800ad28:	eee2 7a86 	vfma.f32	s15, s5, s12
 800ad2c:	ed52 5a0a 	vldr	s11, [r2, #-40]	@ 0xffffffd8
 800ad30:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800ad34:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 800ad38:	ed91 6a00 	vldr	s12, [r1]
 800ad3c:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 800ad40:	eee3 7a06 	vfma.f32	s15, s6, s12
 800ad44:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800ad48:	ed91 6a00 	vldr	s12, [r1]
 800ad4c:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 800ad50:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800ad54:	eee4 7a06 	vfma.f32	s15, s8, s12
 800ad58:	ed91 6a00 	vldr	s12, [r1]
 800ad5c:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 800ad60:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800ad64:	eee4 7a86 	vfma.f32	s15, s9, s12
 800ad68:	ed91 6a00 	vldr	s12, [r1]
 800ad6c:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 800ad70:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800ad74:	eee5 7a06 	vfma.f32	s15, s10, s12
 800ad78:	ed91 6a00 	vldr	s12, [r1]
 800ad7c:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 800ad80:	429c      	cmp	r4, r3
 800ad82:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800ad86:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ad8a:	ed91 6a00 	vldr	s12, [r1]
 800ad8e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ad92:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad96:	d1a9      	bne.n	800acec <forward_lite_dense_if32of32wf32_lut8+0x350>
 800ad98:	3601      	adds	r6, #1
 800ad9a:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800ad9e:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 800ada2:	4540      	cmp	r0, r8
 800ada4:	f4bf ae6c 	bcs.w	800aa80 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 800ada8:	781a      	ldrb	r2, [r3, #0]
 800adaa:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800adae:	edd2 7a00 	vldr	s15, [r2]
 800adb2:	4602      	mov	r2, r0
 800adb4:	ecf2 6a01 	vldmia	r2!, {s13}
 800adb8:	4590      	cmp	r8, r2
 800adba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800adbe:	d963      	bls.n	800ae88 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 800adc0:	785a      	ldrb	r2, [r3, #1]
 800adc2:	edd0 6a01 	vldr	s13, [r0, #4]
 800adc6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800adca:	edd2 7a00 	vldr	s15, [r2]
 800adce:	f100 0208 	add.w	r2, r0, #8
 800add2:	4590      	cmp	r8, r2
 800add4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800add8:	d956      	bls.n	800ae88 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 800adda:	789a      	ldrb	r2, [r3, #2]
 800addc:	edd0 6a02 	vldr	s13, [r0, #8]
 800ade0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800ade4:	edd2 7a00 	vldr	s15, [r2]
 800ade8:	f100 020c 	add.w	r2, r0, #12
 800adec:	4590      	cmp	r8, r2
 800adee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800adf2:	d949      	bls.n	800ae88 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 800adf4:	78da      	ldrb	r2, [r3, #3]
 800adf6:	edd0 6a03 	vldr	s13, [r0, #12]
 800adfa:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800adfe:	edd2 7a00 	vldr	s15, [r2]
 800ae02:	f100 0210 	add.w	r2, r0, #16
 800ae06:	4590      	cmp	r8, r2
 800ae08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae0c:	d93c      	bls.n	800ae88 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 800ae0e:	791a      	ldrb	r2, [r3, #4]
 800ae10:	edd0 6a04 	vldr	s13, [r0, #16]
 800ae14:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800ae18:	edd2 7a00 	vldr	s15, [r2]
 800ae1c:	f100 0214 	add.w	r2, r0, #20
 800ae20:	4590      	cmp	r8, r2
 800ae22:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae26:	d92f      	bls.n	800ae88 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 800ae28:	795a      	ldrb	r2, [r3, #5]
 800ae2a:	edd0 6a05 	vldr	s13, [r0, #20]
 800ae2e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800ae32:	edd2 7a00 	vldr	s15, [r2]
 800ae36:	f100 0218 	add.w	r2, r0, #24
 800ae3a:	4596      	cmp	lr, r2
 800ae3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae40:	d922      	bls.n	800ae88 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 800ae42:	799a      	ldrb	r2, [r3, #6]
 800ae44:	edd0 6a06 	vldr	s13, [r0, #24]
 800ae48:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800ae4c:	edd2 7a00 	vldr	s15, [r2]
 800ae50:	f100 021c 	add.w	r2, r0, #28
 800ae54:	4596      	cmp	lr, r2
 800ae56:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae5a:	d915      	bls.n	800ae88 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 800ae5c:	79da      	ldrb	r2, [r3, #7]
 800ae5e:	edd0 6a07 	vldr	s13, [r0, #28]
 800ae62:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800ae66:	edd2 7a00 	vldr	s15, [r2]
 800ae6a:	f100 0220 	add.w	r2, r0, #32
 800ae6e:	4596      	cmp	lr, r2
 800ae70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae74:	d908      	bls.n	800ae88 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 800ae76:	7a1a      	ldrb	r2, [r3, #8]
 800ae78:	edd0 7a08 	vldr	s15, [r0, #32]
 800ae7c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800ae80:	edd2 6a00 	vldr	s13, [r2]
 800ae84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ae88:	9a03      	ldr	r2, [sp, #12]
 800ae8a:	1a10      	subs	r0, r2, r0
 800ae8c:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	e5f5      	b.n	800aa80 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 800ae94:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ae98:	eddb 7a00 	vldr	s15, [fp]
 800ae9c:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800aea0:	9a05      	ldr	r2, [sp, #20]
 800aea2:	ed91 7a00 	vldr	s14, [r1]
 800aea6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aeaa:	f813 1b01 	ldrb.w	r1, [r3], #1
 800aeae:	ecf2 7a01 	vldmia	r2!, {s15}
 800aeb2:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 800aeb6:	edd1 6a00 	vldr	s13, [r1]
 800aeba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aebe:	e6fc      	b.n	800acba <forward_lite_dense_if32of32wf32_lut8+0x31e>
 800aec0:	eeb0 7a63 	vmov.f32	s14, s7
 800aec4:	465a      	mov	r2, fp
 800aec6:	e7f0      	b.n	800aeaa <forward_lite_dense_if32of32wf32_lut8+0x50e>
 800aec8:	4493      	add	fp, r2
 800aeca:	4620      	mov	r0, r4
 800aecc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f43f ade4 	beq.w	800aa9c <forward_lite_dense_if32of32wf32_lut8+0x100>
 800aed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aed6:	4639      	mov	r1, r7
 800aed8:	1ac3      	subs	r3, r0, r3
 800aeda:	edd3 7a00 	vldr	s15, [r3]
 800aede:	ecb1 7a01 	vldmia	r1!, {s14}
 800aee2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aee6:	ece3 7a01 	vstmia	r3!, {s15}
 800aeea:	4298      	cmp	r0, r3
 800aeec:	d1f5      	bne.n	800aeda <forward_lite_dense_if32of32wf32_lut8+0x53e>
 800aeee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aef0:	4283      	cmp	r3, r0
 800aef2:	f63f add7 	bhi.w	800aaa4 <forward_lite_dense_if32of32wf32_lut8+0x108>
 800aef6:	b013      	add	sp, #76	@ 0x4c
 800aef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefc:	463b      	mov	r3, r7
 800aefe:	e750      	b.n	800ada2 <forward_lite_dense_if32of32wf32_lut8+0x406>
 800af00:	465a      	mov	r2, fp
 800af02:	e659      	b.n	800abb8 <forward_lite_dense_if32of32wf32_lut8+0x21c>
 800af04:	2b00      	cmp	r3, #0
 800af06:	f43f ade3 	beq.w	800aad0 <forward_lite_dense_if32of32wf32_lut8+0x134>
 800af0a:	4421      	add	r1, r4
 800af0c:	460b      	mov	r3, r1
 800af0e:	462a      	mov	r2, r5
 800af10:	ed93 7a00 	vldr	s14, [r3]
 800af14:	ecf2 7a01 	vldmia	r2!, {s15}
 800af18:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af1c:	ece3 7a01 	vstmia	r3!, {s15}
 800af20:	429c      	cmp	r4, r3
 800af22:	d1f5      	bne.n	800af10 <forward_lite_dense_if32of32wf32_lut8+0x574>
 800af24:	e7f2      	b.n	800af0c <forward_lite_dense_if32of32wf32_lut8+0x570>
 800af26:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 800af2a:	463d      	mov	r5, r7
 800af2c:	4604      	mov	r4, r0
 800af2e:	e5cc      	b.n	800aaca <forward_lite_dense_if32of32wf32_lut8+0x12e>

0800af30 <forward_lite_nl_relu_if32of32>:
 800af30:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800af34:	4413      	add	r3, r2
 800af36:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800af3a:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800af3e:	4291      	cmp	r1, r2
 800af40:	d80f      	bhi.n	800af62 <forward_lite_nl_relu_if32of32+0x32>
 800af42:	f10c 0104 	add.w	r1, ip, #4
 800af46:	1d13      	adds	r3, r2, #4
 800af48:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800af64 <forward_lite_nl_relu_if32of32+0x34>
 800af4c:	eba2 020c 	sub.w	r2, r2, ip
 800af50:	4408      	add	r0, r1
 800af52:	ed73 7a01 	vldmdb	r3!, {s15}
 800af56:	4293      	cmp	r3, r2
 800af58:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800af5c:	ed60 7a01 	vstmdb	r0!, {s15}
 800af60:	d1f7      	bne.n	800af52 <forward_lite_nl_relu_if32of32+0x22>
 800af62:	4770      	bx	lr
 800af64:	00000000 	.word	0x00000000

0800af68 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>:
 800af68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	461c      	mov	r4, r3
 800af6e:	f992 9000 	ldrsb.w	r9, [r2]
 800af72:	f04f 0500 	mov.w	r5, #0
 800af76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af78:	f369 0507 	bfi	r5, r9, #0, #8
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f369 250f 	bfi	r5, r9, #8, #8
 800af82:	dd1e      	ble.n	800afc2 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x5a>
 800af84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af86:	4688      	mov	r8, r1
 800af88:	2700      	movs	r7, #0
 800af8a:	1c9e      	adds	r6, r3, #2
 800af8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af8e:	fb06 fa04 	mul.w	sl, r6, r4
 800af92:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 800af96:	2c00      	cmp	r4, #0
 800af98:	dd09      	ble.n	800afae <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x46>
 800af9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af9c:	2100      	movs	r1, #0
 800af9e:	eb08 0003 	add.w	r0, r8, r3
 800afa2:	3101      	adds	r1, #1
 800afa4:	8005      	strh	r5, [r0, #0]
 800afa6:	4430      	add	r0, r6
 800afa8:	428c      	cmp	r4, r1
 800afaa:	d1fa      	bne.n	800afa2 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x3a>
 800afac:	44d0      	add	r8, sl
 800afae:	4641      	mov	r1, r8
 800afb0:	465a      	mov	r2, fp
 800afb2:	4648      	mov	r0, r9
 800afb4:	3701      	adds	r7, #1
 800afb6:	f000 fb29 	bl	800b60c <st_int8_fill>
 800afba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afbc:	44d8      	add	r8, fp
 800afbe:	42bb      	cmp	r3, r7
 800afc0:	d1e9      	bne.n	800af96 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x2e>
 800afc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc6:	bf00      	nop

0800afc8 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>:
 800afc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afcc:	469a      	mov	sl, r3
 800afce:	b085      	sub	sp, #20
 800afd0:	f992 b000 	ldrsb.w	fp, [r2]
 800afd4:	f04f 0500 	mov.w	r5, #0
 800afd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800afda:	f1ba 0f06 	cmp.w	sl, #6
 800afde:	f36b 0507 	bfi	r5, fp, #0, #8
 800afe2:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	460c      	mov	r4, r1
 800afe8:	f36b 250f 	bfi	r5, fp, #8, #8
 800afec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800afee:	f000 8082 	beq.w	800b0f6 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x12e>
 800aff2:	f1ba 0f03 	cmp.w	sl, #3
 800aff6:	d054      	beq.n	800b0a2 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xda>
 800aff8:	2b00      	cmp	r3, #0
 800affa:	db07      	blt.n	800b00c <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x44>
 800affc:	1c5a      	adds	r2, r3, #1
 800affe:	4608      	mov	r0, r1
 800b000:	4659      	mov	r1, fp
 800b002:	9301      	str	r3, [sp, #4]
 800b004:	4414      	add	r4, r2
 800b006:	f000 ff95 	bl	800bf34 <memset>
 800b00a:	9b01      	ldr	r3, [sp, #4]
 800b00c:	2f01      	cmp	r7, #1
 800b00e:	f107 3cff 	add.w	ip, r7, #4294967295
 800b012:	f10a 36ff 	add.w	r6, sl, #4294967295
 800b016:	dd2a      	ble.n	800b06e <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xa6>
 800b018:	1c5a      	adds	r2, r3, #1
 800b01a:	f04f 0800 	mov.w	r8, #0
 800b01e:	9303      	str	r3, [sp, #12]
 800b020:	ea4f 0942 	mov.w	r9, r2, lsl #1
 800b024:	9a00      	ldr	r2, [sp, #0]
 800b026:	1c97      	adds	r7, r2, #2
 800b028:	fb07 f206 	mul.w	r2, r7, r6
 800b02c:	e9cd b201 	strd	fp, r2, [sp, #4]
 800b030:	46c3      	mov	fp, r8
 800b032:	46e0      	mov	r8, ip
 800b034:	9b00      	ldr	r3, [sp, #0]
 800b036:	f1ba 0f01 	cmp.w	sl, #1
 800b03a:	eb04 0103 	add.w	r1, r4, r3
 800b03e:	dd09      	ble.n	800b054 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x8c>
 800b040:	468c      	mov	ip, r1
 800b042:	2000      	movs	r0, #0
 800b044:	3001      	adds	r0, #1
 800b046:	f8ac 5000 	strh.w	r5, [ip]
 800b04a:	44bc      	add	ip, r7
 800b04c:	4286      	cmp	r6, r0
 800b04e:	d1f9      	bne.n	800b044 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x7c>
 800b050:	9b02      	ldr	r3, [sp, #8]
 800b052:	4419      	add	r1, r3
 800b054:	f10b 0b01 	add.w	fp, fp, #1
 800b058:	464a      	mov	r2, r9
 800b05a:	9801      	ldr	r0, [sp, #4]
 800b05c:	eb01 0409 	add.w	r4, r1, r9
 800b060:	f000 fad4 	bl	800b60c <st_int8_fill>
 800b064:	45c3      	cmp	fp, r8
 800b066:	d1e5      	bne.n	800b034 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x6c>
 800b068:	f8dd b004 	ldr.w	fp, [sp, #4]
 800b06c:	9b03      	ldr	r3, [sp, #12]
 800b06e:	9a00      	ldr	r2, [sp, #0]
 800b070:	f1ba 0f01 	cmp.w	sl, #1
 800b074:	eb04 0002 	add.w	r0, r4, r2
 800b078:	dd0a      	ble.n	800b090 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xc8>
 800b07a:	f102 0902 	add.w	r9, r2, #2
 800b07e:	4604      	mov	r4, r0
 800b080:	2200      	movs	r2, #0
 800b082:	3201      	adds	r2, #1
 800b084:	8025      	strh	r5, [r4, #0]
 800b086:	444c      	add	r4, r9
 800b088:	4296      	cmp	r6, r2
 800b08a:	d1fa      	bne.n	800b082 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xba>
 800b08c:	fb06 0009 	mla	r0, r6, r9, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	db2d      	blt.n	800b0f0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x128>
 800b094:	1c5a      	adds	r2, r3, #1
 800b096:	4659      	mov	r1, fp
 800b098:	b005      	add	sp, #20
 800b09a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09e:	f000 bf49 	b.w	800bf34 <memset>
 800b0a2:	fa5f f38b 	uxtb.w	r3, fp
 800b0a6:	2f00      	cmp	r7, #0
 800b0a8:	ea4f 220b 	mov.w	r2, fp, lsl #8
 800b0ac:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
 800b0b0:	b292      	uxth	r2, r2
 800b0b2:	ea43 0302 	orr.w	r3, r3, r2
 800b0b6:	ea4f 420b 	mov.w	r2, fp, lsl #16
 800b0ba:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 800b0be:	ea42 0203 	orr.w	r2, r2, r3
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	dd14      	ble.n	800b0f0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x128>
 800b0c6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800b0ca:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800b0ce:	19c8      	adds	r0, r1, r7
 800b0d0:	6022      	str	r2, [r4, #0]
 800b0d2:	3419      	adds	r4, #25
 800b0d4:	f824 3c15 	strh.w	r3, [r4, #-21]
 800b0d8:	f824 5c10 	strh.w	r5, [r4, #-16]
 800b0dc:	f824 3c0b 	strh.w	r3, [r4, #-11]
 800b0e0:	f804 bc06 	strb.w	fp, [r4, #-6]
 800b0e4:	f844 2c05 	str.w	r2, [r4, #-5]
 800b0e8:	f804 bc01 	strb.w	fp, [r4, #-1]
 800b0ec:	42a0      	cmp	r0, r4
 800b0ee:	d1ef      	bne.n	800b0d0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x108>
 800b0f0:	b005      	add	sp, #20
 800b0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f6:	fa5f f38b 	uxtb.w	r3, fp
 800b0fa:	2f00      	cmp	r7, #0
 800b0fc:	ea4f 220b 	mov.w	r2, fp, lsl #8
 800b100:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
 800b104:	b292      	uxth	r2, r2
 800b106:	ea43 0302 	orr.w	r3, r3, r2
 800b10a:	ea4f 420b 	mov.w	r2, fp, lsl #16
 800b10e:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 800b112:	ea43 0302 	orr.w	r3, r3, r2
 800b116:	ddeb      	ble.n	800b0f0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x128>
 800b118:	340f      	adds	r4, #15
 800b11a:	2200      	movs	r2, #0
 800b11c:	3201      	adds	r2, #1
 800b11e:	f844 3c0f 	str.w	r3, [r4, #-15]
 800b122:	f844 3c0b 	str.w	r3, [r4, #-11]
 800b126:	3440      	adds	r4, #64	@ 0x40
 800b128:	4297      	cmp	r7, r2
 800b12a:	f804 bc47 	strb.w	fp, [r4, #-71]
 800b12e:	f824 5c40 	strh.w	r5, [r4, #-64]
 800b132:	f824 5c38 	strh.w	r5, [r4, #-56]
 800b136:	f824 5c30 	strh.w	r5, [r4, #-48]
 800b13a:	f824 5c28 	strh.w	r5, [r4, #-40]
 800b13e:	f824 5c20 	strh.w	r5, [r4, #-32]
 800b142:	f804 bc18 	strb.w	fp, [r4, #-24]
 800b146:	f844 3c17 	str.w	r3, [r4, #-23]
 800b14a:	f844 3c13 	str.w	r3, [r4, #-19]
 800b14e:	d1e5      	bne.n	800b11c <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x154>
 800b150:	b005      	add	sp, #20
 800b152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b156:	bf00      	nop

0800b158 <forward_lite_pad_constant>:
 800b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15c:	b085      	sub	sp, #20
 800b15e:	4616      	mov	r6, r2
 800b160:	4681      	mov	r9, r0
 800b162:	2b08      	cmp	r3, #8
 800b164:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b166:	460c      	mov	r4, r1
 800b168:	9201      	str	r2, [sp, #4]
 800b16a:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	@ 0x44
 800b16e:	e9dd 5a0f 	ldrd	r5, sl, [sp, #60]	@ 0x3c
 800b172:	e9dd 7813 	ldrd	r7, r8, [sp, #76]	@ 0x4c
 800b176:	9002      	str	r0, [sp, #8]
 800b178:	d04f      	beq.n	800b21a <forward_lite_pad_constant+0xc2>
 800b17a:	2a00      	cmp	r2, #0
 800b17c:	dd0f      	ble.n	800b19e <forward_lite_pad_constant+0x46>
 800b17e:	9700      	str	r7, [sp, #0]
 800b180:	f04f 0b00 	mov.w	fp, #0
 800b184:	462f      	mov	r7, r5
 800b186:	4615      	mov	r5, r2
 800b188:	44bb      	add	fp, r7
 800b18a:	4621      	mov	r1, r4
 800b18c:	463a      	mov	r2, r7
 800b18e:	4630      	mov	r0, r6
 800b190:	f000 f994 	bl	800b4bc <st_int8_copy>
 800b194:	455d      	cmp	r5, fp
 800b196:	443c      	add	r4, r7
 800b198:	dcf6      	bgt.n	800b188 <forward_lite_pad_constant+0x30>
 800b19a:	463d      	mov	r5, r7
 800b19c:	9f00      	ldr	r7, [sp, #0]
 800b19e:	9b01      	ldr	r3, [sp, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	dd29      	ble.n	800b1f8 <forward_lite_pad_constant+0xa0>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	2f00      	cmp	r7, #0
 800b1aa:	dd0a      	ble.n	800b1c2 <forward_lite_pad_constant+0x6a>
 800b1ac:	f04f 0b00 	mov.w	fp, #0
 800b1b0:	44ab      	add	fp, r5
 800b1b2:	4621      	mov	r1, r4
 800b1b4:	462a      	mov	r2, r5
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f000 f980 	bl	800b4bc <st_int8_copy>
 800b1bc:	455f      	cmp	r7, fp
 800b1be:	442c      	add	r4, r5
 800b1c0:	dcf6      	bgt.n	800b1b0 <forward_lite_pad_constant+0x58>
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	4648      	mov	r0, r9
 800b1c6:	4652      	mov	r2, sl
 800b1c8:	4454      	add	r4, sl
 800b1ca:	f000 f977 	bl	800b4bc <st_int8_copy>
 800b1ce:	f1b8 0f00 	cmp.w	r8, #0
 800b1d2:	44d1      	add	r9, sl
 800b1d4:	dd0a      	ble.n	800b1ec <forward_lite_pad_constant+0x94>
 800b1d6:	f04f 0b00 	mov.w	fp, #0
 800b1da:	44ab      	add	fp, r5
 800b1dc:	4621      	mov	r1, r4
 800b1de:	462a      	mov	r2, r5
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f000 f96b 	bl	800b4bc <st_int8_copy>
 800b1e6:	45d8      	cmp	r8, fp
 800b1e8:	442c      	add	r4, r5
 800b1ea:	dcf6      	bgt.n	800b1da <forward_lite_pad_constant+0x82>
 800b1ec:	9b00      	ldr	r3, [sp, #0]
 800b1ee:	9a01      	ldr	r2, [sp, #4]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	d1d7      	bne.n	800b1a8 <forward_lite_pad_constant+0x50>
 800b1f8:	9b02      	ldr	r3, [sp, #8]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	dd0a      	ble.n	800b214 <forward_lite_pad_constant+0xbc>
 800b1fe:	2700      	movs	r7, #0
 800b200:	4698      	mov	r8, r3
 800b202:	442f      	add	r7, r5
 800b204:	4621      	mov	r1, r4
 800b206:	462a      	mov	r2, r5
 800b208:	4630      	mov	r0, r6
 800b20a:	f000 f957 	bl	800b4bc <st_int8_copy>
 800b20e:	45b8      	cmp	r8, r7
 800b210:	442c      	add	r4, r5
 800b212:	dcf6      	bgt.n	800b202 <forward_lite_pad_constant+0xaa>
 800b214:	b005      	add	sp, #20
 800b216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21a:	f996 6000 	ldrsb.w	r6, [r6]
 800b21e:	188b      	adds	r3, r1, r2
 800b220:	4630      	mov	r0, r6
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	f000 f9f2 	bl	800b60c <st_int8_fill>
 800b228:	9b01      	ldr	r3, [sp, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	9b00      	ldr	r3, [sp, #0]
 800b22e:	dd27      	ble.n	800b280 <forward_lite_pad_constant+0x128>
 800b230:	eb08 020a 	add.w	r2, r8, sl
 800b234:	f04f 0b00 	mov.w	fp, #0
 800b238:	461c      	mov	r4, r3
 800b23a:	9303      	str	r3, [sp, #12]
 800b23c:	4643      	mov	r3, r8
 800b23e:	19d5      	adds	r5, r2, r7
 800b240:	46d8      	mov	r8, fp
 800b242:	eb07 020a 	add.w	r2, r7, sl
 800b246:	469b      	mov	fp, r3
 800b248:	9200      	str	r2, [sp, #0]
 800b24a:	4621      	mov	r1, r4
 800b24c:	4630      	mov	r0, r6
 800b24e:	463a      	mov	r2, r7
 800b250:	f108 0801 	add.w	r8, r8, #1
 800b254:	f000 f9da 	bl	800b60c <st_int8_fill>
 800b258:	19e1      	adds	r1, r4, r7
 800b25a:	4648      	mov	r0, r9
 800b25c:	4652      	mov	r2, sl
 800b25e:	f000 f92d 	bl	800b4bc <st_int8_copy>
 800b262:	9b00      	ldr	r3, [sp, #0]
 800b264:	465a      	mov	r2, fp
 800b266:	4630      	mov	r0, r6
 800b268:	18e1      	adds	r1, r4, r3
 800b26a:	44d1      	add	r9, sl
 800b26c:	f000 f9ce 	bl	800b60c <st_int8_fill>
 800b270:	9b01      	ldr	r3, [sp, #4]
 800b272:	442c      	add	r4, r5
 800b274:	4543      	cmp	r3, r8
 800b276:	d1e8      	bne.n	800b24a <forward_lite_pad_constant+0xf2>
 800b278:	461a      	mov	r2, r3
 800b27a:	9b03      	ldr	r3, [sp, #12]
 800b27c:	fb05 3302 	mla	r3, r5, r2, r3
 800b280:	9a02      	ldr	r2, [sp, #8]
 800b282:	4619      	mov	r1, r3
 800b284:	4630      	mov	r0, r6
 800b286:	b005      	add	sp, #20
 800b288:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28c:	f000 b9be 	b.w	800b60c <st_int8_fill>

0800b290 <forward_lite_pad_edge>:
 800b290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b294:	b087      	sub	sp, #28
 800b296:	469b      	mov	fp, r3
 800b298:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b29a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 800b29e:	18ce      	adds	r6, r1, r3
 800b2a0:	1e13      	subs	r3, r2, #0
 800b2a2:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
 800b2a6:	9301      	str	r3, [sp, #4]
 800b2a8:	e9dd 4a12 	ldrd	r4, sl, [sp, #72]	@ 0x48
 800b2ac:	dd3d      	ble.n	800b32a <forward_lite_pad_edge+0x9a>
 800b2ae:	fb04 f308 	mul.w	r3, r4, r8
 800b2b2:	4607      	mov	r7, r0
 800b2b4:	4635      	mov	r5, r6
 800b2b6:	f8cd b014 	str.w	fp, [sp, #20]
 800b2ba:	9302      	str	r3, [sp, #8]
 800b2bc:	2300      	movs	r3, #0
 800b2be:	e9cd 6103 	strd	r6, r1, [sp, #12]
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	f1b9 0f00 	cmp.w	r9, #0
 800b2c8:	dd09      	ble.n	800b2de <forward_lite_pad_edge+0x4e>
 800b2ca:	2600      	movs	r6, #0
 800b2cc:	4426      	add	r6, r4
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	4622      	mov	r2, r4
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	f000 f8f2 	bl	800b4bc <st_int8_copy>
 800b2d8:	45b1      	cmp	r9, r6
 800b2da:	4425      	add	r5, r4
 800b2dc:	dcf6      	bgt.n	800b2cc <forward_lite_pad_edge+0x3c>
 800b2de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	441f      	add	r7, r3
 800b2e8:	441d      	add	r5, r3
 800b2ea:	f000 f8e7 	bl	800b4bc <st_int8_copy>
 800b2ee:	f1b8 0f00 	cmp.w	r8, #0
 800b2f2:	eba7 0a04 	sub.w	sl, r7, r4
 800b2f6:	dd0c      	ble.n	800b312 <forward_lite_pad_edge+0x82>
 800b2f8:	46ab      	mov	fp, r5
 800b2fa:	2600      	movs	r6, #0
 800b2fc:	3601      	adds	r6, #1
 800b2fe:	4659      	mov	r1, fp
 800b300:	4622      	mov	r2, r4
 800b302:	4650      	mov	r0, sl
 800b304:	f000 f8da 	bl	800b4bc <st_int8_copy>
 800b308:	45b0      	cmp	r8, r6
 800b30a:	44a3      	add	fp, r4
 800b30c:	d1f6      	bne.n	800b2fc <forward_lite_pad_edge+0x6c>
 800b30e:	9b02      	ldr	r3, [sp, #8]
 800b310:	441d      	add	r5, r3
 800b312:	9b00      	ldr	r3, [sp, #0]
 800b314:	9a01      	ldr	r2, [sp, #4]
 800b316:	3301      	adds	r3, #1
 800b318:	429a      	cmp	r2, r3
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	d1d2      	bne.n	800b2c4 <forward_lite_pad_edge+0x34>
 800b31e:	f8dd b014 	ldr.w	fp, [sp, #20]
 800b322:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b326:	e9dd 6103 	ldrd	r6, r1, [sp, #12]
 800b32a:	42b1      	cmp	r1, r6
 800b32c:	d00a      	beq.n	800b344 <forward_lite_pad_edge+0xb4>
 800b32e:	460c      	mov	r4, r1
 800b330:	460d      	mov	r5, r1
 800b332:	4621      	mov	r1, r4
 800b334:	4454      	add	r4, sl
 800b336:	4652      	mov	r2, sl
 800b338:	4630      	mov	r0, r6
 800b33a:	f000 f8bf 	bl	800b4bc <st_int8_copy>
 800b33e:	42a6      	cmp	r6, r4
 800b340:	d1f7      	bne.n	800b332 <forward_lite_pad_edge+0xa2>
 800b342:	4629      	mov	r1, r5
 800b344:	9b01      	ldr	r3, [sp, #4]
 800b346:	445b      	add	r3, fp
 800b348:	3b01      	subs	r3, #1
 800b34a:	fb0a 1503 	mla	r5, sl, r3, r1
 800b34e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b350:	18ec      	adds	r4, r5, r3
 800b352:	42a5      	cmp	r5, r4
 800b354:	d009      	beq.n	800b36a <forward_lite_pad_edge+0xda>
 800b356:	f1ca 0600 	rsb	r6, sl, #0
 800b35a:	4621      	mov	r1, r4
 800b35c:	4434      	add	r4, r6
 800b35e:	4652      	mov	r2, sl
 800b360:	4628      	mov	r0, r5
 800b362:	f000 f8ab 	bl	800b4bc <st_int8_copy>
 800b366:	42a5      	cmp	r5, r4
 800b368:	d1f7      	bne.n	800b35a <forward_lite_pad_edge+0xca>
 800b36a:	b007      	add	sp, #28
 800b36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b370 <forward_lite_pad_reflect>:
 800b370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b374:	b08f      	sub	sp, #60	@ 0x3c
 800b376:	460d      	mov	r5, r1
 800b378:	2b00      	cmp	r3, #0
 800b37a:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 800b37c:	9002      	str	r0, [sp, #8]
 800b37e:	440f      	add	r7, r1
 800b380:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	@ 0x84
 800b384:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800b386:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b38a:	f8dd 9078 	ldr.w	r9, [sp, #120]	@ 0x78
 800b38e:	f9bd e07c 	ldrsh.w	lr, [sp, #124]	@ 0x7c
 800b392:	f9bd c080 	ldrsh.w	ip, [sp, #128]	@ 0x80
 800b396:	f8dd a08c 	ldr.w	sl, [sp, #140]	@ 0x8c
 800b39a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b39c:	9307      	str	r3, [sp, #28]
 800b39e:	e9dd 461c 	ldrd	r4, r6, [sp, #112]	@ 0x70
 800b3a2:	dd61      	ble.n	800b468 <forward_lite_pad_reflect+0xf8>
 800b3a4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b3a6:	4486      	add	lr, r0
 800b3a8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b3aa:	fb02 f20e 	mul.w	r2, r2, lr
 800b3ae:	440b      	add	r3, r1
 800b3b0:	fb04 f100 	mul.w	r1, r4, r0
 800b3b4:	9206      	str	r2, [sp, #24]
 800b3b6:	4453      	add	r3, sl
 800b3b8:	9109      	str	r1, [sp, #36]	@ 0x24
 800b3ba:	9902      	ldr	r1, [sp, #8]
 800b3bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3be:	eb07 030a 	add.w	r3, r7, sl
 800b3c2:	f1c9 0a00 	rsb	sl, r9, #0
 800b3c6:	950c      	str	r5, [sp, #48]	@ 0x30
 800b3c8:	9301      	str	r3, [sp, #4]
 800b3ca:	1e83      	subs	r3, r0, #2
 800b3cc:	961d      	str	r6, [sp, #116]	@ 0x74
 800b3ce:	fb04 1303 	mla	r3, r4, r3, r1
 800b3d2:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 800b3d6:	9304      	str	r3, [sp, #16]
 800b3d8:	fb08 230c 	mla	r3, r8, ip, r2
 800b3dc:	fb09 5303 	mla	r3, r9, r3, r5
 800b3e0:	9303      	str	r3, [sp, #12]
 800b3e2:	fb09 f308 	mul.w	r3, r9, r8
 800b3e6:	9308      	str	r3, [sp, #32]
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	9305      	str	r3, [sp, #20]
 800b3ec:	9b01      	ldr	r3, [sp, #4]
 800b3ee:	42bb      	cmp	r3, r7
 800b3f0:	d00a      	beq.n	800b408 <forward_lite_pad_reflect+0x98>
 800b3f2:	461d      	mov	r5, r3
 800b3f4:	9e02      	ldr	r6, [sp, #8]
 800b3f6:	4455      	add	r5, sl
 800b3f8:	4426      	add	r6, r4
 800b3fa:	4622      	mov	r2, r4
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	4630      	mov	r0, r6
 800b400:	f000 f85c 	bl	800b4bc <st_int8_copy>
 800b404:	42bd      	cmp	r5, r7
 800b406:	d1f6      	bne.n	800b3f6 <forward_lite_pad_reflect+0x86>
 800b408:	9b02      	ldr	r3, [sp, #8]
 800b40a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b40c:	4618      	mov	r0, r3
 800b40e:	9901      	ldr	r1, [sp, #4]
 800b410:	4413      	add	r3, r2
 800b412:	9302      	str	r3, [sp, #8]
 800b414:	f000 f852 	bl	800b4bc <st_int8_copy>
 800b418:	9b06      	ldr	r3, [sp, #24]
 800b41a:	4543      	cmp	r3, r8
 800b41c:	da0d      	bge.n	800b43a <forward_lite_pad_reflect+0xca>
 800b41e:	461d      	mov	r5, r3
 800b420:	e9dd b603 	ldrd	fp, r6, [sp, #12]
 800b424:	3501      	adds	r5, #1
 800b426:	4659      	mov	r1, fp
 800b428:	4630      	mov	r0, r6
 800b42a:	4622      	mov	r2, r4
 800b42c:	f000 f846 	bl	800b4bc <st_int8_copy>
 800b430:	45a8      	cmp	r8, r5
 800b432:	44cb      	add	fp, r9
 800b434:	eba6 0604 	sub.w	r6, r6, r4
 800b438:	d1f4      	bne.n	800b424 <forward_lite_pad_reflect+0xb4>
 800b43a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b43c:	9901      	ldr	r1, [sp, #4]
 800b43e:	4417      	add	r7, r2
 800b440:	9b05      	ldr	r3, [sp, #20]
 800b442:	4411      	add	r1, r2
 800b444:	9a04      	ldr	r2, [sp, #16]
 800b446:	3301      	adds	r3, #1
 800b448:	9101      	str	r1, [sp, #4]
 800b44a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b44c:	9305      	str	r3, [sp, #20]
 800b44e:	440a      	add	r2, r1
 800b450:	9908      	ldr	r1, [sp, #32]
 800b452:	9204      	str	r2, [sp, #16]
 800b454:	9a03      	ldr	r2, [sp, #12]
 800b456:	440a      	add	r2, r1
 800b458:	9203      	str	r2, [sp, #12]
 800b45a:	9a07      	ldr	r2, [sp, #28]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d1c5      	bne.n	800b3ec <forward_lite_pad_reflect+0x7c>
 800b460:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800b462:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 800b464:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800b468:	fb0c f406 	mul.w	r4, ip, r6
 800b46c:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800b470:	42a5      	cmp	r5, r4
 800b472:	d00b      	beq.n	800b48c <forward_lite_pad_reflect+0x11c>
 800b474:	f1c6 0800 	rsb	r8, r6, #0
 800b478:	462f      	mov	r7, r5
 800b47a:	4639      	mov	r1, r7
 800b47c:	4620      	mov	r0, r4
 800b47e:	4437      	add	r7, r6
 800b480:	4444      	add	r4, r8
 800b482:	4632      	mov	r2, r6
 800b484:	f000 f81a 	bl	800b4bc <st_int8_copy>
 800b488:	42a7      	cmp	r7, r4
 800b48a:	d1f6      	bne.n	800b47a <forward_lite_pad_reflect+0x10a>
 800b48c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b48e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b490:	3b01      	subs	r3, #1
 800b492:	fb06 f404 	mul.w	r4, r6, r4
 800b496:	fb06 5503 	mla	r5, r6, r3, r5
 800b49a:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 800b49e:	42a5      	cmp	r5, r4
 800b4a0:	d009      	beq.n	800b4b6 <forward_lite_pad_reflect+0x146>
 800b4a2:	4277      	negs	r7, r6
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	443d      	add	r5, r7
 800b4aa:	4434      	add	r4, r6
 800b4ac:	4632      	mov	r2, r6
 800b4ae:	f000 f805 	bl	800b4bc <st_int8_copy>
 800b4b2:	42a5      	cmp	r5, r4
 800b4b4:	d1f6      	bne.n	800b4a4 <forward_lite_pad_reflect+0x134>
 800b4b6:	b00f      	add	sp, #60	@ 0x3c
 800b4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4bc <st_int8_copy>:
 800b4bc:	4288      	cmp	r0, r1
 800b4be:	d00e      	beq.n	800b4de <st_int8_copy+0x22>
 800b4c0:	b16a      	cbz	r2, 800b4de <st_int8_copy+0x22>
 800b4c2:	4288      	cmp	r0, r1
 800b4c4:	eb00 0302 	add.w	r3, r0, r2
 800b4c8:	d20a      	bcs.n	800b4e0 <st_int8_copy+0x24>
 800b4ca:	4299      	cmp	r1, r3
 800b4cc:	d208      	bcs.n	800b4e0 <st_int8_copy+0x24>
 800b4ce:	440a      	add	r2, r1
 800b4d0:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800b4d4:	4298      	cmp	r0, r3
 800b4d6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800b4da:	d1f9      	bne.n	800b4d0 <st_int8_copy+0x14>
 800b4dc:	4770      	bx	lr
 800b4de:	4770      	bx	lr
 800b4e0:	2a03      	cmp	r2, #3
 800b4e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4e6:	d81b      	bhi.n	800b520 <st_int8_copy+0x64>
 800b4e8:	1e54      	subs	r4, r2, #1
 800b4ea:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b4ee:	f801 3b01 	strb.w	r3, [r1], #1
 800b4f2:	b19c      	cbz	r4, 800b51c <st_int8_copy+0x60>
 800b4f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b4f8:	f801 3b01 	strb.w	r3, [r1], #1
 800b4fc:	2a02      	cmp	r2, #2
 800b4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b502:	bf18      	it	ne
 800b504:	2200      	movne	r2, #0
 800b506:	2c01      	cmp	r4, #1
 800b508:	d008      	beq.n	800b51c <st_int8_copy+0x60>
 800b50a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b50e:	f801 3b01 	strb.w	r3, [r1], #1
 800b512:	b11a      	cbz	r2, 800b51c <st_int8_copy+0x60>
 800b514:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b518:	f801 3b01 	strb.w	r3, [r1], #1
 800b51c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b520:	f001 0e03 	and.w	lr, r1, #3
 800b524:	f000 0803 	and.w	r8, r0, #3
 800b528:	f1ce 0304 	rsb	r3, lr, #4
 800b52c:	eba2 0c03 	sub.w	ip, r2, r3
 800b530:	f1ce 0203 	rsb	r2, lr, #3
 800b534:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b538:	f801 3b01 	strb.w	r3, [r1], #1
 800b53c:	b182      	cbz	r2, 800b560 <st_int8_copy+0xa4>
 800b53e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b542:	f801 3b01 	strb.w	r3, [r1], #1
 800b546:	2a01      	cmp	r2, #1
 800b548:	d00a      	beq.n	800b560 <st_int8_copy+0xa4>
 800b54a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b54e:	f801 3b01 	strb.w	r3, [r1], #1
 800b552:	f1be 0f01 	cmp.w	lr, #1
 800b556:	d003      	beq.n	800b560 <st_int8_copy+0xa4>
 800b558:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b55c:	f801 3b01 	strb.w	r3, [r1], #1
 800b560:	45c6      	cmp	lr, r8
 800b562:	d02a      	beq.n	800b5ba <st_int8_copy+0xfe>
 800b564:	ea5f 121c 	movs.w	r2, ip, lsr #4
 800b568:	d00a      	beq.n	800b580 <st_int8_copy+0xc4>
 800b56a:	f850 3b04 	ldr.w	r3, [r0], #4
 800b56e:	f850 4b04 	ldr.w	r4, [r0], #4
 800b572:	f850 5b04 	ldr.w	r5, [r0], #4
 800b576:	f850 6b04 	ldr.w	r6, [r0], #4
 800b57a:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800b57c:	3a01      	subs	r2, #1
 800b57e:	d1f4      	bne.n	800b56a <st_int8_copy+0xae>
 800b580:	f01c 0f08 	tst.w	ip, #8
 800b584:	d004      	beq.n	800b590 <st_int8_copy+0xd4>
 800b586:	f850 3b04 	ldr.w	r3, [r0], #4
 800b58a:	f850 4b04 	ldr.w	r4, [r0], #4
 800b58e:	c118      	stmia	r1!, {r3, r4}
 800b590:	f01c 0f04 	tst.w	ip, #4
 800b594:	d003      	beq.n	800b59e <st_int8_copy+0xe2>
 800b596:	f850 3b04 	ldr.w	r3, [r0], #4
 800b59a:	f841 3b04 	str.w	r3, [r1], #4
 800b59e:	f01c 0f02 	tst.w	ip, #2
 800b5a2:	d003      	beq.n	800b5ac <st_int8_copy+0xf0>
 800b5a4:	f830 3b02 	ldrh.w	r3, [r0], #2
 800b5a8:	f821 3b02 	strh.w	r3, [r1], #2
 800b5ac:	f01c 0f01 	tst.w	ip, #1
 800b5b0:	d0b4      	beq.n	800b51c <st_int8_copy+0x60>
 800b5b2:	7803      	ldrb	r3, [r0, #0]
 800b5b4:	700b      	strb	r3, [r1, #0]
 800b5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5ba:	ea5f 199c 	movs.w	r9, ip, lsr #6
 800b5be:	d00e      	beq.n	800b5de <st_int8_copy+0x122>
 800b5c0:	4688      	mov	r8, r1
 800b5c2:	4686      	mov	lr, r0
 800b5c4:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b5c8:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b5cc:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b5d0:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b5d4:	f1b9 0901 	subs.w	r9, r9, #1
 800b5d8:	4641      	mov	r1, r8
 800b5da:	4670      	mov	r0, lr
 800b5dc:	d1f0      	bne.n	800b5c0 <st_int8_copy+0x104>
 800b5de:	f01c 0f20 	tst.w	ip, #32
 800b5e2:	d007      	beq.n	800b5f4 <st_int8_copy+0x138>
 800b5e4:	4688      	mov	r8, r1
 800b5e6:	4686      	mov	lr, r0
 800b5e8:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b5ec:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800b5f0:	4641      	mov	r1, r8
 800b5f2:	4670      	mov	r0, lr
 800b5f4:	f01c 0f10 	tst.w	ip, #16
 800b5f8:	d001      	beq.n	800b5fe <st_int8_copy+0x142>
 800b5fa:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 800b5fc:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800b5fe:	f01c 0f08 	tst.w	ip, #8
 800b602:	d0c5      	beq.n	800b590 <st_int8_copy+0xd4>
 800b604:	c818      	ldmia	r0!, {r3, r4}
 800b606:	c118      	stmia	r1!, {r3, r4}
 800b608:	e7c2      	b.n	800b590 <st_int8_copy+0xd4>
 800b60a:	bf00      	nop

0800b60c <st_int8_fill>:
 800b60c:	fa5f fc80 	uxtb.w	ip, r0
 800b610:	0203      	lsls	r3, r0, #8
 800b612:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 800b616:	b29b      	uxth	r3, r3
 800b618:	ea4c 0c03 	orr.w	ip, ip, r3
 800b61c:	0403      	lsls	r3, r0, #16
 800b61e:	b410      	push	{r4}
 800b620:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b624:	078c      	lsls	r4, r1, #30
 800b626:	ea4c 0c03 	orr.w	ip, ip, r3
 800b62a:	d006      	beq.n	800b63a <st_int8_fill+0x2e>
 800b62c:	b35a      	cbz	r2, 800b686 <st_int8_fill+0x7a>
 800b62e:	f801 0b01 	strb.w	r0, [r1], #1
 800b632:	078b      	lsls	r3, r1, #30
 800b634:	f102 32ff 	add.w	r2, r2, #4294967295
 800b638:	d1f8      	bne.n	800b62c <st_int8_fill+0x20>
 800b63a:	0913      	lsrs	r3, r2, #4
 800b63c:	f3c2 0481 	ubfx	r4, r2, #2, #2
 800b640:	f002 0203 	and.w	r2, r2, #3
 800b644:	b14b      	cbz	r3, 800b65a <st_int8_fill+0x4e>
 800b646:	f841 cb04 	str.w	ip, [r1], #4
 800b64a:	f841 cb04 	str.w	ip, [r1], #4
 800b64e:	f841 cb04 	str.w	ip, [r1], #4
 800b652:	f841 cb04 	str.w	ip, [r1], #4
 800b656:	3b01      	subs	r3, #1
 800b658:	d1f5      	bne.n	800b646 <st_int8_fill+0x3a>
 800b65a:	b14c      	cbz	r4, 800b670 <st_int8_fill+0x64>
 800b65c:	f841 cb04 	str.w	ip, [r1], #4
 800b660:	2c01      	cmp	r4, #1
 800b662:	d005      	beq.n	800b670 <st_int8_fill+0x64>
 800b664:	f841 cb04 	str.w	ip, [r1], #4
 800b668:	2c02      	cmp	r4, #2
 800b66a:	d001      	beq.n	800b670 <st_int8_fill+0x64>
 800b66c:	f841 cb04 	str.w	ip, [r1], #4
 800b670:	b14a      	cbz	r2, 800b686 <st_int8_fill+0x7a>
 800b672:	f801 0b01 	strb.w	r0, [r1], #1
 800b676:	2a01      	cmp	r2, #1
 800b678:	d005      	beq.n	800b686 <st_int8_fill+0x7a>
 800b67a:	f801 0b01 	strb.w	r0, [r1], #1
 800b67e:	2a02      	cmp	r2, #2
 800b680:	d001      	beq.n	800b686 <st_int8_fill+0x7a>
 800b682:	f801 0b01 	strb.w	r0, [r1], #1
 800b686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <ai_sum>:
 800b68c:	edd1 7a00 	vldr	s15, [r1]
 800b690:	ed92 7a00 	vldr	s14, [r2]
 800b694:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b698:	edc0 7a00 	vstr	s15, [r0]
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop

0800b6a0 <ai_array_to_buffer_fmt>:
 800b6a0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d055      	beq.n	800b754 <ai_array_to_buffer_fmt+0xb4>
 800b6a8:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800b6ac:	4a2c      	ldr	r2, [pc, #176]	@ (800b760 <ai_array_to_buffer_fmt+0xc0>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d010      	beq.n	800b6d4 <ai_array_to_buffer_fmt+0x34>
 800b6b2:	dc21      	bgt.n	800b6f8 <ai_array_to_buffer_fmt+0x58>
 800b6b4:	4a2b      	ldr	r2, [pc, #172]	@ (800b764 <ai_array_to_buffer_fmt+0xc4>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d00c      	beq.n	800b6d4 <ai_array_to_buffer_fmt+0x34>
 800b6ba:	dd0f      	ble.n	800b6dc <ai_array_to_buffer_fmt+0x3c>
 800b6bc:	4a2a      	ldr	r2, [pc, #168]	@ (800b768 <ai_array_to_buffer_fmt+0xc8>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d008      	beq.n	800b6d4 <ai_array_to_buffer_fmt+0x34>
 800b6c2:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d004      	beq.n	800b6d4 <ai_array_to_buffer_fmt+0x34>
 800b6ca:	4a28      	ldr	r2, [pc, #160]	@ (800b76c <ai_array_to_buffer_fmt+0xcc>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	bf0c      	ite	eq
 800b6d0:	4613      	moveq	r3, r2
 800b6d2:	2340      	movne	r3, #64	@ 0x40
 800b6d4:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800b6d8:	4318      	orrs	r0, r3
 800b6da:	4770      	bx	lr
 800b6dc:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d0f7      	beq.n	800b6d4 <ai_array_to_buffer_fmt+0x34>
 800b6e4:	dd2c      	ble.n	800b740 <ai_array_to_buffer_fmt+0xa0>
 800b6e6:	4a22      	ldr	r2, [pc, #136]	@ (800b770 <ai_array_to_buffer_fmt+0xd0>)
 800b6e8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	bf0c      	ite	eq
 800b6f0:	4613      	moveq	r3, r2
 800b6f2:	2340      	movne	r3, #64	@ 0x40
 800b6f4:	4318      	orrs	r0, r3
 800b6f6:	4770      	bx	lr
 800b6f8:	4a1e      	ldr	r2, [pc, #120]	@ (800b774 <ai_array_to_buffer_fmt+0xd4>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d0ea      	beq.n	800b6d4 <ai_array_to_buffer_fmt+0x34>
 800b6fe:	dd10      	ble.n	800b722 <ai_array_to_buffer_fmt+0x82>
 800b700:	4a1d      	ldr	r2, [pc, #116]	@ (800b778 <ai_array_to_buffer_fmt+0xd8>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d0e6      	beq.n	800b6d4 <ai_array_to_buffer_fmt+0x34>
 800b706:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d0e2      	beq.n	800b6d4 <ai_array_to_buffer_fmt+0x34>
 800b70e:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800b712:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800b716:	4293      	cmp	r3, r2
 800b718:	bf0c      	ite	eq
 800b71a:	4613      	moveq	r3, r2
 800b71c:	2340      	movne	r3, #64	@ 0x40
 800b71e:	4318      	orrs	r0, r3
 800b720:	4770      	bx	lr
 800b722:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800b726:	4293      	cmp	r3, r2
 800b728:	d0d4      	beq.n	800b6d4 <ai_array_to_buffer_fmt+0x34>
 800b72a:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800b72e:	4293      	cmp	r3, r2
 800b730:	d0d0      	beq.n	800b6d4 <ai_array_to_buffer_fmt+0x34>
 800b732:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800b736:	4293      	cmp	r3, r2
 800b738:	bf0c      	ite	eq
 800b73a:	4613      	moveq	r3, r2
 800b73c:	2340      	movne	r3, #64	@ 0x40
 800b73e:	e7c9      	b.n	800b6d4 <ai_array_to_buffer_fmt+0x34>
 800b740:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800b744:	4293      	cmp	r3, r2
 800b746:	d0c5      	beq.n	800b6d4 <ai_array_to_buffer_fmt+0x34>
 800b748:	3280      	adds	r2, #128	@ 0x80
 800b74a:	4293      	cmp	r3, r2
 800b74c:	bf0c      	ite	eq
 800b74e:	4613      	moveq	r3, r2
 800b750:	2340      	movne	r3, #64	@ 0x40
 800b752:	e7bf      	b.n	800b6d4 <ai_array_to_buffer_fmt+0x34>
 800b754:	4b09      	ldr	r3, [pc, #36]	@ (800b77c <ai_array_to_buffer_fmt+0xdc>)
 800b756:	4003      	ands	r3, r0
 800b758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b75c:	e7ba      	b.n	800b6d4 <ai_array_to_buffer_fmt+0x34>
 800b75e:	bf00      	nop
 800b760:	00821040 	.word	0x00821040
 800b764:	00040840 	.word	0x00040840
 800b768:	00041040 	.word	0x00041040
 800b76c:	0004084f 	.word	0x0004084f
 800b770:	00040447 	.word	0x00040447
 800b774:	00840447 	.word	0x00840447
 800b778:	0084084f 	.word	0x0084084f
 800b77c:	00803fff 	.word	0x00803fff

0800b780 <ai_array_get_byte_size>:
 800b780:	b1f1      	cbz	r1, 800b7c0 <ai_array_get_byte_size+0x40>
 800b782:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800b786:	f3c0 4c43 	ubfx	ip, r0, #17, #4
 800b78a:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800b78e:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800b792:	fb03 f101 	mul.w	r1, r3, r1
 800b796:	fa42 f20c 	asr.w	r2, r2, ip
 800b79a:	3107      	adds	r1, #7
 800b79c:	07d2      	lsls	r2, r2, #31
 800b79e:	f021 0107 	bic.w	r1, r1, #7
 800b7a2:	fa21 f100 	lsr.w	r1, r1, r0
 800b7a6:	d504      	bpl.n	800b7b2 <ai_array_get_byte_size+0x32>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	3107      	adds	r1, #7
 800b7ac:	4419      	add	r1, r3
 800b7ae:	08c8      	lsrs	r0, r1, #3
 800b7b0:	4770      	bx	lr
 800b7b2:	fa43 f000 	asr.w	r0, r3, r0
 800b7b6:	3107      	adds	r1, #7
 800b7b8:	4083      	lsls	r3, r0
 800b7ba:	4419      	add	r1, r3
 800b7bc:	08c8      	lsrs	r0, r1, #3
 800b7be:	4770      	bx	lr
 800b7c0:	4608      	mov	r0, r1
 800b7c2:	4770      	bx	lr

0800b7c4 <ai_array_get_data_byte_size>:
 800b7c4:	b161      	cbz	r1, 800b7e0 <ai_array_get_data_byte_size+0x1c>
 800b7c6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800b7ca:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800b7ce:	fb01 f003 	mul.w	r0, r1, r3
 800b7d2:	3007      	adds	r0, #7
 800b7d4:	f020 0007 	bic.w	r0, r0, #7
 800b7d8:	40d0      	lsrs	r0, r2
 800b7da:	3007      	adds	r0, #7
 800b7dc:	08c0      	lsrs	r0, r0, #3
 800b7de:	4770      	bx	lr
 800b7e0:	4608      	mov	r0, r1
 800b7e2:	4770      	bx	lr

0800b7e4 <ai_version_get>:
 800b7e4:	0212      	lsls	r2, r2, #8
 800b7e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b7ea:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800b7ee:	4770      	bx	lr

0800b7f0 <get_tensor_byte_size>:
 800b7f0:	b430      	push	{r4, r5}
 800b7f2:	6985      	ldr	r5, [r0, #24]
 800b7f4:	68c4      	ldr	r4, [r0, #12]
 800b7f6:	6941      	ldr	r1, [r0, #20]
 800b7f8:	4b06      	ldr	r3, [pc, #24]	@ (800b814 <get_tensor_byte_size+0x24>)
 800b7fa:	6828      	ldr	r0, [r5, #0]
 800b7fc:	4a06      	ldr	r2, [pc, #24]	@ (800b818 <get_tensor_byte_size+0x28>)
 800b7fe:	4003      	ands	r3, r0
 800b800:	68c9      	ldr	r1, [r1, #12]
 800b802:	68e0      	ldr	r0, [r4, #12]
 800b804:	4293      	cmp	r3, r2
 800b806:	fb01 f000 	mul.w	r0, r1, r0
 800b80a:	d101      	bne.n	800b810 <get_tensor_byte_size+0x20>
 800b80c:	3007      	adds	r0, #7
 800b80e:	08c0      	lsrs	r0, r0, #3
 800b810:	bc30      	pop	{r4, r5}
 800b812:	4770      	bx	lr
 800b814:	017fffff 	.word	0x017fffff
 800b818:	000400c0 	.word	0x000400c0

0800b81c <core_compute_offsets>:
 800b81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b820:	e9d1 4600 	ldrd	r4, r6, [r1]
 800b824:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800b828:	b083      	sub	sp, #12
 800b82a:	f5b4 6fa0 	cmp.w	r4, #1280	@ 0x500
 800b82e:	6871      	ldr	r1, [r6, #4]
 800b830:	f8dc 8004 	ldr.w	r8, [ip, #4]
 800b834:	d37b      	bcc.n	800b92e <core_compute_offsets+0x112>
 800b836:	6935      	ldr	r5, [r6, #16]
 800b838:	fb05 fe01 	mul.w	lr, r5, r1
 800b83c:	6812      	ldr	r2, [r2, #0]
 800b83e:	e9d6 4602 	ldrd	r4, r6, [r6, #8]
 800b842:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 800b846:	6802      	ldr	r2, [r0, #0]
 800b848:	9600      	str	r6, [sp, #0]
 800b84a:	bf2c      	ite	cs
 800b84c:	f8dc 9010 	ldrcs.w	r9, [ip, #16]
 800b850:	f04f 0901 	movcc.w	r9, #1
 800b854:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800b858:	e9dc 6702 	ldrd	r6, r7, [ip, #8]
 800b85c:	9701      	str	r7, [sp, #4]
 800b85e:	d363      	bcc.n	800b928 <core_compute_offsets+0x10c>
 800b860:	4541      	cmp	r1, r8
 800b862:	6847      	ldr	r7, [r0, #4]
 800b864:	bf0c      	ite	eq
 800b866:	461a      	moveq	r2, r3
 800b868:	2200      	movne	r2, #0
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	bf18      	it	ne
 800b86e:	2201      	movne	r2, #1
 800b870:	f8d0 a000 	ldr.w	sl, [r0]
 800b874:	bf08      	it	eq
 800b876:	2200      	moveq	r2, #0
 800b878:	ebb5 0c09 	subs.w	ip, r5, r9
 800b87c:	f3ca 2b17 	ubfx	fp, sl, #8, #24
 800b880:	bf18      	it	ne
 800b882:	f04f 0c01 	movne.w	ip, #1
 800b886:	f5ba 6fa0 	cmp.w	sl, #1280	@ 0x500
 800b88a:	d313      	bcc.n	800b8b4 <core_compute_offsets+0x98>
 800b88c:	454d      	cmp	r5, r9
 800b88e:	bf14      	ite	ne
 800b890:	f04f 0a00 	movne.w	sl, #0
 800b894:	f002 0a01 	andeq.w	sl, r2, #1
 800b898:	4541      	cmp	r1, r8
 800b89a:	bf14      	ite	ne
 800b89c:	2500      	movne	r5, #0
 800b89e:	f00c 0501 	andeq.w	r5, ip, #1
 800b8a2:	6847      	ldr	r7, [r0, #4]
 800b8a4:	fb01 a815 	mls	r8, r1, r5, sl
 800b8a8:	fb03 f508 	mul.w	r5, r3, r8
 800b8ac:	613d      	str	r5, [r7, #16]
 800b8ae:	6805      	ldr	r5, [r0, #0]
 800b8b0:	f3c5 2b17 	ubfx	fp, r5, #8, #24
 800b8b4:	ebb4 0806 	subs.w	r8, r4, r6
 800b8b8:	bf18      	it	ne
 800b8ba:	f04f 0801 	movne.w	r8, #1
 800b8be:	f1bb 0f02 	cmp.w	fp, #2
 800b8c2:	fb08 f50e 	mul.w	r5, r8, lr
 800b8c6:	d92f      	bls.n	800b928 <core_compute_offsets+0x10c>
 800b8c8:	42b4      	cmp	r4, r6
 800b8ca:	bf14      	ite	ne
 800b8cc:	f04f 0900 	movne.w	r9, #0
 800b8d0:	f002 0901 	andeq.w	r9, r2, #1
 800b8d4:	9f01      	ldr	r7, [sp, #4]
 800b8d6:	ea0c 0909 	and.w	r9, ip, r9
 800b8da:	eba9 0905 	sub.w	r9, r9, r5
 800b8de:	fb01 990c 	mla	r9, r1, ip, r9
 800b8e2:	9900      	ldr	r1, [sp, #0]
 800b8e4:	f1a1 0601 	sub.w	r6, r1, #1
 800b8e8:	fb03 f909 	mul.w	r9, r3, r9
 800b8ec:	fab6 f686 	clz	r6, r6
 800b8f0:	0976      	lsrs	r6, r6, #5
 800b8f2:	42b9      	cmp	r1, r7
 800b8f4:	bf18      	it	ne
 800b8f6:	f046 0601 	orrne.w	r6, r6, #1
 800b8fa:	6847      	ldr	r7, [r0, #4]
 800b8fc:	f8c7 9008 	str.w	r9, [r7, #8]
 800b900:	6801      	ldr	r1, [r0, #0]
 800b902:	f3c1 2117 	ubfx	r1, r1, #8, #24
 800b906:	b9ae      	cbnz	r6, 800b934 <core_compute_offsets+0x118>
 800b908:	f1b8 0f00 	cmp.w	r8, #0
 800b90c:	d012      	beq.n	800b934 <core_compute_offsets+0x118>
 800b90e:	ea02 020c 	and.w	r2, r2, ip
 800b912:	2903      	cmp	r1, #3
 800b914:	d908      	bls.n	800b928 <core_compute_offsets+0x10c>
 800b916:	fb0e f404 	mul.w	r4, lr, r4
 800b91a:	6841      	ldr	r1, [r0, #4]
 800b91c:	fb06 2214 	mls	r2, r6, r4, r2
 800b920:	442a      	add	r2, r5
 800b922:	fb03 f202 	mul.w	r2, r3, r2
 800b926:	60ca      	str	r2, [r1, #12]
 800b928:	b003      	add	sp, #12
 800b92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92e:	468e      	mov	lr, r1
 800b930:	2501      	movs	r5, #1
 800b932:	e783      	b.n	800b83c <core_compute_offsets+0x20>
 800b934:	2200      	movs	r2, #0
 800b936:	e7ec      	b.n	800b912 <core_compute_offsets+0xf6>

0800b938 <bnl_kernel_if32of32>:
 800b938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b93c:	9e07      	ldr	r6, [sp, #28]
 800b93e:	4688      	mov	r8, r1
 800b940:	4614      	mov	r4, r2
 800b942:	461d      	mov	r5, r3
 800b944:	b1f6      	cbz	r6, 800b984 <bnl_kernel_if32of32+0x4c>
 800b946:	b1db      	cbz	r3, 800b980 <bnl_kernel_if32of32+0x48>
 800b948:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b94c:	2100      	movs	r1, #0
 800b94e:	00a7      	lsls	r7, r4, #2
 800b950:	468c      	mov	ip, r1
 800b952:	4421      	add	r1, r4
 800b954:	4561      	cmp	r1, ip
 800b956:	d910      	bls.n	800b97a <bnl_kernel_if32of32+0x42>
 800b958:	1bd0      	subs	r0, r2, r7
 800b95a:	9b06      	ldr	r3, [sp, #24]
 800b95c:	46b6      	mov	lr, r6
 800b95e:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
 800b962:	ecf0 6a01 	vldmia	r0!, {s13}
 800b966:	ecb3 7a01 	vldmia	r3!, {s14}
 800b96a:	ecfe 7a01 	vldmia	lr!, {s15}
 800b96e:	4290      	cmp	r0, r2
 800b970:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b974:	ecec 7a01 	vstmia	ip!, {s15}
 800b978:	d1f3      	bne.n	800b962 <bnl_kernel_if32of32+0x2a>
 800b97a:	428d      	cmp	r5, r1
 800b97c:	443a      	add	r2, r7
 800b97e:	d8e7      	bhi.n	800b950 <bnl_kernel_if32of32+0x18>
 800b980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b984:	2b00      	cmp	r3, #0
 800b986:	d0fb      	beq.n	800b980 <bnl_kernel_if32of32+0x48>
 800b988:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800b98c:	460f      	mov	r7, r1
 800b98e:	4633      	mov	r3, r6
 800b990:	0092      	lsls	r2, r2, #2
 800b992:	4619      	mov	r1, r3
 800b994:	4423      	add	r3, r4
 800b996:	4299      	cmp	r1, r3
 800b998:	d20d      	bcs.n	800b9b6 <bnl_kernel_if32of32+0x7e>
 800b99a:	eba0 0c02 	sub.w	ip, r0, r2
 800b99e:	9906      	ldr	r1, [sp, #24]
 800b9a0:	46be      	mov	lr, r7
 800b9a2:	ecfc 7a01 	vldmia	ip!, {s15}
 800b9a6:	ecb1 7a01 	vldmia	r1!, {s14}
 800b9aa:	4584      	cmp	ip, r0
 800b9ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9b0:	ecee 7a01 	vstmia	lr!, {s15}
 800b9b4:	d1f5      	bne.n	800b9a2 <bnl_kernel_if32of32+0x6a>
 800b9b6:	429d      	cmp	r5, r3
 800b9b8:	4417      	add	r7, r2
 800b9ba:	4410      	add	r0, r2
 800b9bc:	d8e9      	bhi.n	800b992 <bnl_kernel_if32of32+0x5a>
 800b9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c2:	bf00      	nop

0800b9c4 <sbrk_aligned>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	4e0f      	ldr	r6, [pc, #60]	@ (800ba04 <sbrk_aligned+0x40>)
 800b9c8:	460c      	mov	r4, r1
 800b9ca:	6831      	ldr	r1, [r6, #0]
 800b9cc:	4605      	mov	r5, r0
 800b9ce:	b911      	cbnz	r1, 800b9d6 <sbrk_aligned+0x12>
 800b9d0:	f000 faec 	bl	800bfac <_sbrk_r>
 800b9d4:	6030      	str	r0, [r6, #0]
 800b9d6:	4621      	mov	r1, r4
 800b9d8:	4628      	mov	r0, r5
 800b9da:	f000 fae7 	bl	800bfac <_sbrk_r>
 800b9de:	1c43      	adds	r3, r0, #1
 800b9e0:	d103      	bne.n	800b9ea <sbrk_aligned+0x26>
 800b9e2:	f04f 34ff 	mov.w	r4, #4294967295
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ea:	1cc4      	adds	r4, r0, #3
 800b9ec:	f024 0403 	bic.w	r4, r4, #3
 800b9f0:	42a0      	cmp	r0, r4
 800b9f2:	d0f8      	beq.n	800b9e6 <sbrk_aligned+0x22>
 800b9f4:	1a21      	subs	r1, r4, r0
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f000 fad8 	bl	800bfac <_sbrk_r>
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	d1f2      	bne.n	800b9e6 <sbrk_aligned+0x22>
 800ba00:	e7ef      	b.n	800b9e2 <sbrk_aligned+0x1e>
 800ba02:	bf00      	nop
 800ba04:	24047074 	.word	0x24047074

0800ba08 <_malloc_r>:
 800ba08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba0c:	1ccd      	adds	r5, r1, #3
 800ba0e:	f025 0503 	bic.w	r5, r5, #3
 800ba12:	3508      	adds	r5, #8
 800ba14:	2d0c      	cmp	r5, #12
 800ba16:	bf38      	it	cc
 800ba18:	250c      	movcc	r5, #12
 800ba1a:	2d00      	cmp	r5, #0
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	db01      	blt.n	800ba24 <_malloc_r+0x1c>
 800ba20:	42a9      	cmp	r1, r5
 800ba22:	d904      	bls.n	800ba2e <_malloc_r+0x26>
 800ba24:	230c      	movs	r3, #12
 800ba26:	6033      	str	r3, [r6, #0]
 800ba28:	2000      	movs	r0, #0
 800ba2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb04 <_malloc_r+0xfc>
 800ba32:	f000 f869 	bl	800bb08 <__malloc_lock>
 800ba36:	f8d8 3000 	ldr.w	r3, [r8]
 800ba3a:	461c      	mov	r4, r3
 800ba3c:	bb44      	cbnz	r4, 800ba90 <_malloc_r+0x88>
 800ba3e:	4629      	mov	r1, r5
 800ba40:	4630      	mov	r0, r6
 800ba42:	f7ff ffbf 	bl	800b9c4 <sbrk_aligned>
 800ba46:	1c43      	adds	r3, r0, #1
 800ba48:	4604      	mov	r4, r0
 800ba4a:	d158      	bne.n	800bafe <_malloc_r+0xf6>
 800ba4c:	f8d8 4000 	ldr.w	r4, [r8]
 800ba50:	4627      	mov	r7, r4
 800ba52:	2f00      	cmp	r7, #0
 800ba54:	d143      	bne.n	800bade <_malloc_r+0xd6>
 800ba56:	2c00      	cmp	r4, #0
 800ba58:	d04b      	beq.n	800baf2 <_malloc_r+0xea>
 800ba5a:	6823      	ldr	r3, [r4, #0]
 800ba5c:	4639      	mov	r1, r7
 800ba5e:	4630      	mov	r0, r6
 800ba60:	eb04 0903 	add.w	r9, r4, r3
 800ba64:	f000 faa2 	bl	800bfac <_sbrk_r>
 800ba68:	4581      	cmp	r9, r0
 800ba6a:	d142      	bne.n	800baf2 <_malloc_r+0xea>
 800ba6c:	6821      	ldr	r1, [r4, #0]
 800ba6e:	1a6d      	subs	r5, r5, r1
 800ba70:	4629      	mov	r1, r5
 800ba72:	4630      	mov	r0, r6
 800ba74:	f7ff ffa6 	bl	800b9c4 <sbrk_aligned>
 800ba78:	3001      	adds	r0, #1
 800ba7a:	d03a      	beq.n	800baf2 <_malloc_r+0xea>
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	442b      	add	r3, r5
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	f8d8 3000 	ldr.w	r3, [r8]
 800ba86:	685a      	ldr	r2, [r3, #4]
 800ba88:	bb62      	cbnz	r2, 800bae4 <_malloc_r+0xdc>
 800ba8a:	f8c8 7000 	str.w	r7, [r8]
 800ba8e:	e00f      	b.n	800bab0 <_malloc_r+0xa8>
 800ba90:	6822      	ldr	r2, [r4, #0]
 800ba92:	1b52      	subs	r2, r2, r5
 800ba94:	d420      	bmi.n	800bad8 <_malloc_r+0xd0>
 800ba96:	2a0b      	cmp	r2, #11
 800ba98:	d917      	bls.n	800baca <_malloc_r+0xc2>
 800ba9a:	1961      	adds	r1, r4, r5
 800ba9c:	42a3      	cmp	r3, r4
 800ba9e:	6025      	str	r5, [r4, #0]
 800baa0:	bf18      	it	ne
 800baa2:	6059      	strne	r1, [r3, #4]
 800baa4:	6863      	ldr	r3, [r4, #4]
 800baa6:	bf08      	it	eq
 800baa8:	f8c8 1000 	streq.w	r1, [r8]
 800baac:	5162      	str	r2, [r4, r5]
 800baae:	604b      	str	r3, [r1, #4]
 800bab0:	4630      	mov	r0, r6
 800bab2:	f000 f82f 	bl	800bb14 <__malloc_unlock>
 800bab6:	f104 000b 	add.w	r0, r4, #11
 800baba:	1d23      	adds	r3, r4, #4
 800babc:	f020 0007 	bic.w	r0, r0, #7
 800bac0:	1ac2      	subs	r2, r0, r3
 800bac2:	bf1c      	itt	ne
 800bac4:	1a1b      	subne	r3, r3, r0
 800bac6:	50a3      	strne	r3, [r4, r2]
 800bac8:	e7af      	b.n	800ba2a <_malloc_r+0x22>
 800baca:	6862      	ldr	r2, [r4, #4]
 800bacc:	42a3      	cmp	r3, r4
 800bace:	bf0c      	ite	eq
 800bad0:	f8c8 2000 	streq.w	r2, [r8]
 800bad4:	605a      	strne	r2, [r3, #4]
 800bad6:	e7eb      	b.n	800bab0 <_malloc_r+0xa8>
 800bad8:	4623      	mov	r3, r4
 800bada:	6864      	ldr	r4, [r4, #4]
 800badc:	e7ae      	b.n	800ba3c <_malloc_r+0x34>
 800bade:	463c      	mov	r4, r7
 800bae0:	687f      	ldr	r7, [r7, #4]
 800bae2:	e7b6      	b.n	800ba52 <_malloc_r+0x4a>
 800bae4:	461a      	mov	r2, r3
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	42a3      	cmp	r3, r4
 800baea:	d1fb      	bne.n	800bae4 <_malloc_r+0xdc>
 800baec:	2300      	movs	r3, #0
 800baee:	6053      	str	r3, [r2, #4]
 800baf0:	e7de      	b.n	800bab0 <_malloc_r+0xa8>
 800baf2:	230c      	movs	r3, #12
 800baf4:	6033      	str	r3, [r6, #0]
 800baf6:	4630      	mov	r0, r6
 800baf8:	f000 f80c 	bl	800bb14 <__malloc_unlock>
 800bafc:	e794      	b.n	800ba28 <_malloc_r+0x20>
 800bafe:	6005      	str	r5, [r0, #0]
 800bb00:	e7d6      	b.n	800bab0 <_malloc_r+0xa8>
 800bb02:	bf00      	nop
 800bb04:	24047078 	.word	0x24047078

0800bb08 <__malloc_lock>:
 800bb08:	4801      	ldr	r0, [pc, #4]	@ (800bb10 <__malloc_lock+0x8>)
 800bb0a:	f000 ba9c 	b.w	800c046 <__retarget_lock_acquire_recursive>
 800bb0e:	bf00      	nop
 800bb10:	240471bc 	.word	0x240471bc

0800bb14 <__malloc_unlock>:
 800bb14:	4801      	ldr	r0, [pc, #4]	@ (800bb1c <__malloc_unlock+0x8>)
 800bb16:	f000 ba97 	b.w	800c048 <__retarget_lock_release_recursive>
 800bb1a:	bf00      	nop
 800bb1c:	240471bc 	.word	0x240471bc

0800bb20 <std>:
 800bb20:	2300      	movs	r3, #0
 800bb22:	b510      	push	{r4, lr}
 800bb24:	4604      	mov	r4, r0
 800bb26:	e9c0 3300 	strd	r3, r3, [r0]
 800bb2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb2e:	6083      	str	r3, [r0, #8]
 800bb30:	8181      	strh	r1, [r0, #12]
 800bb32:	6643      	str	r3, [r0, #100]	@ 0x64
 800bb34:	81c2      	strh	r2, [r0, #14]
 800bb36:	6183      	str	r3, [r0, #24]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	2208      	movs	r2, #8
 800bb3c:	305c      	adds	r0, #92	@ 0x5c
 800bb3e:	f000 f9f9 	bl	800bf34 <memset>
 800bb42:	4b0d      	ldr	r3, [pc, #52]	@ (800bb78 <std+0x58>)
 800bb44:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb46:	4b0d      	ldr	r3, [pc, #52]	@ (800bb7c <std+0x5c>)
 800bb48:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb4a:	4b0d      	ldr	r3, [pc, #52]	@ (800bb80 <std+0x60>)
 800bb4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb4e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb84 <std+0x64>)
 800bb50:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb52:	4b0d      	ldr	r3, [pc, #52]	@ (800bb88 <std+0x68>)
 800bb54:	6224      	str	r4, [r4, #32]
 800bb56:	429c      	cmp	r4, r3
 800bb58:	d006      	beq.n	800bb68 <std+0x48>
 800bb5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb5e:	4294      	cmp	r4, r2
 800bb60:	d002      	beq.n	800bb68 <std+0x48>
 800bb62:	33d0      	adds	r3, #208	@ 0xd0
 800bb64:	429c      	cmp	r4, r3
 800bb66:	d105      	bne.n	800bb74 <std+0x54>
 800bb68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bb6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb70:	f000 ba68 	b.w	800c044 <__retarget_lock_init_recursive>
 800bb74:	bd10      	pop	{r4, pc}
 800bb76:	bf00      	nop
 800bb78:	0800bd85 	.word	0x0800bd85
 800bb7c:	0800bda7 	.word	0x0800bda7
 800bb80:	0800bddf 	.word	0x0800bddf
 800bb84:	0800be03 	.word	0x0800be03
 800bb88:	2404707c 	.word	0x2404707c

0800bb8c <stdio_exit_handler>:
 800bb8c:	4a02      	ldr	r2, [pc, #8]	@ (800bb98 <stdio_exit_handler+0xc>)
 800bb8e:	4903      	ldr	r1, [pc, #12]	@ (800bb9c <stdio_exit_handler+0x10>)
 800bb90:	4803      	ldr	r0, [pc, #12]	@ (800bba0 <stdio_exit_handler+0x14>)
 800bb92:	f000 b869 	b.w	800bc68 <_fwalk_sglue>
 800bb96:	bf00      	nop
 800bb98:	24001368 	.word	0x24001368
 800bb9c:	0800c785 	.word	0x0800c785
 800bba0:	24001378 	.word	0x24001378

0800bba4 <cleanup_stdio>:
 800bba4:	6841      	ldr	r1, [r0, #4]
 800bba6:	4b0c      	ldr	r3, [pc, #48]	@ (800bbd8 <cleanup_stdio+0x34>)
 800bba8:	4299      	cmp	r1, r3
 800bbaa:	b510      	push	{r4, lr}
 800bbac:	4604      	mov	r4, r0
 800bbae:	d001      	beq.n	800bbb4 <cleanup_stdio+0x10>
 800bbb0:	f000 fde8 	bl	800c784 <_fflush_r>
 800bbb4:	68a1      	ldr	r1, [r4, #8]
 800bbb6:	4b09      	ldr	r3, [pc, #36]	@ (800bbdc <cleanup_stdio+0x38>)
 800bbb8:	4299      	cmp	r1, r3
 800bbba:	d002      	beq.n	800bbc2 <cleanup_stdio+0x1e>
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f000 fde1 	bl	800c784 <_fflush_r>
 800bbc2:	68e1      	ldr	r1, [r4, #12]
 800bbc4:	4b06      	ldr	r3, [pc, #24]	@ (800bbe0 <cleanup_stdio+0x3c>)
 800bbc6:	4299      	cmp	r1, r3
 800bbc8:	d004      	beq.n	800bbd4 <cleanup_stdio+0x30>
 800bbca:	4620      	mov	r0, r4
 800bbcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbd0:	f000 bdd8 	b.w	800c784 <_fflush_r>
 800bbd4:	bd10      	pop	{r4, pc}
 800bbd6:	bf00      	nop
 800bbd8:	2404707c 	.word	0x2404707c
 800bbdc:	240470e4 	.word	0x240470e4
 800bbe0:	2404714c 	.word	0x2404714c

0800bbe4 <global_stdio_init.part.0>:
 800bbe4:	b510      	push	{r4, lr}
 800bbe6:	4b0b      	ldr	r3, [pc, #44]	@ (800bc14 <global_stdio_init.part.0+0x30>)
 800bbe8:	4c0b      	ldr	r4, [pc, #44]	@ (800bc18 <global_stdio_init.part.0+0x34>)
 800bbea:	4a0c      	ldr	r2, [pc, #48]	@ (800bc1c <global_stdio_init.part.0+0x38>)
 800bbec:	601a      	str	r2, [r3, #0]
 800bbee:	4620      	mov	r0, r4
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	2104      	movs	r1, #4
 800bbf4:	f7ff ff94 	bl	800bb20 <std>
 800bbf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	2109      	movs	r1, #9
 800bc00:	f7ff ff8e 	bl	800bb20 <std>
 800bc04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bc08:	2202      	movs	r2, #2
 800bc0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc0e:	2112      	movs	r1, #18
 800bc10:	f7ff bf86 	b.w	800bb20 <std>
 800bc14:	240471b4 	.word	0x240471b4
 800bc18:	2404707c 	.word	0x2404707c
 800bc1c:	0800bb8d 	.word	0x0800bb8d

0800bc20 <__sfp_lock_acquire>:
 800bc20:	4801      	ldr	r0, [pc, #4]	@ (800bc28 <__sfp_lock_acquire+0x8>)
 800bc22:	f000 ba10 	b.w	800c046 <__retarget_lock_acquire_recursive>
 800bc26:	bf00      	nop
 800bc28:	240471bd 	.word	0x240471bd

0800bc2c <__sfp_lock_release>:
 800bc2c:	4801      	ldr	r0, [pc, #4]	@ (800bc34 <__sfp_lock_release+0x8>)
 800bc2e:	f000 ba0b 	b.w	800c048 <__retarget_lock_release_recursive>
 800bc32:	bf00      	nop
 800bc34:	240471bd 	.word	0x240471bd

0800bc38 <__sinit>:
 800bc38:	b510      	push	{r4, lr}
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	f7ff fff0 	bl	800bc20 <__sfp_lock_acquire>
 800bc40:	6a23      	ldr	r3, [r4, #32]
 800bc42:	b11b      	cbz	r3, 800bc4c <__sinit+0x14>
 800bc44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc48:	f7ff bff0 	b.w	800bc2c <__sfp_lock_release>
 800bc4c:	4b04      	ldr	r3, [pc, #16]	@ (800bc60 <__sinit+0x28>)
 800bc4e:	6223      	str	r3, [r4, #32]
 800bc50:	4b04      	ldr	r3, [pc, #16]	@ (800bc64 <__sinit+0x2c>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1f5      	bne.n	800bc44 <__sinit+0xc>
 800bc58:	f7ff ffc4 	bl	800bbe4 <global_stdio_init.part.0>
 800bc5c:	e7f2      	b.n	800bc44 <__sinit+0xc>
 800bc5e:	bf00      	nop
 800bc60:	0800bba5 	.word	0x0800bba5
 800bc64:	240471b4 	.word	0x240471b4

0800bc68 <_fwalk_sglue>:
 800bc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc6c:	4607      	mov	r7, r0
 800bc6e:	4688      	mov	r8, r1
 800bc70:	4614      	mov	r4, r2
 800bc72:	2600      	movs	r6, #0
 800bc74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc78:	f1b9 0901 	subs.w	r9, r9, #1
 800bc7c:	d505      	bpl.n	800bc8a <_fwalk_sglue+0x22>
 800bc7e:	6824      	ldr	r4, [r4, #0]
 800bc80:	2c00      	cmp	r4, #0
 800bc82:	d1f7      	bne.n	800bc74 <_fwalk_sglue+0xc>
 800bc84:	4630      	mov	r0, r6
 800bc86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc8a:	89ab      	ldrh	r3, [r5, #12]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d907      	bls.n	800bca0 <_fwalk_sglue+0x38>
 800bc90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc94:	3301      	adds	r3, #1
 800bc96:	d003      	beq.n	800bca0 <_fwalk_sglue+0x38>
 800bc98:	4629      	mov	r1, r5
 800bc9a:	4638      	mov	r0, r7
 800bc9c:	47c0      	blx	r8
 800bc9e:	4306      	orrs	r6, r0
 800bca0:	3568      	adds	r5, #104	@ 0x68
 800bca2:	e7e9      	b.n	800bc78 <_fwalk_sglue+0x10>

0800bca4 <iprintf>:
 800bca4:	b40f      	push	{r0, r1, r2, r3}
 800bca6:	b507      	push	{r0, r1, r2, lr}
 800bca8:	4906      	ldr	r1, [pc, #24]	@ (800bcc4 <iprintf+0x20>)
 800bcaa:	ab04      	add	r3, sp, #16
 800bcac:	6808      	ldr	r0, [r1, #0]
 800bcae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcb2:	6881      	ldr	r1, [r0, #8]
 800bcb4:	9301      	str	r3, [sp, #4]
 800bcb6:	f000 fa3d 	bl	800c134 <_vfiprintf_r>
 800bcba:	b003      	add	sp, #12
 800bcbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcc0:	b004      	add	sp, #16
 800bcc2:	4770      	bx	lr
 800bcc4:	24001374 	.word	0x24001374

0800bcc8 <_puts_r>:
 800bcc8:	6a03      	ldr	r3, [r0, #32]
 800bcca:	b570      	push	{r4, r5, r6, lr}
 800bccc:	6884      	ldr	r4, [r0, #8]
 800bcce:	4605      	mov	r5, r0
 800bcd0:	460e      	mov	r6, r1
 800bcd2:	b90b      	cbnz	r3, 800bcd8 <_puts_r+0x10>
 800bcd4:	f7ff ffb0 	bl	800bc38 <__sinit>
 800bcd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bcda:	07db      	lsls	r3, r3, #31
 800bcdc:	d405      	bmi.n	800bcea <_puts_r+0x22>
 800bcde:	89a3      	ldrh	r3, [r4, #12]
 800bce0:	0598      	lsls	r0, r3, #22
 800bce2:	d402      	bmi.n	800bcea <_puts_r+0x22>
 800bce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bce6:	f000 f9ae 	bl	800c046 <__retarget_lock_acquire_recursive>
 800bcea:	89a3      	ldrh	r3, [r4, #12]
 800bcec:	0719      	lsls	r1, r3, #28
 800bcee:	d502      	bpl.n	800bcf6 <_puts_r+0x2e>
 800bcf0:	6923      	ldr	r3, [r4, #16]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d135      	bne.n	800bd62 <_puts_r+0x9a>
 800bcf6:	4621      	mov	r1, r4
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	f000 f8c5 	bl	800be88 <__swsetup_r>
 800bcfe:	b380      	cbz	r0, 800bd62 <_puts_r+0x9a>
 800bd00:	f04f 35ff 	mov.w	r5, #4294967295
 800bd04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd06:	07da      	lsls	r2, r3, #31
 800bd08:	d405      	bmi.n	800bd16 <_puts_r+0x4e>
 800bd0a:	89a3      	ldrh	r3, [r4, #12]
 800bd0c:	059b      	lsls	r3, r3, #22
 800bd0e:	d402      	bmi.n	800bd16 <_puts_r+0x4e>
 800bd10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd12:	f000 f999 	bl	800c048 <__retarget_lock_release_recursive>
 800bd16:	4628      	mov	r0, r5
 800bd18:	bd70      	pop	{r4, r5, r6, pc}
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	da04      	bge.n	800bd28 <_puts_r+0x60>
 800bd1e:	69a2      	ldr	r2, [r4, #24]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	dc17      	bgt.n	800bd54 <_puts_r+0x8c>
 800bd24:	290a      	cmp	r1, #10
 800bd26:	d015      	beq.n	800bd54 <_puts_r+0x8c>
 800bd28:	6823      	ldr	r3, [r4, #0]
 800bd2a:	1c5a      	adds	r2, r3, #1
 800bd2c:	6022      	str	r2, [r4, #0]
 800bd2e:	7019      	strb	r1, [r3, #0]
 800bd30:	68a3      	ldr	r3, [r4, #8]
 800bd32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd36:	3b01      	subs	r3, #1
 800bd38:	60a3      	str	r3, [r4, #8]
 800bd3a:	2900      	cmp	r1, #0
 800bd3c:	d1ed      	bne.n	800bd1a <_puts_r+0x52>
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	da11      	bge.n	800bd66 <_puts_r+0x9e>
 800bd42:	4622      	mov	r2, r4
 800bd44:	210a      	movs	r1, #10
 800bd46:	4628      	mov	r0, r5
 800bd48:	f000 f85f 	bl	800be0a <__swbuf_r>
 800bd4c:	3001      	adds	r0, #1
 800bd4e:	d0d7      	beq.n	800bd00 <_puts_r+0x38>
 800bd50:	250a      	movs	r5, #10
 800bd52:	e7d7      	b.n	800bd04 <_puts_r+0x3c>
 800bd54:	4622      	mov	r2, r4
 800bd56:	4628      	mov	r0, r5
 800bd58:	f000 f857 	bl	800be0a <__swbuf_r>
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d1e7      	bne.n	800bd30 <_puts_r+0x68>
 800bd60:	e7ce      	b.n	800bd00 <_puts_r+0x38>
 800bd62:	3e01      	subs	r6, #1
 800bd64:	e7e4      	b.n	800bd30 <_puts_r+0x68>
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	1c5a      	adds	r2, r3, #1
 800bd6a:	6022      	str	r2, [r4, #0]
 800bd6c:	220a      	movs	r2, #10
 800bd6e:	701a      	strb	r2, [r3, #0]
 800bd70:	e7ee      	b.n	800bd50 <_puts_r+0x88>
	...

0800bd74 <puts>:
 800bd74:	4b02      	ldr	r3, [pc, #8]	@ (800bd80 <puts+0xc>)
 800bd76:	4601      	mov	r1, r0
 800bd78:	6818      	ldr	r0, [r3, #0]
 800bd7a:	f7ff bfa5 	b.w	800bcc8 <_puts_r>
 800bd7e:	bf00      	nop
 800bd80:	24001374 	.word	0x24001374

0800bd84 <__sread>:
 800bd84:	b510      	push	{r4, lr}
 800bd86:	460c      	mov	r4, r1
 800bd88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd8c:	f000 f8fc 	bl	800bf88 <_read_r>
 800bd90:	2800      	cmp	r0, #0
 800bd92:	bfab      	itete	ge
 800bd94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bd96:	89a3      	ldrhlt	r3, [r4, #12]
 800bd98:	181b      	addge	r3, r3, r0
 800bd9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bd9e:	bfac      	ite	ge
 800bda0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bda2:	81a3      	strhlt	r3, [r4, #12]
 800bda4:	bd10      	pop	{r4, pc}

0800bda6 <__swrite>:
 800bda6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdaa:	461f      	mov	r7, r3
 800bdac:	898b      	ldrh	r3, [r1, #12]
 800bdae:	05db      	lsls	r3, r3, #23
 800bdb0:	4605      	mov	r5, r0
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	4616      	mov	r6, r2
 800bdb6:	d505      	bpl.n	800bdc4 <__swrite+0x1e>
 800bdb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdbc:	2302      	movs	r3, #2
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f000 f8d0 	bl	800bf64 <_lseek_r>
 800bdc4:	89a3      	ldrh	r3, [r4, #12]
 800bdc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bdce:	81a3      	strh	r3, [r4, #12]
 800bdd0:	4632      	mov	r2, r6
 800bdd2:	463b      	mov	r3, r7
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdda:	f000 b8f7 	b.w	800bfcc <_write_r>

0800bdde <__sseek>:
 800bdde:	b510      	push	{r4, lr}
 800bde0:	460c      	mov	r4, r1
 800bde2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde6:	f000 f8bd 	bl	800bf64 <_lseek_r>
 800bdea:	1c43      	adds	r3, r0, #1
 800bdec:	89a3      	ldrh	r3, [r4, #12]
 800bdee:	bf15      	itete	ne
 800bdf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bdf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bdf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bdfa:	81a3      	strheq	r3, [r4, #12]
 800bdfc:	bf18      	it	ne
 800bdfe:	81a3      	strhne	r3, [r4, #12]
 800be00:	bd10      	pop	{r4, pc}

0800be02 <__sclose>:
 800be02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be06:	f000 b89d 	b.w	800bf44 <_close_r>

0800be0a <__swbuf_r>:
 800be0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0c:	460e      	mov	r6, r1
 800be0e:	4614      	mov	r4, r2
 800be10:	4605      	mov	r5, r0
 800be12:	b118      	cbz	r0, 800be1c <__swbuf_r+0x12>
 800be14:	6a03      	ldr	r3, [r0, #32]
 800be16:	b90b      	cbnz	r3, 800be1c <__swbuf_r+0x12>
 800be18:	f7ff ff0e 	bl	800bc38 <__sinit>
 800be1c:	69a3      	ldr	r3, [r4, #24]
 800be1e:	60a3      	str	r3, [r4, #8]
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	071a      	lsls	r2, r3, #28
 800be24:	d501      	bpl.n	800be2a <__swbuf_r+0x20>
 800be26:	6923      	ldr	r3, [r4, #16]
 800be28:	b943      	cbnz	r3, 800be3c <__swbuf_r+0x32>
 800be2a:	4621      	mov	r1, r4
 800be2c:	4628      	mov	r0, r5
 800be2e:	f000 f82b 	bl	800be88 <__swsetup_r>
 800be32:	b118      	cbz	r0, 800be3c <__swbuf_r+0x32>
 800be34:	f04f 37ff 	mov.w	r7, #4294967295
 800be38:	4638      	mov	r0, r7
 800be3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be3c:	6823      	ldr	r3, [r4, #0]
 800be3e:	6922      	ldr	r2, [r4, #16]
 800be40:	1a98      	subs	r0, r3, r2
 800be42:	6963      	ldr	r3, [r4, #20]
 800be44:	b2f6      	uxtb	r6, r6
 800be46:	4283      	cmp	r3, r0
 800be48:	4637      	mov	r7, r6
 800be4a:	dc05      	bgt.n	800be58 <__swbuf_r+0x4e>
 800be4c:	4621      	mov	r1, r4
 800be4e:	4628      	mov	r0, r5
 800be50:	f000 fc98 	bl	800c784 <_fflush_r>
 800be54:	2800      	cmp	r0, #0
 800be56:	d1ed      	bne.n	800be34 <__swbuf_r+0x2a>
 800be58:	68a3      	ldr	r3, [r4, #8]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	60a3      	str	r3, [r4, #8]
 800be5e:	6823      	ldr	r3, [r4, #0]
 800be60:	1c5a      	adds	r2, r3, #1
 800be62:	6022      	str	r2, [r4, #0]
 800be64:	701e      	strb	r6, [r3, #0]
 800be66:	6962      	ldr	r2, [r4, #20]
 800be68:	1c43      	adds	r3, r0, #1
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d004      	beq.n	800be78 <__swbuf_r+0x6e>
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	07db      	lsls	r3, r3, #31
 800be72:	d5e1      	bpl.n	800be38 <__swbuf_r+0x2e>
 800be74:	2e0a      	cmp	r6, #10
 800be76:	d1df      	bne.n	800be38 <__swbuf_r+0x2e>
 800be78:	4621      	mov	r1, r4
 800be7a:	4628      	mov	r0, r5
 800be7c:	f000 fc82 	bl	800c784 <_fflush_r>
 800be80:	2800      	cmp	r0, #0
 800be82:	d0d9      	beq.n	800be38 <__swbuf_r+0x2e>
 800be84:	e7d6      	b.n	800be34 <__swbuf_r+0x2a>
	...

0800be88 <__swsetup_r>:
 800be88:	b538      	push	{r3, r4, r5, lr}
 800be8a:	4b29      	ldr	r3, [pc, #164]	@ (800bf30 <__swsetup_r+0xa8>)
 800be8c:	4605      	mov	r5, r0
 800be8e:	6818      	ldr	r0, [r3, #0]
 800be90:	460c      	mov	r4, r1
 800be92:	b118      	cbz	r0, 800be9c <__swsetup_r+0x14>
 800be94:	6a03      	ldr	r3, [r0, #32]
 800be96:	b90b      	cbnz	r3, 800be9c <__swsetup_r+0x14>
 800be98:	f7ff fece 	bl	800bc38 <__sinit>
 800be9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bea0:	0719      	lsls	r1, r3, #28
 800bea2:	d422      	bmi.n	800beea <__swsetup_r+0x62>
 800bea4:	06da      	lsls	r2, r3, #27
 800bea6:	d407      	bmi.n	800beb8 <__swsetup_r+0x30>
 800bea8:	2209      	movs	r2, #9
 800beaa:	602a      	str	r2, [r5, #0]
 800beac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beb0:	81a3      	strh	r3, [r4, #12]
 800beb2:	f04f 30ff 	mov.w	r0, #4294967295
 800beb6:	e033      	b.n	800bf20 <__swsetup_r+0x98>
 800beb8:	0758      	lsls	r0, r3, #29
 800beba:	d512      	bpl.n	800bee2 <__swsetup_r+0x5a>
 800bebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bebe:	b141      	cbz	r1, 800bed2 <__swsetup_r+0x4a>
 800bec0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bec4:	4299      	cmp	r1, r3
 800bec6:	d002      	beq.n	800bece <__swsetup_r+0x46>
 800bec8:	4628      	mov	r0, r5
 800beca:	f000 f8bf 	bl	800c04c <_free_r>
 800bece:	2300      	movs	r3, #0
 800bed0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bed2:	89a3      	ldrh	r3, [r4, #12]
 800bed4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bed8:	81a3      	strh	r3, [r4, #12]
 800beda:	2300      	movs	r3, #0
 800bedc:	6063      	str	r3, [r4, #4]
 800bede:	6923      	ldr	r3, [r4, #16]
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	89a3      	ldrh	r3, [r4, #12]
 800bee4:	f043 0308 	orr.w	r3, r3, #8
 800bee8:	81a3      	strh	r3, [r4, #12]
 800beea:	6923      	ldr	r3, [r4, #16]
 800beec:	b94b      	cbnz	r3, 800bf02 <__swsetup_r+0x7a>
 800beee:	89a3      	ldrh	r3, [r4, #12]
 800bef0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bef8:	d003      	beq.n	800bf02 <__swsetup_r+0x7a>
 800befa:	4621      	mov	r1, r4
 800befc:	4628      	mov	r0, r5
 800befe:	f000 fc8f 	bl	800c820 <__smakebuf_r>
 800bf02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf06:	f013 0201 	ands.w	r2, r3, #1
 800bf0a:	d00a      	beq.n	800bf22 <__swsetup_r+0x9a>
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	60a2      	str	r2, [r4, #8]
 800bf10:	6962      	ldr	r2, [r4, #20]
 800bf12:	4252      	negs	r2, r2
 800bf14:	61a2      	str	r2, [r4, #24]
 800bf16:	6922      	ldr	r2, [r4, #16]
 800bf18:	b942      	cbnz	r2, 800bf2c <__swsetup_r+0xa4>
 800bf1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bf1e:	d1c5      	bne.n	800beac <__swsetup_r+0x24>
 800bf20:	bd38      	pop	{r3, r4, r5, pc}
 800bf22:	0799      	lsls	r1, r3, #30
 800bf24:	bf58      	it	pl
 800bf26:	6962      	ldrpl	r2, [r4, #20]
 800bf28:	60a2      	str	r2, [r4, #8]
 800bf2a:	e7f4      	b.n	800bf16 <__swsetup_r+0x8e>
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	e7f7      	b.n	800bf20 <__swsetup_r+0x98>
 800bf30:	24001374 	.word	0x24001374

0800bf34 <memset>:
 800bf34:	4402      	add	r2, r0
 800bf36:	4603      	mov	r3, r0
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d100      	bne.n	800bf3e <memset+0xa>
 800bf3c:	4770      	bx	lr
 800bf3e:	f803 1b01 	strb.w	r1, [r3], #1
 800bf42:	e7f9      	b.n	800bf38 <memset+0x4>

0800bf44 <_close_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	4d06      	ldr	r5, [pc, #24]	@ (800bf60 <_close_r+0x1c>)
 800bf48:	2300      	movs	r3, #0
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	4608      	mov	r0, r1
 800bf4e:	602b      	str	r3, [r5, #0]
 800bf50:	f7f4 feb7 	bl	8000cc2 <_close>
 800bf54:	1c43      	adds	r3, r0, #1
 800bf56:	d102      	bne.n	800bf5e <_close_r+0x1a>
 800bf58:	682b      	ldr	r3, [r5, #0]
 800bf5a:	b103      	cbz	r3, 800bf5e <_close_r+0x1a>
 800bf5c:	6023      	str	r3, [r4, #0]
 800bf5e:	bd38      	pop	{r3, r4, r5, pc}
 800bf60:	240471b8 	.word	0x240471b8

0800bf64 <_lseek_r>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	4d07      	ldr	r5, [pc, #28]	@ (800bf84 <_lseek_r+0x20>)
 800bf68:	4604      	mov	r4, r0
 800bf6a:	4608      	mov	r0, r1
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	2200      	movs	r2, #0
 800bf70:	602a      	str	r2, [r5, #0]
 800bf72:	461a      	mov	r2, r3
 800bf74:	f7f4 fecc 	bl	8000d10 <_lseek>
 800bf78:	1c43      	adds	r3, r0, #1
 800bf7a:	d102      	bne.n	800bf82 <_lseek_r+0x1e>
 800bf7c:	682b      	ldr	r3, [r5, #0]
 800bf7e:	b103      	cbz	r3, 800bf82 <_lseek_r+0x1e>
 800bf80:	6023      	str	r3, [r4, #0]
 800bf82:	bd38      	pop	{r3, r4, r5, pc}
 800bf84:	240471b8 	.word	0x240471b8

0800bf88 <_read_r>:
 800bf88:	b538      	push	{r3, r4, r5, lr}
 800bf8a:	4d07      	ldr	r5, [pc, #28]	@ (800bfa8 <_read_r+0x20>)
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	4608      	mov	r0, r1
 800bf90:	4611      	mov	r1, r2
 800bf92:	2200      	movs	r2, #0
 800bf94:	602a      	str	r2, [r5, #0]
 800bf96:	461a      	mov	r2, r3
 800bf98:	f7f4 fe5a 	bl	8000c50 <_read>
 800bf9c:	1c43      	adds	r3, r0, #1
 800bf9e:	d102      	bne.n	800bfa6 <_read_r+0x1e>
 800bfa0:	682b      	ldr	r3, [r5, #0]
 800bfa2:	b103      	cbz	r3, 800bfa6 <_read_r+0x1e>
 800bfa4:	6023      	str	r3, [r4, #0]
 800bfa6:	bd38      	pop	{r3, r4, r5, pc}
 800bfa8:	240471b8 	.word	0x240471b8

0800bfac <_sbrk_r>:
 800bfac:	b538      	push	{r3, r4, r5, lr}
 800bfae:	4d06      	ldr	r5, [pc, #24]	@ (800bfc8 <_sbrk_r+0x1c>)
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	4608      	mov	r0, r1
 800bfb6:	602b      	str	r3, [r5, #0]
 800bfb8:	f7f4 feb8 	bl	8000d2c <_sbrk>
 800bfbc:	1c43      	adds	r3, r0, #1
 800bfbe:	d102      	bne.n	800bfc6 <_sbrk_r+0x1a>
 800bfc0:	682b      	ldr	r3, [r5, #0]
 800bfc2:	b103      	cbz	r3, 800bfc6 <_sbrk_r+0x1a>
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	bd38      	pop	{r3, r4, r5, pc}
 800bfc8:	240471b8 	.word	0x240471b8

0800bfcc <_write_r>:
 800bfcc:	b538      	push	{r3, r4, r5, lr}
 800bfce:	4d07      	ldr	r5, [pc, #28]	@ (800bfec <_write_r+0x20>)
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	4608      	mov	r0, r1
 800bfd4:	4611      	mov	r1, r2
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	602a      	str	r2, [r5, #0]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	f7f4 fe55 	bl	8000c8a <_write>
 800bfe0:	1c43      	adds	r3, r0, #1
 800bfe2:	d102      	bne.n	800bfea <_write_r+0x1e>
 800bfe4:	682b      	ldr	r3, [r5, #0]
 800bfe6:	b103      	cbz	r3, 800bfea <_write_r+0x1e>
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	bd38      	pop	{r3, r4, r5, pc}
 800bfec:	240471b8 	.word	0x240471b8

0800bff0 <__errno>:
 800bff0:	4b01      	ldr	r3, [pc, #4]	@ (800bff8 <__errno+0x8>)
 800bff2:	6818      	ldr	r0, [r3, #0]
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	24001374 	.word	0x24001374

0800bffc <__libc_init_array>:
 800bffc:	b570      	push	{r4, r5, r6, lr}
 800bffe:	4d0d      	ldr	r5, [pc, #52]	@ (800c034 <__libc_init_array+0x38>)
 800c000:	4c0d      	ldr	r4, [pc, #52]	@ (800c038 <__libc_init_array+0x3c>)
 800c002:	1b64      	subs	r4, r4, r5
 800c004:	10a4      	asrs	r4, r4, #2
 800c006:	2600      	movs	r6, #0
 800c008:	42a6      	cmp	r6, r4
 800c00a:	d109      	bne.n	800c020 <__libc_init_array+0x24>
 800c00c:	4d0b      	ldr	r5, [pc, #44]	@ (800c03c <__libc_init_array+0x40>)
 800c00e:	4c0c      	ldr	r4, [pc, #48]	@ (800c040 <__libc_init_array+0x44>)
 800c010:	f000 fc64 	bl	800c8dc <_init>
 800c014:	1b64      	subs	r4, r4, r5
 800c016:	10a4      	asrs	r4, r4, #2
 800c018:	2600      	movs	r6, #0
 800c01a:	42a6      	cmp	r6, r4
 800c01c:	d105      	bne.n	800c02a <__libc_init_array+0x2e>
 800c01e:	bd70      	pop	{r4, r5, r6, pc}
 800c020:	f855 3b04 	ldr.w	r3, [r5], #4
 800c024:	4798      	blx	r3
 800c026:	3601      	adds	r6, #1
 800c028:	e7ee      	b.n	800c008 <__libc_init_array+0xc>
 800c02a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c02e:	4798      	blx	r3
 800c030:	3601      	adds	r6, #1
 800c032:	e7f2      	b.n	800c01a <__libc_init_array+0x1e>
 800c034:	08012a7c 	.word	0x08012a7c
 800c038:	08012a7c 	.word	0x08012a7c
 800c03c:	08012a7c 	.word	0x08012a7c
 800c040:	08012a80 	.word	0x08012a80

0800c044 <__retarget_lock_init_recursive>:
 800c044:	4770      	bx	lr

0800c046 <__retarget_lock_acquire_recursive>:
 800c046:	4770      	bx	lr

0800c048 <__retarget_lock_release_recursive>:
 800c048:	4770      	bx	lr
	...

0800c04c <_free_r>:
 800c04c:	b538      	push	{r3, r4, r5, lr}
 800c04e:	4605      	mov	r5, r0
 800c050:	2900      	cmp	r1, #0
 800c052:	d041      	beq.n	800c0d8 <_free_r+0x8c>
 800c054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c058:	1f0c      	subs	r4, r1, #4
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	bfb8      	it	lt
 800c05e:	18e4      	addlt	r4, r4, r3
 800c060:	f7ff fd52 	bl	800bb08 <__malloc_lock>
 800c064:	4a1d      	ldr	r2, [pc, #116]	@ (800c0dc <_free_r+0x90>)
 800c066:	6813      	ldr	r3, [r2, #0]
 800c068:	b933      	cbnz	r3, 800c078 <_free_r+0x2c>
 800c06a:	6063      	str	r3, [r4, #4]
 800c06c:	6014      	str	r4, [r2, #0]
 800c06e:	4628      	mov	r0, r5
 800c070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c074:	f7ff bd4e 	b.w	800bb14 <__malloc_unlock>
 800c078:	42a3      	cmp	r3, r4
 800c07a:	d908      	bls.n	800c08e <_free_r+0x42>
 800c07c:	6820      	ldr	r0, [r4, #0]
 800c07e:	1821      	adds	r1, r4, r0
 800c080:	428b      	cmp	r3, r1
 800c082:	bf01      	itttt	eq
 800c084:	6819      	ldreq	r1, [r3, #0]
 800c086:	685b      	ldreq	r3, [r3, #4]
 800c088:	1809      	addeq	r1, r1, r0
 800c08a:	6021      	streq	r1, [r4, #0]
 800c08c:	e7ed      	b.n	800c06a <_free_r+0x1e>
 800c08e:	461a      	mov	r2, r3
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	b10b      	cbz	r3, 800c098 <_free_r+0x4c>
 800c094:	42a3      	cmp	r3, r4
 800c096:	d9fa      	bls.n	800c08e <_free_r+0x42>
 800c098:	6811      	ldr	r1, [r2, #0]
 800c09a:	1850      	adds	r0, r2, r1
 800c09c:	42a0      	cmp	r0, r4
 800c09e:	d10b      	bne.n	800c0b8 <_free_r+0x6c>
 800c0a0:	6820      	ldr	r0, [r4, #0]
 800c0a2:	4401      	add	r1, r0
 800c0a4:	1850      	adds	r0, r2, r1
 800c0a6:	4283      	cmp	r3, r0
 800c0a8:	6011      	str	r1, [r2, #0]
 800c0aa:	d1e0      	bne.n	800c06e <_free_r+0x22>
 800c0ac:	6818      	ldr	r0, [r3, #0]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	6053      	str	r3, [r2, #4]
 800c0b2:	4408      	add	r0, r1
 800c0b4:	6010      	str	r0, [r2, #0]
 800c0b6:	e7da      	b.n	800c06e <_free_r+0x22>
 800c0b8:	d902      	bls.n	800c0c0 <_free_r+0x74>
 800c0ba:	230c      	movs	r3, #12
 800c0bc:	602b      	str	r3, [r5, #0]
 800c0be:	e7d6      	b.n	800c06e <_free_r+0x22>
 800c0c0:	6820      	ldr	r0, [r4, #0]
 800c0c2:	1821      	adds	r1, r4, r0
 800c0c4:	428b      	cmp	r3, r1
 800c0c6:	bf04      	itt	eq
 800c0c8:	6819      	ldreq	r1, [r3, #0]
 800c0ca:	685b      	ldreq	r3, [r3, #4]
 800c0cc:	6063      	str	r3, [r4, #4]
 800c0ce:	bf04      	itt	eq
 800c0d0:	1809      	addeq	r1, r1, r0
 800c0d2:	6021      	streq	r1, [r4, #0]
 800c0d4:	6054      	str	r4, [r2, #4]
 800c0d6:	e7ca      	b.n	800c06e <_free_r+0x22>
 800c0d8:	bd38      	pop	{r3, r4, r5, pc}
 800c0da:	bf00      	nop
 800c0dc:	24047078 	.word	0x24047078

0800c0e0 <__sfputc_r>:
 800c0e0:	6893      	ldr	r3, [r2, #8]
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	b410      	push	{r4}
 800c0e8:	6093      	str	r3, [r2, #8]
 800c0ea:	da08      	bge.n	800c0fe <__sfputc_r+0x1e>
 800c0ec:	6994      	ldr	r4, [r2, #24]
 800c0ee:	42a3      	cmp	r3, r4
 800c0f0:	db01      	blt.n	800c0f6 <__sfputc_r+0x16>
 800c0f2:	290a      	cmp	r1, #10
 800c0f4:	d103      	bne.n	800c0fe <__sfputc_r+0x1e>
 800c0f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0fa:	f7ff be86 	b.w	800be0a <__swbuf_r>
 800c0fe:	6813      	ldr	r3, [r2, #0]
 800c100:	1c58      	adds	r0, r3, #1
 800c102:	6010      	str	r0, [r2, #0]
 800c104:	7019      	strb	r1, [r3, #0]
 800c106:	4608      	mov	r0, r1
 800c108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <__sfputs_r>:
 800c10e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c110:	4606      	mov	r6, r0
 800c112:	460f      	mov	r7, r1
 800c114:	4614      	mov	r4, r2
 800c116:	18d5      	adds	r5, r2, r3
 800c118:	42ac      	cmp	r4, r5
 800c11a:	d101      	bne.n	800c120 <__sfputs_r+0x12>
 800c11c:	2000      	movs	r0, #0
 800c11e:	e007      	b.n	800c130 <__sfputs_r+0x22>
 800c120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c124:	463a      	mov	r2, r7
 800c126:	4630      	mov	r0, r6
 800c128:	f7ff ffda 	bl	800c0e0 <__sfputc_r>
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	d1f3      	bne.n	800c118 <__sfputs_r+0xa>
 800c130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c134 <_vfiprintf_r>:
 800c134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c138:	460d      	mov	r5, r1
 800c13a:	b09d      	sub	sp, #116	@ 0x74
 800c13c:	4614      	mov	r4, r2
 800c13e:	4698      	mov	r8, r3
 800c140:	4606      	mov	r6, r0
 800c142:	b118      	cbz	r0, 800c14c <_vfiprintf_r+0x18>
 800c144:	6a03      	ldr	r3, [r0, #32]
 800c146:	b90b      	cbnz	r3, 800c14c <_vfiprintf_r+0x18>
 800c148:	f7ff fd76 	bl	800bc38 <__sinit>
 800c14c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c14e:	07d9      	lsls	r1, r3, #31
 800c150:	d405      	bmi.n	800c15e <_vfiprintf_r+0x2a>
 800c152:	89ab      	ldrh	r3, [r5, #12]
 800c154:	059a      	lsls	r2, r3, #22
 800c156:	d402      	bmi.n	800c15e <_vfiprintf_r+0x2a>
 800c158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c15a:	f7ff ff74 	bl	800c046 <__retarget_lock_acquire_recursive>
 800c15e:	89ab      	ldrh	r3, [r5, #12]
 800c160:	071b      	lsls	r3, r3, #28
 800c162:	d501      	bpl.n	800c168 <_vfiprintf_r+0x34>
 800c164:	692b      	ldr	r3, [r5, #16]
 800c166:	b99b      	cbnz	r3, 800c190 <_vfiprintf_r+0x5c>
 800c168:	4629      	mov	r1, r5
 800c16a:	4630      	mov	r0, r6
 800c16c:	f7ff fe8c 	bl	800be88 <__swsetup_r>
 800c170:	b170      	cbz	r0, 800c190 <_vfiprintf_r+0x5c>
 800c172:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c174:	07dc      	lsls	r4, r3, #31
 800c176:	d504      	bpl.n	800c182 <_vfiprintf_r+0x4e>
 800c178:	f04f 30ff 	mov.w	r0, #4294967295
 800c17c:	b01d      	add	sp, #116	@ 0x74
 800c17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c182:	89ab      	ldrh	r3, [r5, #12]
 800c184:	0598      	lsls	r0, r3, #22
 800c186:	d4f7      	bmi.n	800c178 <_vfiprintf_r+0x44>
 800c188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c18a:	f7ff ff5d 	bl	800c048 <__retarget_lock_release_recursive>
 800c18e:	e7f3      	b.n	800c178 <_vfiprintf_r+0x44>
 800c190:	2300      	movs	r3, #0
 800c192:	9309      	str	r3, [sp, #36]	@ 0x24
 800c194:	2320      	movs	r3, #32
 800c196:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c19a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c19e:	2330      	movs	r3, #48	@ 0x30
 800c1a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c350 <_vfiprintf_r+0x21c>
 800c1a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1a8:	f04f 0901 	mov.w	r9, #1
 800c1ac:	4623      	mov	r3, r4
 800c1ae:	469a      	mov	sl, r3
 800c1b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1b4:	b10a      	cbz	r2, 800c1ba <_vfiprintf_r+0x86>
 800c1b6:	2a25      	cmp	r2, #37	@ 0x25
 800c1b8:	d1f9      	bne.n	800c1ae <_vfiprintf_r+0x7a>
 800c1ba:	ebba 0b04 	subs.w	fp, sl, r4
 800c1be:	d00b      	beq.n	800c1d8 <_vfiprintf_r+0xa4>
 800c1c0:	465b      	mov	r3, fp
 800c1c2:	4622      	mov	r2, r4
 800c1c4:	4629      	mov	r1, r5
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	f7ff ffa1 	bl	800c10e <__sfputs_r>
 800c1cc:	3001      	adds	r0, #1
 800c1ce:	f000 80a7 	beq.w	800c320 <_vfiprintf_r+0x1ec>
 800c1d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1d4:	445a      	add	r2, fp
 800c1d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f000 809f 	beq.w	800c320 <_vfiprintf_r+0x1ec>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1ec:	f10a 0a01 	add.w	sl, sl, #1
 800c1f0:	9304      	str	r3, [sp, #16]
 800c1f2:	9307      	str	r3, [sp, #28]
 800c1f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c1f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1fa:	4654      	mov	r4, sl
 800c1fc:	2205      	movs	r2, #5
 800c1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c202:	4853      	ldr	r0, [pc, #332]	@ (800c350 <_vfiprintf_r+0x21c>)
 800c204:	f7f4 f86c 	bl	80002e0 <memchr>
 800c208:	9a04      	ldr	r2, [sp, #16]
 800c20a:	b9d8      	cbnz	r0, 800c244 <_vfiprintf_r+0x110>
 800c20c:	06d1      	lsls	r1, r2, #27
 800c20e:	bf44      	itt	mi
 800c210:	2320      	movmi	r3, #32
 800c212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c216:	0713      	lsls	r3, r2, #28
 800c218:	bf44      	itt	mi
 800c21a:	232b      	movmi	r3, #43	@ 0x2b
 800c21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c220:	f89a 3000 	ldrb.w	r3, [sl]
 800c224:	2b2a      	cmp	r3, #42	@ 0x2a
 800c226:	d015      	beq.n	800c254 <_vfiprintf_r+0x120>
 800c228:	9a07      	ldr	r2, [sp, #28]
 800c22a:	4654      	mov	r4, sl
 800c22c:	2000      	movs	r0, #0
 800c22e:	f04f 0c0a 	mov.w	ip, #10
 800c232:	4621      	mov	r1, r4
 800c234:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c238:	3b30      	subs	r3, #48	@ 0x30
 800c23a:	2b09      	cmp	r3, #9
 800c23c:	d94b      	bls.n	800c2d6 <_vfiprintf_r+0x1a2>
 800c23e:	b1b0      	cbz	r0, 800c26e <_vfiprintf_r+0x13a>
 800c240:	9207      	str	r2, [sp, #28]
 800c242:	e014      	b.n	800c26e <_vfiprintf_r+0x13a>
 800c244:	eba0 0308 	sub.w	r3, r0, r8
 800c248:	fa09 f303 	lsl.w	r3, r9, r3
 800c24c:	4313      	orrs	r3, r2
 800c24e:	9304      	str	r3, [sp, #16]
 800c250:	46a2      	mov	sl, r4
 800c252:	e7d2      	b.n	800c1fa <_vfiprintf_r+0xc6>
 800c254:	9b03      	ldr	r3, [sp, #12]
 800c256:	1d19      	adds	r1, r3, #4
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	9103      	str	r1, [sp, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	bfbb      	ittet	lt
 800c260:	425b      	neglt	r3, r3
 800c262:	f042 0202 	orrlt.w	r2, r2, #2
 800c266:	9307      	strge	r3, [sp, #28]
 800c268:	9307      	strlt	r3, [sp, #28]
 800c26a:	bfb8      	it	lt
 800c26c:	9204      	strlt	r2, [sp, #16]
 800c26e:	7823      	ldrb	r3, [r4, #0]
 800c270:	2b2e      	cmp	r3, #46	@ 0x2e
 800c272:	d10a      	bne.n	800c28a <_vfiprintf_r+0x156>
 800c274:	7863      	ldrb	r3, [r4, #1]
 800c276:	2b2a      	cmp	r3, #42	@ 0x2a
 800c278:	d132      	bne.n	800c2e0 <_vfiprintf_r+0x1ac>
 800c27a:	9b03      	ldr	r3, [sp, #12]
 800c27c:	1d1a      	adds	r2, r3, #4
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	9203      	str	r2, [sp, #12]
 800c282:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c286:	3402      	adds	r4, #2
 800c288:	9305      	str	r3, [sp, #20]
 800c28a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c360 <_vfiprintf_r+0x22c>
 800c28e:	7821      	ldrb	r1, [r4, #0]
 800c290:	2203      	movs	r2, #3
 800c292:	4650      	mov	r0, sl
 800c294:	f7f4 f824 	bl	80002e0 <memchr>
 800c298:	b138      	cbz	r0, 800c2aa <_vfiprintf_r+0x176>
 800c29a:	9b04      	ldr	r3, [sp, #16]
 800c29c:	eba0 000a 	sub.w	r0, r0, sl
 800c2a0:	2240      	movs	r2, #64	@ 0x40
 800c2a2:	4082      	lsls	r2, r0
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	3401      	adds	r4, #1
 800c2a8:	9304      	str	r3, [sp, #16]
 800c2aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ae:	4829      	ldr	r0, [pc, #164]	@ (800c354 <_vfiprintf_r+0x220>)
 800c2b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2b4:	2206      	movs	r2, #6
 800c2b6:	f7f4 f813 	bl	80002e0 <memchr>
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	d03f      	beq.n	800c33e <_vfiprintf_r+0x20a>
 800c2be:	4b26      	ldr	r3, [pc, #152]	@ (800c358 <_vfiprintf_r+0x224>)
 800c2c0:	bb1b      	cbnz	r3, 800c30a <_vfiprintf_r+0x1d6>
 800c2c2:	9b03      	ldr	r3, [sp, #12]
 800c2c4:	3307      	adds	r3, #7
 800c2c6:	f023 0307 	bic.w	r3, r3, #7
 800c2ca:	3308      	adds	r3, #8
 800c2cc:	9303      	str	r3, [sp, #12]
 800c2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2d0:	443b      	add	r3, r7
 800c2d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2d4:	e76a      	b.n	800c1ac <_vfiprintf_r+0x78>
 800c2d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2da:	460c      	mov	r4, r1
 800c2dc:	2001      	movs	r0, #1
 800c2de:	e7a8      	b.n	800c232 <_vfiprintf_r+0xfe>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	3401      	adds	r4, #1
 800c2e4:	9305      	str	r3, [sp, #20]
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	f04f 0c0a 	mov.w	ip, #10
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2f2:	3a30      	subs	r2, #48	@ 0x30
 800c2f4:	2a09      	cmp	r2, #9
 800c2f6:	d903      	bls.n	800c300 <_vfiprintf_r+0x1cc>
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d0c6      	beq.n	800c28a <_vfiprintf_r+0x156>
 800c2fc:	9105      	str	r1, [sp, #20]
 800c2fe:	e7c4      	b.n	800c28a <_vfiprintf_r+0x156>
 800c300:	fb0c 2101 	mla	r1, ip, r1, r2
 800c304:	4604      	mov	r4, r0
 800c306:	2301      	movs	r3, #1
 800c308:	e7f0      	b.n	800c2ec <_vfiprintf_r+0x1b8>
 800c30a:	ab03      	add	r3, sp, #12
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	462a      	mov	r2, r5
 800c310:	4b12      	ldr	r3, [pc, #72]	@ (800c35c <_vfiprintf_r+0x228>)
 800c312:	a904      	add	r1, sp, #16
 800c314:	4630      	mov	r0, r6
 800c316:	f3af 8000 	nop.w
 800c31a:	4607      	mov	r7, r0
 800c31c:	1c78      	adds	r0, r7, #1
 800c31e:	d1d6      	bne.n	800c2ce <_vfiprintf_r+0x19a>
 800c320:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c322:	07d9      	lsls	r1, r3, #31
 800c324:	d405      	bmi.n	800c332 <_vfiprintf_r+0x1fe>
 800c326:	89ab      	ldrh	r3, [r5, #12]
 800c328:	059a      	lsls	r2, r3, #22
 800c32a:	d402      	bmi.n	800c332 <_vfiprintf_r+0x1fe>
 800c32c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c32e:	f7ff fe8b 	bl	800c048 <__retarget_lock_release_recursive>
 800c332:	89ab      	ldrh	r3, [r5, #12]
 800c334:	065b      	lsls	r3, r3, #25
 800c336:	f53f af1f 	bmi.w	800c178 <_vfiprintf_r+0x44>
 800c33a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c33c:	e71e      	b.n	800c17c <_vfiprintf_r+0x48>
 800c33e:	ab03      	add	r3, sp, #12
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	462a      	mov	r2, r5
 800c344:	4b05      	ldr	r3, [pc, #20]	@ (800c35c <_vfiprintf_r+0x228>)
 800c346:	a904      	add	r1, sp, #16
 800c348:	4630      	mov	r0, r6
 800c34a:	f000 f879 	bl	800c440 <_printf_i>
 800c34e:	e7e4      	b.n	800c31a <_vfiprintf_r+0x1e6>
 800c350:	08012a40 	.word	0x08012a40
 800c354:	08012a4a 	.word	0x08012a4a
 800c358:	00000000 	.word	0x00000000
 800c35c:	0800c10f 	.word	0x0800c10f
 800c360:	08012a46 	.word	0x08012a46

0800c364 <_printf_common>:
 800c364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c368:	4616      	mov	r6, r2
 800c36a:	4698      	mov	r8, r3
 800c36c:	688a      	ldr	r2, [r1, #8]
 800c36e:	690b      	ldr	r3, [r1, #16]
 800c370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c374:	4293      	cmp	r3, r2
 800c376:	bfb8      	it	lt
 800c378:	4613      	movlt	r3, r2
 800c37a:	6033      	str	r3, [r6, #0]
 800c37c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c380:	4607      	mov	r7, r0
 800c382:	460c      	mov	r4, r1
 800c384:	b10a      	cbz	r2, 800c38a <_printf_common+0x26>
 800c386:	3301      	adds	r3, #1
 800c388:	6033      	str	r3, [r6, #0]
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	0699      	lsls	r1, r3, #26
 800c38e:	bf42      	ittt	mi
 800c390:	6833      	ldrmi	r3, [r6, #0]
 800c392:	3302      	addmi	r3, #2
 800c394:	6033      	strmi	r3, [r6, #0]
 800c396:	6825      	ldr	r5, [r4, #0]
 800c398:	f015 0506 	ands.w	r5, r5, #6
 800c39c:	d106      	bne.n	800c3ac <_printf_common+0x48>
 800c39e:	f104 0a19 	add.w	sl, r4, #25
 800c3a2:	68e3      	ldr	r3, [r4, #12]
 800c3a4:	6832      	ldr	r2, [r6, #0]
 800c3a6:	1a9b      	subs	r3, r3, r2
 800c3a8:	42ab      	cmp	r3, r5
 800c3aa:	dc26      	bgt.n	800c3fa <_printf_common+0x96>
 800c3ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c3b0:	6822      	ldr	r2, [r4, #0]
 800c3b2:	3b00      	subs	r3, #0
 800c3b4:	bf18      	it	ne
 800c3b6:	2301      	movne	r3, #1
 800c3b8:	0692      	lsls	r2, r2, #26
 800c3ba:	d42b      	bmi.n	800c414 <_printf_common+0xb0>
 800c3bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c3c0:	4641      	mov	r1, r8
 800c3c2:	4638      	mov	r0, r7
 800c3c4:	47c8      	blx	r9
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	d01e      	beq.n	800c408 <_printf_common+0xa4>
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	6922      	ldr	r2, [r4, #16]
 800c3ce:	f003 0306 	and.w	r3, r3, #6
 800c3d2:	2b04      	cmp	r3, #4
 800c3d4:	bf02      	ittt	eq
 800c3d6:	68e5      	ldreq	r5, [r4, #12]
 800c3d8:	6833      	ldreq	r3, [r6, #0]
 800c3da:	1aed      	subeq	r5, r5, r3
 800c3dc:	68a3      	ldr	r3, [r4, #8]
 800c3de:	bf0c      	ite	eq
 800c3e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3e4:	2500      	movne	r5, #0
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	bfc4      	itt	gt
 800c3ea:	1a9b      	subgt	r3, r3, r2
 800c3ec:	18ed      	addgt	r5, r5, r3
 800c3ee:	2600      	movs	r6, #0
 800c3f0:	341a      	adds	r4, #26
 800c3f2:	42b5      	cmp	r5, r6
 800c3f4:	d11a      	bne.n	800c42c <_printf_common+0xc8>
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	e008      	b.n	800c40c <_printf_common+0xa8>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	4652      	mov	r2, sl
 800c3fe:	4641      	mov	r1, r8
 800c400:	4638      	mov	r0, r7
 800c402:	47c8      	blx	r9
 800c404:	3001      	adds	r0, #1
 800c406:	d103      	bne.n	800c410 <_printf_common+0xac>
 800c408:	f04f 30ff 	mov.w	r0, #4294967295
 800c40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c410:	3501      	adds	r5, #1
 800c412:	e7c6      	b.n	800c3a2 <_printf_common+0x3e>
 800c414:	18e1      	adds	r1, r4, r3
 800c416:	1c5a      	adds	r2, r3, #1
 800c418:	2030      	movs	r0, #48	@ 0x30
 800c41a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c41e:	4422      	add	r2, r4
 800c420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c428:	3302      	adds	r3, #2
 800c42a:	e7c7      	b.n	800c3bc <_printf_common+0x58>
 800c42c:	2301      	movs	r3, #1
 800c42e:	4622      	mov	r2, r4
 800c430:	4641      	mov	r1, r8
 800c432:	4638      	mov	r0, r7
 800c434:	47c8      	blx	r9
 800c436:	3001      	adds	r0, #1
 800c438:	d0e6      	beq.n	800c408 <_printf_common+0xa4>
 800c43a:	3601      	adds	r6, #1
 800c43c:	e7d9      	b.n	800c3f2 <_printf_common+0x8e>
	...

0800c440 <_printf_i>:
 800c440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c444:	7e0f      	ldrb	r7, [r1, #24]
 800c446:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c448:	2f78      	cmp	r7, #120	@ 0x78
 800c44a:	4691      	mov	r9, r2
 800c44c:	4680      	mov	r8, r0
 800c44e:	460c      	mov	r4, r1
 800c450:	469a      	mov	sl, r3
 800c452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c456:	d807      	bhi.n	800c468 <_printf_i+0x28>
 800c458:	2f62      	cmp	r7, #98	@ 0x62
 800c45a:	d80a      	bhi.n	800c472 <_printf_i+0x32>
 800c45c:	2f00      	cmp	r7, #0
 800c45e:	f000 80d1 	beq.w	800c604 <_printf_i+0x1c4>
 800c462:	2f58      	cmp	r7, #88	@ 0x58
 800c464:	f000 80b8 	beq.w	800c5d8 <_printf_i+0x198>
 800c468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c46c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c470:	e03a      	b.n	800c4e8 <_printf_i+0xa8>
 800c472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c476:	2b15      	cmp	r3, #21
 800c478:	d8f6      	bhi.n	800c468 <_printf_i+0x28>
 800c47a:	a101      	add	r1, pc, #4	@ (adr r1, 800c480 <_printf_i+0x40>)
 800c47c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c480:	0800c4d9 	.word	0x0800c4d9
 800c484:	0800c4ed 	.word	0x0800c4ed
 800c488:	0800c469 	.word	0x0800c469
 800c48c:	0800c469 	.word	0x0800c469
 800c490:	0800c469 	.word	0x0800c469
 800c494:	0800c469 	.word	0x0800c469
 800c498:	0800c4ed 	.word	0x0800c4ed
 800c49c:	0800c469 	.word	0x0800c469
 800c4a0:	0800c469 	.word	0x0800c469
 800c4a4:	0800c469 	.word	0x0800c469
 800c4a8:	0800c469 	.word	0x0800c469
 800c4ac:	0800c5eb 	.word	0x0800c5eb
 800c4b0:	0800c517 	.word	0x0800c517
 800c4b4:	0800c5a5 	.word	0x0800c5a5
 800c4b8:	0800c469 	.word	0x0800c469
 800c4bc:	0800c469 	.word	0x0800c469
 800c4c0:	0800c60d 	.word	0x0800c60d
 800c4c4:	0800c469 	.word	0x0800c469
 800c4c8:	0800c517 	.word	0x0800c517
 800c4cc:	0800c469 	.word	0x0800c469
 800c4d0:	0800c469 	.word	0x0800c469
 800c4d4:	0800c5ad 	.word	0x0800c5ad
 800c4d8:	6833      	ldr	r3, [r6, #0]
 800c4da:	1d1a      	adds	r2, r3, #4
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	6032      	str	r2, [r6, #0]
 800c4e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c4e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e09c      	b.n	800c626 <_printf_i+0x1e6>
 800c4ec:	6833      	ldr	r3, [r6, #0]
 800c4ee:	6820      	ldr	r0, [r4, #0]
 800c4f0:	1d19      	adds	r1, r3, #4
 800c4f2:	6031      	str	r1, [r6, #0]
 800c4f4:	0606      	lsls	r6, r0, #24
 800c4f6:	d501      	bpl.n	800c4fc <_printf_i+0xbc>
 800c4f8:	681d      	ldr	r5, [r3, #0]
 800c4fa:	e003      	b.n	800c504 <_printf_i+0xc4>
 800c4fc:	0645      	lsls	r5, r0, #25
 800c4fe:	d5fb      	bpl.n	800c4f8 <_printf_i+0xb8>
 800c500:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c504:	2d00      	cmp	r5, #0
 800c506:	da03      	bge.n	800c510 <_printf_i+0xd0>
 800c508:	232d      	movs	r3, #45	@ 0x2d
 800c50a:	426d      	negs	r5, r5
 800c50c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c510:	4858      	ldr	r0, [pc, #352]	@ (800c674 <_printf_i+0x234>)
 800c512:	230a      	movs	r3, #10
 800c514:	e011      	b.n	800c53a <_printf_i+0xfa>
 800c516:	6821      	ldr	r1, [r4, #0]
 800c518:	6833      	ldr	r3, [r6, #0]
 800c51a:	0608      	lsls	r0, r1, #24
 800c51c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c520:	d402      	bmi.n	800c528 <_printf_i+0xe8>
 800c522:	0649      	lsls	r1, r1, #25
 800c524:	bf48      	it	mi
 800c526:	b2ad      	uxthmi	r5, r5
 800c528:	2f6f      	cmp	r7, #111	@ 0x6f
 800c52a:	4852      	ldr	r0, [pc, #328]	@ (800c674 <_printf_i+0x234>)
 800c52c:	6033      	str	r3, [r6, #0]
 800c52e:	bf14      	ite	ne
 800c530:	230a      	movne	r3, #10
 800c532:	2308      	moveq	r3, #8
 800c534:	2100      	movs	r1, #0
 800c536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c53a:	6866      	ldr	r6, [r4, #4]
 800c53c:	60a6      	str	r6, [r4, #8]
 800c53e:	2e00      	cmp	r6, #0
 800c540:	db05      	blt.n	800c54e <_printf_i+0x10e>
 800c542:	6821      	ldr	r1, [r4, #0]
 800c544:	432e      	orrs	r6, r5
 800c546:	f021 0104 	bic.w	r1, r1, #4
 800c54a:	6021      	str	r1, [r4, #0]
 800c54c:	d04b      	beq.n	800c5e6 <_printf_i+0x1a6>
 800c54e:	4616      	mov	r6, r2
 800c550:	fbb5 f1f3 	udiv	r1, r5, r3
 800c554:	fb03 5711 	mls	r7, r3, r1, r5
 800c558:	5dc7      	ldrb	r7, [r0, r7]
 800c55a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c55e:	462f      	mov	r7, r5
 800c560:	42bb      	cmp	r3, r7
 800c562:	460d      	mov	r5, r1
 800c564:	d9f4      	bls.n	800c550 <_printf_i+0x110>
 800c566:	2b08      	cmp	r3, #8
 800c568:	d10b      	bne.n	800c582 <_printf_i+0x142>
 800c56a:	6823      	ldr	r3, [r4, #0]
 800c56c:	07df      	lsls	r7, r3, #31
 800c56e:	d508      	bpl.n	800c582 <_printf_i+0x142>
 800c570:	6923      	ldr	r3, [r4, #16]
 800c572:	6861      	ldr	r1, [r4, #4]
 800c574:	4299      	cmp	r1, r3
 800c576:	bfde      	ittt	le
 800c578:	2330      	movle	r3, #48	@ 0x30
 800c57a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c57e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c582:	1b92      	subs	r2, r2, r6
 800c584:	6122      	str	r2, [r4, #16]
 800c586:	f8cd a000 	str.w	sl, [sp]
 800c58a:	464b      	mov	r3, r9
 800c58c:	aa03      	add	r2, sp, #12
 800c58e:	4621      	mov	r1, r4
 800c590:	4640      	mov	r0, r8
 800c592:	f7ff fee7 	bl	800c364 <_printf_common>
 800c596:	3001      	adds	r0, #1
 800c598:	d14a      	bne.n	800c630 <_printf_i+0x1f0>
 800c59a:	f04f 30ff 	mov.w	r0, #4294967295
 800c59e:	b004      	add	sp, #16
 800c5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	f043 0320 	orr.w	r3, r3, #32
 800c5aa:	6023      	str	r3, [r4, #0]
 800c5ac:	4832      	ldr	r0, [pc, #200]	@ (800c678 <_printf_i+0x238>)
 800c5ae:	2778      	movs	r7, #120	@ 0x78
 800c5b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c5b4:	6823      	ldr	r3, [r4, #0]
 800c5b6:	6831      	ldr	r1, [r6, #0]
 800c5b8:	061f      	lsls	r7, r3, #24
 800c5ba:	f851 5b04 	ldr.w	r5, [r1], #4
 800c5be:	d402      	bmi.n	800c5c6 <_printf_i+0x186>
 800c5c0:	065f      	lsls	r7, r3, #25
 800c5c2:	bf48      	it	mi
 800c5c4:	b2ad      	uxthmi	r5, r5
 800c5c6:	6031      	str	r1, [r6, #0]
 800c5c8:	07d9      	lsls	r1, r3, #31
 800c5ca:	bf44      	itt	mi
 800c5cc:	f043 0320 	orrmi.w	r3, r3, #32
 800c5d0:	6023      	strmi	r3, [r4, #0]
 800c5d2:	b11d      	cbz	r5, 800c5dc <_printf_i+0x19c>
 800c5d4:	2310      	movs	r3, #16
 800c5d6:	e7ad      	b.n	800c534 <_printf_i+0xf4>
 800c5d8:	4826      	ldr	r0, [pc, #152]	@ (800c674 <_printf_i+0x234>)
 800c5da:	e7e9      	b.n	800c5b0 <_printf_i+0x170>
 800c5dc:	6823      	ldr	r3, [r4, #0]
 800c5de:	f023 0320 	bic.w	r3, r3, #32
 800c5e2:	6023      	str	r3, [r4, #0]
 800c5e4:	e7f6      	b.n	800c5d4 <_printf_i+0x194>
 800c5e6:	4616      	mov	r6, r2
 800c5e8:	e7bd      	b.n	800c566 <_printf_i+0x126>
 800c5ea:	6833      	ldr	r3, [r6, #0]
 800c5ec:	6825      	ldr	r5, [r4, #0]
 800c5ee:	6961      	ldr	r1, [r4, #20]
 800c5f0:	1d18      	adds	r0, r3, #4
 800c5f2:	6030      	str	r0, [r6, #0]
 800c5f4:	062e      	lsls	r6, r5, #24
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	d501      	bpl.n	800c5fe <_printf_i+0x1be>
 800c5fa:	6019      	str	r1, [r3, #0]
 800c5fc:	e002      	b.n	800c604 <_printf_i+0x1c4>
 800c5fe:	0668      	lsls	r0, r5, #25
 800c600:	d5fb      	bpl.n	800c5fa <_printf_i+0x1ba>
 800c602:	8019      	strh	r1, [r3, #0]
 800c604:	2300      	movs	r3, #0
 800c606:	6123      	str	r3, [r4, #16]
 800c608:	4616      	mov	r6, r2
 800c60a:	e7bc      	b.n	800c586 <_printf_i+0x146>
 800c60c:	6833      	ldr	r3, [r6, #0]
 800c60e:	1d1a      	adds	r2, r3, #4
 800c610:	6032      	str	r2, [r6, #0]
 800c612:	681e      	ldr	r6, [r3, #0]
 800c614:	6862      	ldr	r2, [r4, #4]
 800c616:	2100      	movs	r1, #0
 800c618:	4630      	mov	r0, r6
 800c61a:	f7f3 fe61 	bl	80002e0 <memchr>
 800c61e:	b108      	cbz	r0, 800c624 <_printf_i+0x1e4>
 800c620:	1b80      	subs	r0, r0, r6
 800c622:	6060      	str	r0, [r4, #4]
 800c624:	6863      	ldr	r3, [r4, #4]
 800c626:	6123      	str	r3, [r4, #16]
 800c628:	2300      	movs	r3, #0
 800c62a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c62e:	e7aa      	b.n	800c586 <_printf_i+0x146>
 800c630:	6923      	ldr	r3, [r4, #16]
 800c632:	4632      	mov	r2, r6
 800c634:	4649      	mov	r1, r9
 800c636:	4640      	mov	r0, r8
 800c638:	47d0      	blx	sl
 800c63a:	3001      	adds	r0, #1
 800c63c:	d0ad      	beq.n	800c59a <_printf_i+0x15a>
 800c63e:	6823      	ldr	r3, [r4, #0]
 800c640:	079b      	lsls	r3, r3, #30
 800c642:	d413      	bmi.n	800c66c <_printf_i+0x22c>
 800c644:	68e0      	ldr	r0, [r4, #12]
 800c646:	9b03      	ldr	r3, [sp, #12]
 800c648:	4298      	cmp	r0, r3
 800c64a:	bfb8      	it	lt
 800c64c:	4618      	movlt	r0, r3
 800c64e:	e7a6      	b.n	800c59e <_printf_i+0x15e>
 800c650:	2301      	movs	r3, #1
 800c652:	4632      	mov	r2, r6
 800c654:	4649      	mov	r1, r9
 800c656:	4640      	mov	r0, r8
 800c658:	47d0      	blx	sl
 800c65a:	3001      	adds	r0, #1
 800c65c:	d09d      	beq.n	800c59a <_printf_i+0x15a>
 800c65e:	3501      	adds	r5, #1
 800c660:	68e3      	ldr	r3, [r4, #12]
 800c662:	9903      	ldr	r1, [sp, #12]
 800c664:	1a5b      	subs	r3, r3, r1
 800c666:	42ab      	cmp	r3, r5
 800c668:	dcf2      	bgt.n	800c650 <_printf_i+0x210>
 800c66a:	e7eb      	b.n	800c644 <_printf_i+0x204>
 800c66c:	2500      	movs	r5, #0
 800c66e:	f104 0619 	add.w	r6, r4, #25
 800c672:	e7f5      	b.n	800c660 <_printf_i+0x220>
 800c674:	08012a51 	.word	0x08012a51
 800c678:	08012a62 	.word	0x08012a62

0800c67c <__sflush_r>:
 800c67c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c684:	0716      	lsls	r6, r2, #28
 800c686:	4605      	mov	r5, r0
 800c688:	460c      	mov	r4, r1
 800c68a:	d454      	bmi.n	800c736 <__sflush_r+0xba>
 800c68c:	684b      	ldr	r3, [r1, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	dc02      	bgt.n	800c698 <__sflush_r+0x1c>
 800c692:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c694:	2b00      	cmp	r3, #0
 800c696:	dd48      	ble.n	800c72a <__sflush_r+0xae>
 800c698:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c69a:	2e00      	cmp	r6, #0
 800c69c:	d045      	beq.n	800c72a <__sflush_r+0xae>
 800c69e:	2300      	movs	r3, #0
 800c6a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c6a4:	682f      	ldr	r7, [r5, #0]
 800c6a6:	6a21      	ldr	r1, [r4, #32]
 800c6a8:	602b      	str	r3, [r5, #0]
 800c6aa:	d030      	beq.n	800c70e <__sflush_r+0x92>
 800c6ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6ae:	89a3      	ldrh	r3, [r4, #12]
 800c6b0:	0759      	lsls	r1, r3, #29
 800c6b2:	d505      	bpl.n	800c6c0 <__sflush_r+0x44>
 800c6b4:	6863      	ldr	r3, [r4, #4]
 800c6b6:	1ad2      	subs	r2, r2, r3
 800c6b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6ba:	b10b      	cbz	r3, 800c6c0 <__sflush_r+0x44>
 800c6bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c6be:	1ad2      	subs	r2, r2, r3
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6c4:	6a21      	ldr	r1, [r4, #32]
 800c6c6:	4628      	mov	r0, r5
 800c6c8:	47b0      	blx	r6
 800c6ca:	1c43      	adds	r3, r0, #1
 800c6cc:	89a3      	ldrh	r3, [r4, #12]
 800c6ce:	d106      	bne.n	800c6de <__sflush_r+0x62>
 800c6d0:	6829      	ldr	r1, [r5, #0]
 800c6d2:	291d      	cmp	r1, #29
 800c6d4:	d82b      	bhi.n	800c72e <__sflush_r+0xb2>
 800c6d6:	4a2a      	ldr	r2, [pc, #168]	@ (800c780 <__sflush_r+0x104>)
 800c6d8:	40ca      	lsrs	r2, r1
 800c6da:	07d6      	lsls	r6, r2, #31
 800c6dc:	d527      	bpl.n	800c72e <__sflush_r+0xb2>
 800c6de:	2200      	movs	r2, #0
 800c6e0:	6062      	str	r2, [r4, #4]
 800c6e2:	04d9      	lsls	r1, r3, #19
 800c6e4:	6922      	ldr	r2, [r4, #16]
 800c6e6:	6022      	str	r2, [r4, #0]
 800c6e8:	d504      	bpl.n	800c6f4 <__sflush_r+0x78>
 800c6ea:	1c42      	adds	r2, r0, #1
 800c6ec:	d101      	bne.n	800c6f2 <__sflush_r+0x76>
 800c6ee:	682b      	ldr	r3, [r5, #0]
 800c6f0:	b903      	cbnz	r3, 800c6f4 <__sflush_r+0x78>
 800c6f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c6f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6f6:	602f      	str	r7, [r5, #0]
 800c6f8:	b1b9      	cbz	r1, 800c72a <__sflush_r+0xae>
 800c6fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6fe:	4299      	cmp	r1, r3
 800c700:	d002      	beq.n	800c708 <__sflush_r+0x8c>
 800c702:	4628      	mov	r0, r5
 800c704:	f7ff fca2 	bl	800c04c <_free_r>
 800c708:	2300      	movs	r3, #0
 800c70a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c70c:	e00d      	b.n	800c72a <__sflush_r+0xae>
 800c70e:	2301      	movs	r3, #1
 800c710:	4628      	mov	r0, r5
 800c712:	47b0      	blx	r6
 800c714:	4602      	mov	r2, r0
 800c716:	1c50      	adds	r0, r2, #1
 800c718:	d1c9      	bne.n	800c6ae <__sflush_r+0x32>
 800c71a:	682b      	ldr	r3, [r5, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d0c6      	beq.n	800c6ae <__sflush_r+0x32>
 800c720:	2b1d      	cmp	r3, #29
 800c722:	d001      	beq.n	800c728 <__sflush_r+0xac>
 800c724:	2b16      	cmp	r3, #22
 800c726:	d11e      	bne.n	800c766 <__sflush_r+0xea>
 800c728:	602f      	str	r7, [r5, #0]
 800c72a:	2000      	movs	r0, #0
 800c72c:	e022      	b.n	800c774 <__sflush_r+0xf8>
 800c72e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c732:	b21b      	sxth	r3, r3
 800c734:	e01b      	b.n	800c76e <__sflush_r+0xf2>
 800c736:	690f      	ldr	r7, [r1, #16]
 800c738:	2f00      	cmp	r7, #0
 800c73a:	d0f6      	beq.n	800c72a <__sflush_r+0xae>
 800c73c:	0793      	lsls	r3, r2, #30
 800c73e:	680e      	ldr	r6, [r1, #0]
 800c740:	bf08      	it	eq
 800c742:	694b      	ldreq	r3, [r1, #20]
 800c744:	600f      	str	r7, [r1, #0]
 800c746:	bf18      	it	ne
 800c748:	2300      	movne	r3, #0
 800c74a:	eba6 0807 	sub.w	r8, r6, r7
 800c74e:	608b      	str	r3, [r1, #8]
 800c750:	f1b8 0f00 	cmp.w	r8, #0
 800c754:	dde9      	ble.n	800c72a <__sflush_r+0xae>
 800c756:	6a21      	ldr	r1, [r4, #32]
 800c758:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c75a:	4643      	mov	r3, r8
 800c75c:	463a      	mov	r2, r7
 800c75e:	4628      	mov	r0, r5
 800c760:	47b0      	blx	r6
 800c762:	2800      	cmp	r0, #0
 800c764:	dc08      	bgt.n	800c778 <__sflush_r+0xfc>
 800c766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c76a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c76e:	81a3      	strh	r3, [r4, #12]
 800c770:	f04f 30ff 	mov.w	r0, #4294967295
 800c774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c778:	4407      	add	r7, r0
 800c77a:	eba8 0800 	sub.w	r8, r8, r0
 800c77e:	e7e7      	b.n	800c750 <__sflush_r+0xd4>
 800c780:	20400001 	.word	0x20400001

0800c784 <_fflush_r>:
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	690b      	ldr	r3, [r1, #16]
 800c788:	4605      	mov	r5, r0
 800c78a:	460c      	mov	r4, r1
 800c78c:	b913      	cbnz	r3, 800c794 <_fflush_r+0x10>
 800c78e:	2500      	movs	r5, #0
 800c790:	4628      	mov	r0, r5
 800c792:	bd38      	pop	{r3, r4, r5, pc}
 800c794:	b118      	cbz	r0, 800c79e <_fflush_r+0x1a>
 800c796:	6a03      	ldr	r3, [r0, #32]
 800c798:	b90b      	cbnz	r3, 800c79e <_fflush_r+0x1a>
 800c79a:	f7ff fa4d 	bl	800bc38 <__sinit>
 800c79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d0f3      	beq.n	800c78e <_fflush_r+0xa>
 800c7a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7a8:	07d0      	lsls	r0, r2, #31
 800c7aa:	d404      	bmi.n	800c7b6 <_fflush_r+0x32>
 800c7ac:	0599      	lsls	r1, r3, #22
 800c7ae:	d402      	bmi.n	800c7b6 <_fflush_r+0x32>
 800c7b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7b2:	f7ff fc48 	bl	800c046 <__retarget_lock_acquire_recursive>
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	f7ff ff5f 	bl	800c67c <__sflush_r>
 800c7be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7c0:	07da      	lsls	r2, r3, #31
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	d4e4      	bmi.n	800c790 <_fflush_r+0xc>
 800c7c6:	89a3      	ldrh	r3, [r4, #12]
 800c7c8:	059b      	lsls	r3, r3, #22
 800c7ca:	d4e1      	bmi.n	800c790 <_fflush_r+0xc>
 800c7cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7ce:	f7ff fc3b 	bl	800c048 <__retarget_lock_release_recursive>
 800c7d2:	e7dd      	b.n	800c790 <_fflush_r+0xc>

0800c7d4 <__swhatbuf_r>:
 800c7d4:	b570      	push	{r4, r5, r6, lr}
 800c7d6:	460c      	mov	r4, r1
 800c7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7dc:	2900      	cmp	r1, #0
 800c7de:	b096      	sub	sp, #88	@ 0x58
 800c7e0:	4615      	mov	r5, r2
 800c7e2:	461e      	mov	r6, r3
 800c7e4:	da0d      	bge.n	800c802 <__swhatbuf_r+0x2e>
 800c7e6:	89a3      	ldrh	r3, [r4, #12]
 800c7e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c7ec:	f04f 0100 	mov.w	r1, #0
 800c7f0:	bf14      	ite	ne
 800c7f2:	2340      	movne	r3, #64	@ 0x40
 800c7f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	6031      	str	r1, [r6, #0]
 800c7fc:	602b      	str	r3, [r5, #0]
 800c7fe:	b016      	add	sp, #88	@ 0x58
 800c800:	bd70      	pop	{r4, r5, r6, pc}
 800c802:	466a      	mov	r2, sp
 800c804:	f000 f848 	bl	800c898 <_fstat_r>
 800c808:	2800      	cmp	r0, #0
 800c80a:	dbec      	blt.n	800c7e6 <__swhatbuf_r+0x12>
 800c80c:	9901      	ldr	r1, [sp, #4]
 800c80e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c812:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c816:	4259      	negs	r1, r3
 800c818:	4159      	adcs	r1, r3
 800c81a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c81e:	e7eb      	b.n	800c7f8 <__swhatbuf_r+0x24>

0800c820 <__smakebuf_r>:
 800c820:	898b      	ldrh	r3, [r1, #12]
 800c822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c824:	079d      	lsls	r5, r3, #30
 800c826:	4606      	mov	r6, r0
 800c828:	460c      	mov	r4, r1
 800c82a:	d507      	bpl.n	800c83c <__smakebuf_r+0x1c>
 800c82c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c830:	6023      	str	r3, [r4, #0]
 800c832:	6123      	str	r3, [r4, #16]
 800c834:	2301      	movs	r3, #1
 800c836:	6163      	str	r3, [r4, #20]
 800c838:	b003      	add	sp, #12
 800c83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c83c:	ab01      	add	r3, sp, #4
 800c83e:	466a      	mov	r2, sp
 800c840:	f7ff ffc8 	bl	800c7d4 <__swhatbuf_r>
 800c844:	9f00      	ldr	r7, [sp, #0]
 800c846:	4605      	mov	r5, r0
 800c848:	4639      	mov	r1, r7
 800c84a:	4630      	mov	r0, r6
 800c84c:	f7ff f8dc 	bl	800ba08 <_malloc_r>
 800c850:	b948      	cbnz	r0, 800c866 <__smakebuf_r+0x46>
 800c852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c856:	059a      	lsls	r2, r3, #22
 800c858:	d4ee      	bmi.n	800c838 <__smakebuf_r+0x18>
 800c85a:	f023 0303 	bic.w	r3, r3, #3
 800c85e:	f043 0302 	orr.w	r3, r3, #2
 800c862:	81a3      	strh	r3, [r4, #12]
 800c864:	e7e2      	b.n	800c82c <__smakebuf_r+0xc>
 800c866:	89a3      	ldrh	r3, [r4, #12]
 800c868:	6020      	str	r0, [r4, #0]
 800c86a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c86e:	81a3      	strh	r3, [r4, #12]
 800c870:	9b01      	ldr	r3, [sp, #4]
 800c872:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c876:	b15b      	cbz	r3, 800c890 <__smakebuf_r+0x70>
 800c878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c87c:	4630      	mov	r0, r6
 800c87e:	f000 f81d 	bl	800c8bc <_isatty_r>
 800c882:	b128      	cbz	r0, 800c890 <__smakebuf_r+0x70>
 800c884:	89a3      	ldrh	r3, [r4, #12]
 800c886:	f023 0303 	bic.w	r3, r3, #3
 800c88a:	f043 0301 	orr.w	r3, r3, #1
 800c88e:	81a3      	strh	r3, [r4, #12]
 800c890:	89a3      	ldrh	r3, [r4, #12]
 800c892:	431d      	orrs	r5, r3
 800c894:	81a5      	strh	r5, [r4, #12]
 800c896:	e7cf      	b.n	800c838 <__smakebuf_r+0x18>

0800c898 <_fstat_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4d07      	ldr	r5, [pc, #28]	@ (800c8b8 <_fstat_r+0x20>)
 800c89c:	2300      	movs	r3, #0
 800c89e:	4604      	mov	r4, r0
 800c8a0:	4608      	mov	r0, r1
 800c8a2:	4611      	mov	r1, r2
 800c8a4:	602b      	str	r3, [r5, #0]
 800c8a6:	f7f4 fa18 	bl	8000cda <_fstat>
 800c8aa:	1c43      	adds	r3, r0, #1
 800c8ac:	d102      	bne.n	800c8b4 <_fstat_r+0x1c>
 800c8ae:	682b      	ldr	r3, [r5, #0]
 800c8b0:	b103      	cbz	r3, 800c8b4 <_fstat_r+0x1c>
 800c8b2:	6023      	str	r3, [r4, #0]
 800c8b4:	bd38      	pop	{r3, r4, r5, pc}
 800c8b6:	bf00      	nop
 800c8b8:	240471b8 	.word	0x240471b8

0800c8bc <_isatty_r>:
 800c8bc:	b538      	push	{r3, r4, r5, lr}
 800c8be:	4d06      	ldr	r5, [pc, #24]	@ (800c8d8 <_isatty_r+0x1c>)
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	4608      	mov	r0, r1
 800c8c6:	602b      	str	r3, [r5, #0]
 800c8c8:	f7f4 fa17 	bl	8000cfa <_isatty>
 800c8cc:	1c43      	adds	r3, r0, #1
 800c8ce:	d102      	bne.n	800c8d6 <_isatty_r+0x1a>
 800c8d0:	682b      	ldr	r3, [r5, #0]
 800c8d2:	b103      	cbz	r3, 800c8d6 <_isatty_r+0x1a>
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}
 800c8d8:	240471b8 	.word	0x240471b8

0800c8dc <_init>:
 800c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8de:	bf00      	nop
 800c8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8e2:	bc08      	pop	{r3}
 800c8e4:	469e      	mov	lr, r3
 800c8e6:	4770      	bx	lr

0800c8e8 <_fini>:
 800c8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ea:	bf00      	nop
 800c8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ee:	bc08      	pop	{r3}
 800c8f0:	469e      	mov	lr, r3
 800c8f2:	4770      	bx	lr
